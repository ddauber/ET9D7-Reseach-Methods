[["r-basics-the-very-fundamentals.html", "5 R Basics: The very fundamentals 5.1 Basic computations in R 5.2 Assigning values to objects: ‘&lt;-’ 5.3 Functions 5.4 R packages 5.5 Coding etiquette 5.6 Exercises", " 5 R Basics: The very fundamentals After a likely tedious installation of R and RStudio, as well as a somewhat detailed introduction to the RStudio interface, you are finally ready to ‘do’ things. By ‘doing,’ I mean coding. The term ‘coding’ in itself can instil fear in some of you, but you only need one skill to do it: Writing. As mentioned earlier, learning coding or programming means learning a new language. However, once you have the basic grammar down, you already can communicate quite a bit. In this section, we will explore the fundamentals of R. These build the foundation for everything that follows. After that, we dive right into some analysis. 5.1 Basic computations in R The most basic computation you can do in R is arithmetic operations. In other words, addition, subtraction, multiplication, division, exponentiation and extraction of roots. In other words, R can be used like your pocket calculator, or more likely the one you have on your phone. For example, in Chapter 4.1 we already performed an addition. Thus, it might not come as a surprise how their equivalents work in R. Let’s take a look at the following examples: # Addition 10+5 ## [1] 15 # Subtraction 10-5 ## [1] 5 # Multiplication 10*5 ## [1] 50 # Division 10/5 ## [1] 2 # Exponentiation 10^2 ## [1] 100 # Square root sqrt(10) ## [1] 3.162278 They all look fairly straightforward except for the extraction of roots. As you probably know, extracting the root would typically mean we use the symbol \\(\\sqrt{}\\) on your calculator. To compute the square root in R, we have to use a function instead to perform the computation. So we first put the name of the function sqrt and then the value 10 within parenthesis (). This results in the following code: sqrt(10). If we were to write this down in our report, we would write \\(\\sqrt[2]{10}\\). Functions are an essential part of R and programming in general. You will learn more about them in this chapter.Besides arithmetic operations, there are also logical queries you can perform. Logical queries always return either the value TRUE or FALSE. Here are some examples which make this clearer: #1 Is it TRUE or FALSE? 1 == 1 ## [1] TRUE #2 Is 45 bigger than 55? 45 &gt; 55 ## [1] FALSE #3 Is 1982 bigger or equal to 1982? 1982 &gt;= 1982 ## [1] TRUE #4 Are these two words NOT the same? &quot;Friends&quot; != &quot;friends&quot; ## [1] TRUE #5 Are these sentences the same? &quot;I love statistics&quot; == &quot;I love statistícs&quot; ## [1] FALSE Reflecting on these examples, you might notice three important things: I used == instead of =, I can compare non-numerical values, i.e. text, which is also known as character values, with each other, The devil is in the details (considering #5). One of the most common mistakes of R novices is the confusion around the == and = notation. While == represents equal to, = is used to assign a value to an object (for more details on assignments see Chapter 4.4). However, in practice, most R programmers tend to avoid = since it can easily lead to confusion with ==. As such, you can strike this one out of your R vocabulary for now. There are many different logical operations you can perform. Table 5.1 lists the most frequently used logical operators for your reference. These will become important once we select only certain parts of our data for analysis, e.g. only female participants. Table 5.1: Logical Operators in R Operator Description == is equal to &gt;= is bigger or equal to &lt;= is smaller of equal to != is not equal to a | b a or b a &amp; b a and b !a is not a 5.2 Assigning values to objects: ‘&lt;-’ Another common task you will perform is assigning values to an object. An object can be many different things: a dataset, the results of a computation, a plot, a series of numbers, a list of names, a function, etc. In short, an object is an umbrella term for many different things which form part of your data analysis. For example, objects are handy when storing results that you want to process further in later analytical steps. Let’s have a look at an example. # I have a friend called &quot;Fiona&quot; friends &lt;- &quot;Fiona&quot; In this example, I created an object called friends and added \"Fiona\" to it. Remember, because \"Fiona\" represents a string, we need \"\". So, if you wanted to read this line of code, you would say, ‘friends gets the value \"Fiona\".’ Alternatively, you could also say ‘\"Fiona\" is assigned to friends.’ If you look into your environment pane, you will find the object we just created. You can see it carries the value \"Fiona\". We can also print values of an object in the console by simply typing the name of the object friends and hit Return ↵. # Who are my friends? friends ## [1] &quot;Fiona&quot; Sadly, it seems I only have one friend. Luckily we can add some more, not the least to make me feel less lonely. To create objects with multiple values, we can use the function c(), which stands for ‘concatenate.’ The Cambridge Dictionary (2021) define this word as follows: ‘concatenate,’ to put things together as a connected series Let’s concatenate some more friends into our friends object. # Adding some more friends to my life friends &lt;- c(&quot;Fiona&quot;, &quot;Ida&quot;, &quot;Lukas&quot;, &quot;Georg&quot;, &quot;Daniel&quot;, &quot;Pavel&quot;, &quot;Tigger&quot;) # Here are all my friends friends ## [1] &quot;Fiona&quot; &quot;Ida&quot; &quot;Lukas&quot; &quot;Georg&quot; &quot;Daniel&quot; &quot;Pavel&quot; &quot;Tigger&quot; To concatenate values into a single object, we need to use a comma , to separate each value. Otherwise, R will report an error back. friends &lt;- c(&quot;Fiona&quot; &quot;Ida&quot;) ## Error: &lt;text&gt;:1:22: unexpected string constant ## 1: friends &lt;- c(&quot;Fiona&quot; &quot;Ida&quot; ## ^ R’s error messages tend to be very useful and give meaningful clues to what went wrong. In this case, we can see that something ‘unexpected’ happen, and it shows where our mistake is. You can also concatenate numbers, and if you add () around it, you can automatically print the content of the object to the console. Thus, (milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020)) is the same as milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020) followed by milestones_of_my_life. The following examples illustrate this. # Important years in my life milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020) milestones_of_my_life ## [1] 1982 2006 2011 2018 2020 # The same as above, but we don&#39;t need the second line of code (milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020)) ## [1] 1982 2006 2011 2018 2020 Finally, we can also concatenate numbers and character values into one object: (names_and_years &lt;- c(&quot;Fiona&quot;, 1988, &quot;Daniel&quot;, 1982)) ## [1] &quot;Fiona&quot; &quot;1988&quot; &quot;Daniel&quot; &quot;1982&quot; This last example is not necessarily something I would recommend to do, because it likely leads to undesirable outcomes. If you look into your environment pane you currently have three objects: friends, milestones_of_my_life, and names_and_years. The friends object shows that all the values inside the object are classified as chr, which denominates character. In this case, this is correct because it only includes the names of my friends. On the other hand, the object milestones_of_my_life only includes numeric values, and therefore it says num in the environment pane. However, for the object names_and_years we know we want to have numeric and character values included. Still, R recognises them as character values only because values inside objects are meant to be of the same type. Consequently, mixing different types of data (as explained in Chapter @ref()) into one object is likely a bad idea. This is especially true if you want to use the numeric values for computation. In short: ensure your objects are all of the same data type. There is an exception to this rule. ‘Of course,’ you might say. There is one object that can have values of different types: list. As the name indicates, a list object holds several items. These items are usually other objects. In the spirit of ‘Inception,’ you can have lists inside lists, which contain more objects. Let’s create a list called x_files using the list function and place all our objects inside. # This creates our list of objects x_files &lt;- list(friends, milestones_of_my_life, names_and_years) # Let&#39;s have a look what is hidden inside the x_files x_files ## [[1]] ## [1] &quot;Fiona&quot; &quot;Ida&quot; &quot;Lukas&quot; &quot;Georg&quot; &quot;Daniel&quot; &quot;Pavel&quot; &quot;Tigger&quot; ## ## [[2]] ## [1] 1982 2006 2011 2018 2020 ## ## [[3]] ## [1] &quot;Fiona&quot; &quot;1988&quot; &quot;Daniel&quot; &quot;1982&quot; You will notice in this example that I do not use \"\" for each value in the list. This is because friends is not a character I put into the list, but an object. When we refer to objects, we do not need quotation marks. We will encounter list objects quite frequently when we perform our analysis. Some functions return the results in the format of lists. This can be very helpful because otherwise our environment pane will be littered with objects. We would not necessarily know how they relate to each other, or worse, to which analysis they belong. Looking at the list item in the environment page (Figure 5.1), you can see that the object x_files is classified as a List of 3, and if you click on the blue icon, you can inspect the different objects inside. Figure 5.1: The environment pane showing our objects and our list x_files In Chapter 5.1, I mentioned that we should avoid using the = operator and explained that it is used to assign values to objects. You can, if you want, use = instead of &lt;-. They fulfil the same purpose. However, as mentioned before, it is not wise to do so. Here is an example that shows that, in principle, it is possible. # DO (avengers1 &lt;- c(&quot;Iron Man&quot;, &quot;Captain America&quot;, &quot;Black Widow&quot;, &quot;Vision&quot;)) ## [1] &quot;Iron Man&quot; &quot;Captain America&quot; &quot;Black Widow&quot; &quot;Vision&quot; # DON&#39;T (avengers2 = c(&quot;Iron Man&quot;, &quot;Captain America&quot;, &quot;Black Widow&quot;, &quot;Vision&quot;)) ## [1] &quot;Iron Man&quot; &quot;Captain America&quot; &quot;Black Widow&quot; &quot;Vision&quot; On a final note, naming your objects is limited. You cannot chose any name. First, every name needs to start with a letter. Second, you can only use letters, numbers _ and . as valid components of the names for your objects (see also Wickham and Grolemund 2016, Chapter 4.2.). I recommend to establish a naming convention that you adhere to. Personally I prefer to only user lower letters and _ to separate/connect words. You want to keep names informative, succinct and precise. Here are some examples of what I would consider good and bad choices for names. # Good choices income_per_annum open_to_exp # for &#39;openness to new experiences&#39; soc_int # for &#39;social integration&#39; # Bad choices IncomePerAnnum measurement_of_boredom_of_watching_youtube Sleep.per_monthsIn.hours Ultimately, you need to be able to effectively work with your data and output. Ideally, this should be true for others as well who want or need to work with your R project as well, e.g. your co-investigator or supervisor. The same is true for your column names in datasets (see Chapter @ref()) 5.3 Functions I used the term ‘function’ multiple times, but I never thoroughly explained what they are and why we need them. In simple terms, functions are objects. They contain lines of code that someone has written for us or we have written ourselves. One could say they are code snippets ready to use. Someone else might see them as shortcuts for our programming. Functions increase the speed with which we perform our analysis and write our computations and make our code more readable. Consider computing the mean of values stored in the object pocket_money. # First we create an object that stores our desired values pocket_money &lt;- c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89) #1 Manually compute the mean sum &lt;- 0+1+1+2+3+5+8+13+21+34+55+89 sum/12 # There are 12 items in the object ## [1] 19.33333 #2 Use a function to compute the mean mean(pocket_money) ## [1] 19.33333 #3 Let&#39;s make sure #1 and #2 are actually the same sum/12 == mean(pocket_money) ## [1] TRUE If we manually compute the mean, we first calculate the sum of all values in the object pocket_money1. Then we divide it by the number of values in the object, which is 12. This is the traditional way of computing the mean as we know it from primary school. However, by simply using the function mean(), we not only write considerably less code, but it is also much easier to understand as well because the word mean does precisely what we would expect. Which one do you find easier? To further illustrate how functions look like, let’s create one ourselves and call it my_mean. my_mean &lt;- function(numbers){ sum &lt;- sum(numbers) # Compute the sum of all values in &#39;numbers&#39; result &lt;- sum/length(numbers) # Divide the sum by the number of items in &#39;numbers&#39; return(result) # Return the result in the console } my_mean(pocket_money) ## [1] 19.33333 Do not worry if half of this code does not make sense to you. Writing functions is an advanced R skill. However, it is good to know how functions look on the ‘inside.’ You certainly can see the similarities between the code we have written before, but instead of using actual numbers, we work with placeholders like numbers. This way, we can use a function for different data and do not have to rewrite it every time. All functions in R share the same structure. They have a name followed by (). Within these parentheses, we put arguments, which have specific values. For example, a function would look something like this: name_of_function(argument_1 = value_1, argument_2 = value_2, argument_3 = value_3) How many arguments there are and what kind of values you can provide is very much dependent on the function you use. Thus, not every function takes every value. In the case of mean(), the function takes an object which holds a sequence of numeric values. It would make very little sense to compute the mean of our friends object, because it only contains names. R would return an error message: mean(friends) ## Warning in mean.default(friends): argument is not numeric or logical: returning ## NA ## [1] NA NA refers to a value that is ‘not available’. In this case, R tries to compute the mean, but the result is not available, because the values are not numeric but a character. In your dataset, you might find cells that are NA, which means there is data missing. Remember: If a function attempts a computation that includes even just a single value that is NA, R will return NA. However, there is a way to fix this. You will learn more about how to deal with NA values in Chapter @ref(). Sometimes you will also get a message from R that states NaN. NaN stands for ‘not a number’ and is returned when something is not possible to compute, for example: # Example 1 0/0 ## [1] NaN # Example 2 sqrt(-9) ## Warning in sqrt(-9): NaNs produced ## [1] NaN 5.4 R packages R has many built-in functions that we can use right away. However, some of the most interesting ones are developed by different programmers, data scientists and enthusiasts. To add more functions to your repertoire, you can install R packages. R packages are a collection of functions that you can download and use for your own analysis. Throughout this book, you will learn about and use many different R packages to accomplish various tasks. To give you another analogy, R is like a global supermarket, RStudio is like my shopping cart, and R packages are the products I can pick from the shelves. Luckily, R packages are free to use, so I do not have to bring my credit card. For me, these additional functions, developed by some of the most oustanding scientists, is what keeps me addicted to performing my research in R. R packages do not only include functions but often include datasets and documentation of what each function does. This way, you can easily try every function right away, even without your own dataset and read through what each function in the package does. Figure 5.2 Figure 5.2: The R package documentation for ‘ggplot2’ However, how do you find those R packages? They are right at your fingertips. You have two options: Use the function install.packages() Use the packages pane in RStudio (see Chapter 4.4) 5.4.1 Installing packages using install.packages() The simplest and fastest way to install a package is calling the function install.packages(). You can either use it to install a single package or install a series of packages all at once using our trusty c() function. All you need to know is the name of the package. This approach works for all packages that are on CRAN (remember CRAN from Chapter 3.1?). # Install a single package install.packages(&quot;tidyverse&quot;) # Install multiple packages at once install.packages(c(&quot;tidyverse&quot;, &quot;naniar&quot;, &quot;psych&quot;)) If a package is not available from CRAN, chances are you can find them on GitHub. Github is probably the world’s largest global platform for programmers from all walks of life, and many of them develop fantastic R packages that make R programming not just easier but a lot more fun. As you continue to work in R, you should seriously consider creating your own account to keep backups of your R projects (see also Chapter 6.1). # Install the &#39;wesanderson&#39; package from GitHub devtools::install_github(&quot;karthik/wesanderson&quot;) 5.4.2 Installing packages via RStudio’s package pane RStudio offers a very convenient way of installing packages. In the packages pane, you cannot only see your installed packages, but you have two more buttons: Install and Update. The names are very self-explanatory. To install an R package you can follow the following steps: Click on Install. In most cases, you want to make sure you have Repository (CRAN) selected. Type in the name of the package you wish to install. RStudio offers an auto-complete feature to make it even easier to find the package you want. I recommend NOT to change the option which says Install to library. The default library settings will suffice. Finally, I recommend to select Install dependencies, because some packages need other packages to function properly. This way, you do not have to do this manually. The only real downside of using the packages pane is that you cannot install packages hosted on GitHub. However, you can download them from there and install them directly from your computer using this option. This is particularly useful if you do not have an internet connection but you already downloaded the required packages onto a hard drive. 5.4.3 Using R Packages Now that you have a nice collection of R packages, the next step would be to use them. While you only have to install R packages once, you have to ‘activate’ them every time you start an new session in RStudio. This process is also called ‘loading an R package.’ Once an R package is loaded, you can use all its functions. To load an R package, we have to use the function library(). library(tidyverse) ## ── Attaching packages ─────────────────────────────────────── tidyverse 1.3.1 ── ## ✓ ggplot2 3.3.5 ✓ purrr 0.3.4 ## ✓ tibble 3.1.3 ✓ dplyr 1.0.7 ## ✓ tidyr 1.1.3 ✓ stringr 1.4.0 ## ✓ readr 2.0.0 ✓ forcats 0.5.1 ## ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── ## x dplyr::filter() masks stats::filter() ## x dplyr::lag() masks stats::lag() The tidyverse package is a special kind of package. It contains multiple packages and loads them all at once. Almost all included packages (and more) you will use at some point when working through this book. I know what you are thinking. Can you use c() to load all your packages at once? Unfortunately not. However, there is a way to do this, but it goes beyond the scope of this book to fully explain this (if you are curious, you can take a peek here). Besides, it is not always advisable to load all functions of an entire package. One reason could be that two packages contain a function with the same name but with a different purpose. Two functions with the same name create a conflict between these two packages, and one of the functions would not be usable. Another reason could be that you only need to use the function once, and loading the whole package to use only one specific function seems excessive. Instead, you can explicitly call functions from packages without loading the package. For example, we might want to use the vismis() function from the naniar package to show where data is missing in our dataset airquality. Writing the code this way is also much quicker than loading the package and then calling the function if you don’t use it repeatedly. Copy the code and try it yourself. Make sure you have naniar installed (see above). We will work with this package when we explore missing data in Chapter @ref(). # Here I use the dataset &#39;airquality&#39;, which comes with R naniar::vis_miss(airquality) 5.5 Coding etiquette Now you know everything to get started, but before we jump into our first project, I would like to briefly touch upon coding etiquette. This is not something that improves your analytical or coding skills directly, but is essential in building good habbits and making your life and those of others a little easier. Consider writing code like growing plants in your garden. You want to nurture the good plants, remove the weed and add labels that tell you which plant it is that you are growing. At the end of the day, you want your garden to be well-maintained. Treat you programming code the same way. A script (see Chapter @ref()) with code should always have at least the following qualities: Only contains code that is necessary, Is easy to read and understand, Is self-contained. With simple code this is easily achieved. However, what about more complex and longer code representing a whole set of analytical steps? # Very messy code library(tidyverse) library(jtools) model1 &lt;- lm(covid_cases_per_1m ~ idv, data = df) summ(model1, scale = TRUE, transform.response = TRUE, vifs = TRUE) df %&gt;% ggplot(aes(covid_cases_per_1m, idv, colour = europe, label = country))+ theme_minimal()+ geom_label(nudge_y = 2) + geom_point() mod_model2 &lt;- lm(cases_per_1m ~ idv + uai + idv*europe + uai*europe, data = df) summ(mod_model2, scale = TRUE, transform.response = TRUE, vifs = TRUE) anova(mod_model1, mod_model2) How about the following in comparison? # Nicely structured code # Load required R packages library(tidyverse) library(jtools) # ---- Modelling COVID-19 cases ---- ## Specify and run a regression model1 &lt;- lm(covid_cases_per_1m ~ idv, data = df) ## Retrieve the summary statistics of model1 summ(model1, scale = TRUE, transform.response = TRUE, vifs = TRUE) # Does is matter whether a country lies in Europe? ## Visualise rel. of covid cases, idv and being a European country df %&gt;% ggplot(aes(covid_cases_per_1m, idv, colour = europe, label = country))+ theme_minimal()+ geom_label(nudge_y = 2) + geom_point() ## Specify and run a revised regression mod_model2 &lt;- lm(cases_per_1m ~ idv + uai + idv*europe + uai*europe, data = df) ## Retrieve the summary statistics of model2 summ(mod_model2, scale = TRUE, transform.response = TRUE, vifs = TRUE) ## Test whether model2 is an improvement over model1 anova(mod_model1, mod_model2) I hope we can agree that the second example is much easier to read and understand even though you probably do not understand most of it yet. For once, I separated the different analytical steps from each other like paragraphs in a report. Apart from that, I added comments with # to provide more context to my code for someone else who wants to understand my analysis. Admittedly, this example is a little excessive. Usually, you might have fewer comments. Commenting is an integral part of programming because it allows you to remember what you did. Ideally, you want to strike a good balance between commenting on and writing code. How many comments you need will likely change throughout your R programming journey. Think of comments as headers for your programming script. We can use # not only to write comments but also to tell R not to run particular code. This is very helpful if you want to keep some code but do not want to use it yet. There is also a handy keyboard shortcut you can use to ‘deactivate’ multiple lines of code at once. Select whatever you want to ‘comment out’ in your script and press Ctrl+Shift+C (PC) or Cmd+Shift+C (Mac). # mean(pocket_money) # R will not run this code mean(pocket_money) # R will run this code 5.6 Exercises What is the result of \\(\\sqrt[2]{25-16}+2*8-6\\)? What does the console return if you execute the following code \"Five\" == 5? Create a list called books and include the following book titles in it: “Harry Potter and the Deathly Hallows,” “The Alchemist,” “The Davinci Code,” “R For Dummies” Check you answers: 7.1 References "]]
