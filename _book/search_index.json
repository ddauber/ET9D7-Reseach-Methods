[["index.html", "R for Non-Programmers: A Guide for Social Scientists Welcome üëã", " R for Non-Programmers: A Guide for Social Scientists Daniel Dauber 2021-08-31 Welcome üëã Welcome to R for Non-Programmers: A guide for Social Scientists. This book is intended to be of help to everyone who wishes to enter the world of R Programming, but not necessarily for the purpose to become a programmer. Instead, this book intends to convey key concepts in data analysis, especially quantitative research. [Add more] "],["acknowledgments.html", "Acknowledgments üôè", " Acknowledgments üôè Special thanks are due to my wife, who supported me in so many ways to get this book completed. Also, I would like to thank my son, who patiently watched me sitting at the computer type this book up. "],["readme-before-you-get-started.html", "1 Readme. Before you get started 1.1 A starting point and reference book 1.2 Download the companion R package 1.3 A ‚Äòtidyverse‚Äô approach with some basic R", " 1 Readme. Before you get started 1.1 A starting point and reference book to be added 1.2 Download the companion R package to be added Explain where to download Explain how examples are shown in this book (code in the first grey box, console results in the second grey box 1.3 A ‚Äòtidyverse‚Äô approach with some basic R to be added "],["why-learn-a-programming-language-as-a-non-programmer.html", "2 Why learn a programming language as a non-programmer? 2.1 Learning new tools to analyse your data is always essential 2.2 Programming languages enhance your conceptual thinking 2.3 Programming languages allow you to look at your data from a different angle 2.4 Learning any programming language will help you learn other programming languages.", " 2 Why learn a programming language as a non-programmer? ‚ÄòR‚Äô, it is not just a letter you learn in primary school, but a powerful programming language. While it is used for a lot of quantitative data analysis, it has grown over the years to become a powerful tool that excels (#no-pun-intended) in handling data and performing customised computations with quantitative and qualitative data. R¬†is now one of my core tools to perform various types of analysis because I can use it in many different ways, for example, statistical analysis, corpus analysis, development of online dashboards to dynamically generate interactive data visualisations, connection to social media APIs for data collection, Creation of reporting systems to provide individualised feedback to research participants, Drafting and writing research articles, etc. Learning R is like learning a foreign language. If you like learning languages, then ‚ÄòR‚Äô is just another one. While R has become a comprehensive tool for data scientists, it has yet to find its way into the mainstream field of Social Sciences. Why? Well, learning programming languages is not necessarily something that feels comfortable to everyone. It is not like Microsoft Word, where you can open the software and explore it through trial and error. Learning a programming language is like learning a foreign language: You have to learn vocabulary, grammar and syntax. Similar to learning a new language, programming languages also have steep learning curves and require quite some commitment. For this reason, most people do not even dare to learn it because it is time-consuming and often not considered a ‚Äòcore method‚Äô in Social Sciences disciplines. Apart from that, tools like SPSS have very intuitive interfaces, which seem much easier to use (or not?). However, the feeling of having ‚Äòmastered‚Äô R (although one might never be able to claim this) can be extremely rewarding. I guess this introduction was not necessarily helpful in convincing you to learn any programming language. However, despite those initial hurdles, there are a series of advantages to consider. Below I list some good reasons to learn a programming language as they pertain to my own experiences. 2.1 Learning new tools to analyse your data is always essential Theories change over time, and new insights into certain social phenomena are published every day. Thus, your knowledge might get outdated quite quickly. This is not so much the case for research methods knowledge. Typically, analytical techniques remain over many years. We still use the mean, mode, quartiles, standard deviation, etc., to describe our quantitative data. Still, there are always new computational methods that help us to crunch the numbers even more. R is a tool that allows you to venture into new analytical territory because it is open source. Thousands of developers provide cutting-edge research methods free of charge for you to try with your data. You can find them on platforms like GitHub. R is like a giant supermarket, where all products are available for free. However, to read the labels on the product packaging and understand what they are, you have to learn the language used in this supermarket. 2.2 Programming languages enhance your conceptual thinking While I have no empirical evidence for this, I am very certain it is true. While I would argue that my conceptual thinking is quite good, I would not necessarily say that I was born with it. Programming languages are very logical. Any error in your code will make you fail to execute it properly. Sometimes you face challenges in creating the correct code to solve a problem. Through creative abstract thinking (I should copyright this term), you start to approach your problems differently, whether it is a coding problem or a problem in any other context. For example, I know many students enjoy the process of qualitative coding. However, they often struggle to detach their insights from the actual data and synthesise ideas on an abstract and more generic level. Qualitative researchers might refer to this as challenges in ‚Äôsecond-order deconstruction of meaning‚Äô. This process of abstraction is a skill that needs to be honed, nurtured and practised. From my experience, programming languages are one way to achieve this, but they might not be recognised for this just yet. 2.3 Programming languages allow you to look at your data from a different angle There are certainly commonly known and well-established techniques regarding how you should analyse your data rigorously. However, it can be quite some fun to try techniques outside your disciplines. This does not only apply to programming languages, of course. Sometimes, learning about a new research method enables you to look at your current tools in very different ways too. One of the biggest challenges for any researcher is to reflect on your work. Learning new and maybe even ‚Äòstrange‚Äô tools can help with this. Admittedly, sometimes you might find out that some new tools are also a dead-end. Still, you might have learned something valuable through the process of engaging with your data differently. So shake off the rust of your analytical routine and blow some fresh air into your research methods. 2.4 Learning any programming language will help you learn other programming languages. Once you understand the logic of one language, you will find it relatively easy to understand new programming languages. Of course, if you wanted to, you could become the next ‚ÄôNeo‚Äô (from ‚ÄòThe Matrix‚Äô) and change the reality of your research forever. On a more serious note, though, if you know any programming language already, learning R will be easier because you have accrued some basic understanding of these particular types of languages. Having considered everything of the above, do you feel ready for your next foreign language? "],["setting-up-r-and-rstudio.html", "3 Setting up R and RStudio 3.1 Installing R 3.2 Installing RStudio 3.3 When you first start RStudio 3.4 Updating R and RStudio: Living at the pulse of innovation 3.5 RStudio Cloud", " 3 Setting up R and RStudio Every journey starts with gathering the right equipment. This intellectual journey is not much different. The first step that every ‚ÄôR novice has to face is to set everything up to get started. There are essentially two strategies: Install Rand RStudio or Run RStudio in a browser via RStudio Cloud While installing¬†R¬†and Studio requires more time and effort, I strongly recommend it, especially if you want to work offline or make good use of your computer‚Äôs CPU. However, if you are not sure yet whether you enjoy learning¬†R, you might wish to look at RStudio Cloud first. Either way, you can follow the examples of this book no matter which choice you make. 3.1 Installing R The core module of our programming is R itself, and since it is an open-source project, it is available for free on Windows, Mac and Linux computers. Here is what you need to do to install it properly on your computer of choice: Go to www.r-project.org Click on CRAN where it says download. Choose a server in your country (all of them work, but downloads will perform quicker). Select the operating system for your computer. Select the version you want to install (I recommend the latest version) Open the downloaded file and follow the installation instructions. (I recommend leaving the suggested settings as they are). This was relatively easy. You now have R installed. Technically you can start using R for your research, but there is one more tool I strongly advise installing: RStudio. 3.2 Installing RStudio R by itself is just the *‚Äòbeating heart‚Äô* of R programming, but it has no particular user interface. If you want buttons to click and actually ‚Äòsee‚Äô what you are doing, there is no better way than RStudio. RStudio is an integrated development environment (IDE) and will be our primary tool to interact with R. It is the only software you need to do all the fun parts and, of course, to follow along with the examples of this book. To install RStudio perform the following steps: Go to www.rstudio.com. Go to Products &gt; RStudio On this page, scroll down and select RStudio Desktop Select the 'Open Source Edition' option by clicking on ‚ÄôDownload RStudio Desktop' As a last step, scroll down where it shows you a download button for your operating system. The website will automatically detect this. You also get a nice reminder to install ‚ÄòR‚Äô first, in case you have not done so yet. Open the downloaded file and follow the installation instructions (again, keep it to the default settings as much as possible) Congratulations, you are all set up to learn R. From now on you only need to start RStudio and not R. Of course, if you are the curious, nothing shall stop you to try R without RStudio. 3.3 When you first start RStudio Before you start programming away, you might want to make some tweaks to your settings right away to have a better experience (in my humble opinion). I recommend at least the following two changes by clicking on RStudio &gt; Preferences or press ‚åò/Ctrl + ,. In the Code &gt; Editing tab, make sure to have at least the first five options ticked, especially the Auto-indent code after paste. This setting will save time when trying to format your coding appropriately, making it easier to read. Indentation is the primary way of making your code look more readable and less like a series of characters that appear almost random. In the Display tab, you might want to have the first three options selected. In particular, Highlight selected line is helpful because, in more complicated code, it is helpful to see where your cursor is. Of course, if you wish to customise your workspace further, you can do so. The visually most impactful way to alter the default appearance of RStudio is to select Appearance and pick a completely different colour theme. Feel free to browse through various options and see what you prefer. There is no right or wrong here. 3.4 Updating R and RStudio: Living at the pulse of innovation While not strictly something that helps you become a better programmer, this advice might come in handy to avoid turning into a frustrated programmer. When you update your software, you need to update R and RStudio separately from each other. While both R and RStudio work closely with each other, they still constitute separate pieces of software. Thus, it is essential to keep in mind that updating RStudio will not automatically update R. This can become problematic if specific packages you installed via RStudio (like a fancy learning algorithm) might not be compatible with earlier versions of R. Also, additional R packages developed by other people are separate pieces and are updated too, independently from R and RStudio. I know what you are thinking: This already sounds complicated and cumbersome. However, rest assured, we take a look at how you can easily update all your packages with RStudio. Thus, all you need to remember is:¬†R¬†needs to be updated separately from everything else. 3.5 RStudio Cloud to be completed "],["the-rstudio-interface.html", "4 The RStudio Interface 4.1 The Console window 4.2 The Source window 4.3 The Environment / History / Connections / Tutorial window 4.4 The Files / Plots / Packages / Help / Viewer window 4.5 Customise your user interface", " 4 The RStudio Interface The RStudio interface is composed of quadrants, each of which fulfils a unique purpose: The Console window, The Source window, The Environment / History / Connections / Tutorial window, and The Files / Plots / Packages / Help / Viewer window You might only see three windows and wonder where the Source window has gone in your version of RStudio. In order to use it you have to either open a file or create a new one. You can create a new file by selecting File &gt; New File &gt; R Script in the menu bar, or use the keyboard shortcut Ctrl+Shift+N on PC and Cmd+Shift+N on Mac. I will briefly explain the purpose of each window/pane and how they are relevant to your work in R. 4.1 The Console window The console is located in the bottom-left, and it is where you often will find the output of your coding and computations. It is also possible to write code directly into the console. Let‚Äôs try the following example by calculating the sum of 10 + 5. Click into the console with your mouse, type the calculation into your console and hit Enter/Return ‚Üµ on your keyboard. The result should be pretty obvious: # We type the below into the console üëá 10+5 ## [1] 15 Here is a screenshot of how it should look like at your end in RStudio: You just successfully performed your first successful computation. I know, this is not quite impressive just yet. R is undoubtedly more than just a giant calculator. In the top right of the console, you find a symbol that looks like a broom. This one is quite an important one because it clears your console. Sometimes the console can become very cluttered and difficult to read. If you want to remove whatever you computed, you can click the broom icon and clear the console of all text. I use it so frequently that I strongly recommend learning the keyboard shortcut, which is Ctrl+L on PC and Mac. 4.2 The Source window In the top left, you can find the source window. The term ‚Äòsource‚Äô can be understood as any type of file, e.g.¬†data, programming code, notes, etc. The source panel can fulfil many functions, such as: Inspect data in an Excel-like format (LINK TO RELEVANT CHAPTER) Open programming code, e.g.¬†an R Script (LINK TO RELEVANT CHAPTER) Open other text-based file formats, e.g. Plain text (.txt), Markdown (.md), Websites (.html), LaTeX (.tex), BibTex (.bib), Edit scripts with code in it, Run the analysis you have written. In other words, the source window will show you whatever file you are interested in, as long as RStudio can read it - and no, Microsoft Office Documents are not supported. Another limitation of the source window is that it can only show text-based files. So opening images, etc. would not work. 4.3 The Environment / History / Connections / Tutorial window The window in the top right shows multiples panes. The first pane is called Environment and shows you objects which are available for computation. One of the first objects you will create is your dataset because, without data, we cannot perform any analysis. Thus, one object might be your data. Another object could be a plot showing the number of male and female participants in your study. To find out how to create objects yourself, you can take a glimpse at (INSERT CHAPTER X). Besides datasets and plots, you will also find other objects here, e.g.¬†lists, vectors and functions you created yourself. Don‚Äôt worry if none of these words makes sense at this point. We will cover each of them in the upcoming chapters. For now, remember this is a place where you can find different objects you created. The History pane is very easy to understand. Whatever computation you run in the Console will be stored. So you can go back and see what you coded and rerun that code. Remember the example from above where we computed the sum of 10+5? This computation is stored in the history of RStudio, and you can rerun it by clicking on 10+5 in the history pane and then click on To Console. This will insert 10+5 back into the Console, and we can hit Return ‚Üµ to retrieve the result. You also have the option to copy the code into an existing or new R Script by clicking on To Source. By doing this, you can save this computation on your computer and reuse it later. Finally, if you would like to store your history, you can do so by clicking on the floppy disk symbol. There are two more buttons in this pane, one allows you to delete individual entries in the history, and the last one, a broom, clears the entire history (irrevocably). The pane Connections allows you to tab into external databases directly. This can come in handy when you work collaboratively on the same data or want to work with extensive datasets without having to download them. However, for an introduction to R, we will not use this feature of RStudio for now. The last pane is called Tutorial. Here you can find additional materials to learn R and RStudio. If you search for more great content to learn R, this serves as a great starting point. 4.4 The Files / Plots / Packages / Help / Viewer window The last window consists of five essential panes. The first one is the Files pane. As the name indicates, it lists all the files and folders in your root directory. A root directory is the default directory where RStudio saves your files, for example, your analysis. However, you can easily change this directory to something else (see also CHAPTER X) or use R Project files (see CHAPTER X) to carry out your research. Thus, the Files pane is an easy way to load data into RStudio and create folders to keep your research project well organised. Since the Console cannot reproduce data visualisations, RStudio offers a way to do this very easily. It is through the Plots pane. This pane is exclusively designed to show you any plots you have created using R. Here is a simple example that you can try. Type into your console boxplot(mtcars$hp). # Here we create a nice boxplot using a dataset called &#39;mtcars&#39; boxplot(mtcars$hp) Although this is a short piece of coding, it performs quite a lot of steps: it uses a function called boxplot() to draw a boxplot of a variable called hp (for horsepower), which is located in a dataset named mtcars, and it renders the graph in your Plots pane This is how the plot should look like in your RStudio Plots pane. If you wish to delete the plot, you can click on the red circle with a white x symbol. This will delete the currently visible plot. If you wish to remove all plots from this pane, you can use the broom. There is also an option to export your plot and move back and forth between different plots. Do not worry about the coding at this point. It will all make sense in the following chapters. The next pane is called Packages. Packages are additional tools you can import and use when performing your analysis. A frequent analogy people use to explain packages is your phone and the apps you install. Each package you download is equivalent to an app on your phone. It can enhance different aspects of working in R, such as creating animated plots, using unique machine learning algorithms, or simply making your life easier by doing multiple computations with just one single line of code. You will learn more about R packages in Chapter 5.4. If you are in dire need of help, RStudio provides you with a Help pane. You can search for specific topics, for example how certain computations work. The Help pane also has documentation on different datasets that are included in R, RStudio or R packages you have installed. If you want a more comprehensive overview of how you can find help, have a look at CRAN‚Äôs ‚ÄòGetting Help with R‚Äô webpage. So, for example, if you want to know what the mtcars dataset is, you can either use the search window in the Help pane or, much easier, use a ? in the console to search for it: # Type a &#39;?&#39; and immediately add the name to bring up helpful information. ?mtcars This will open the Help pane and give you more information about this dataset: There are many different ways of how you can find help with your coding beyond RStudio and this book. My top three platforms to find solutions to my programming problems are: Google stackoverflow.com Twitter (with #RStats) Lastly, we have the Viewer pane. Not every data visualisation we create in R is a static image. You can create dynamic data visualisations or even websites with R. This type of content is displayed in the Viewer pane rather than in the Plots pane. Often these visualisations are based on HTML and other web-based programming languages. As such, it is easy to open them in your browser as well. However, in this book, we mainly focus on two-dimensional static plots, which are the ones you likely need most of the time, either for your assignments, thesis, or publication. 4.5 Customise your user interface As a last remark in this chapter, I would like to make you aware that you can modify each window. There are three basic adjustments you can make: Hide panes by clicking on the window symbol in the top right corner of each window, Resize panes by dragging the border of a window horizontally or vertically, or Add and remove panes by going to RStudio &gt; Preferences &gt; Pane Layout, or use the keyboard shortcut ‚åò + , if you are on a Mac. There is, unfortunately no default shortcut for PC users. If you want a fully customised experience you can also alter the colour scheme of the RStudio itself (RStudio &gt; Preferences &gt; Appearance) and if the themes offered are not enough for you, you can create a custom theme here "],["r-basics-the-very-fundamentals.html", "5 R Basics: The very fundamentals 5.1 Basic computations in R 5.2 Assigning values to objects: ‚Äò&lt;-‚Äô 5.3 Functions 5.4 R packages 5.5 Coding etiquette 5.6 Exercises", " 5 R Basics: The very fundamentals After a likely tedious installation of R and RStudio, as well as a somewhat detailed introduction to the RStudio interface, you are finally ready to ‚Äòdo‚Äô things. By ‚Äòdoing,‚Äô I mean coding. The term ‚Äòcoding‚Äô in itself can instil fear in some of you, but you only need one skill to do it: Writing. As mentioned earlier, learning coding or programming means learning a new language. However, once you have the basic grammar down, you already can communicate quite a bit. In this section, we will explore the fundamentals of R. These build the foundation for everything that follows. After that, we dive right into some analysis. 5.1 Basic computations in R The most basic computation you can do in R is arithmetic operations. In other words, addition, subtraction, multiplication, division, exponentiation and extraction of roots. In other words, R can be used like your pocket calculator, or more likely the one you have on your phone. For example, in Chapter 4.1 we already performed an addition. Thus, it might not come as a surprise how their equivalents work in R. Let‚Äôs take a look at the following examples: # Addition 10 + 5 ## [1] 15 # Subtraction 10 - 5 ## [1] 5 # Multiplication 10 * 5 ## [1] 50 # Division 10 / 5 ## [1] 2 # Exponentiation 10 ^ 2 ## [1] 100 # Square root sqrt(10) ## [1] 3.162278 They all look fairly straightforward except for the extraction of roots. As you probably know, extracting the root would typically mean we use the symbol \\(\\sqrt{}\\) on your calculator. To compute the square root in R, we have to use a function instead to perform the computation. So we first put the name of the function sqrt and then the value 10 within parenthesis (). This results in the following code: sqrt(10). If we were to write this down in our report, we would write \\(\\sqrt[2]{10}\\). Functions are an essential part of R and programming in general. You will learn more about them in this chapter.Besides arithmetic operations, there are also logical queries you can perform. Logical queries always return either the value TRUE or FALSE. Here are some examples which make this clearer: #1 Is it TRUE or FALSE? 1 == 1 ## [1] TRUE #2 Is 45 bigger than 55? 45 &gt; 55 ## [1] FALSE #3 Is 1982 bigger or equal to 1982? 1982 &gt;= 1982 ## [1] TRUE #4 Are these two words NOT the same? &quot;Friends&quot; != &quot;friends&quot; ## [1] TRUE #5 Are these sentences the same? &quot;I love statistics&quot; == &quot;I love statist√≠cs&quot; ## [1] FALSE Reflecting on these examples, you might notice three important things: I used == instead of =, I can compare non-numerical values, i.e.¬†text, which is also known as character values, with each other, The devil is in the details (considering #5). One of the most common mistakes of R novices is the confusion around the == and = notation. While == represents equal to, = is used to assign a value to an object (for more details on assignments see Chapter 4.4). However, in practice, most R programmers tend to avoid = since it can easily lead to confusion with ==. As such, you can strike this one out of your R vocabulary for now. There are many different logical operations you can perform. Table 5.1 lists the most frequently used logical operators for your reference. These will become important once we select only certain parts of our data for analysis, e.g.¬†only female participants. Table 5.1: Logical Operators in R Operator Description == is equal to &gt;= is bigger or equal to &lt;= is smaller of equal to != is not equal to a | b a or b a &amp; b a and b !a is not a 5.2 Assigning values to objects: ‚Äò&lt;-‚Äô Another common task you will perform is assigning values to an object. An object can be many different things: a dataset, the results of a computation, a plot, a series of numbers, a list of names, a function, etc. In short, an object is an umbrella term for many different things which form part of your data analysis. For example, objects are handy when storing results that you want to process further in later analytical steps. Let‚Äôs have a look at an example. # I have a friend called &quot;Fiona&quot; friends &lt;- &quot;Fiona&quot; In this example, I created an object called friends and added \"Fiona\" to it. Remember, because \"Fiona\" represents a string, we need \"\". So, if you wanted to read this line of code, you would say, ‚Äòfriends gets the value \"Fiona\".‚Äô Alternatively, you could also say ‚Äò\"Fiona\" is assigned to friends.‚Äô If you look into your environment pane, you will find the object we just created. You can see it carries the value \"Fiona\". We can also print values of an object in the console by simply typing the name of the object friends and hit Return ‚Üµ. # Who are my friends? friends ## [1] &quot;Fiona&quot; Sadly, it seems I only have one friend. Luckily we can add some more, not the least to make me feel less lonely. To create objects with multiple values, we can use the function c(), which stands for ‚Äòconcatenate.‚Äô The Cambridge Dictionary (2021) define this word as follows: ‚Äòconcatenate,‚Äô to put things together as a connected series Let‚Äôs concatenate some more friends into our friends object. # Adding some more friends to my life friends &lt;- c(&quot;Fiona&quot;, &quot;Ida&quot;, &quot;Lukas&quot;, &quot;Georg&quot;, &quot;Daniel&quot;, &quot;Pavel&quot;, &quot;Tigger&quot;) # Here are all my friends friends ## [1] &quot;Fiona&quot; &quot;Ida&quot; &quot;Lukas&quot; &quot;Georg&quot; &quot;Daniel&quot; &quot;Pavel&quot; &quot;Tigger&quot; To concatenate values into a single object, we need to use a comma , to separate each value. Otherwise, R will report an error back. friends &lt;- c(&quot;Fiona&quot; &quot;Ida&quot;) ## Error: &lt;text&gt;:1:22: unexpected string constant ## 1: friends &lt;- c(&quot;Fiona&quot; &quot;Ida&quot; ## ^ R‚Äôs error messages tend to be very useful and give meaningful clues to what went wrong. In this case, we can see that something ‚Äòunexpected‚Äô happen, and it shows where our mistake is. You can also concatenate numbers, and if you add () around it, you can automatically print the content of the object to the console. Thus, (milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020)) is the same as milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020) followed by milestones_of_my_life. The following examples illustrate this. # Important years in my life milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020) milestones_of_my_life ## [1] 1982 2006 2011 2018 2020 # The same as above, but we don&#39;t need the second line of code (milestones_of_my_life &lt;- c(1982, 2006, 2011, 2018, 2020)) ## [1] 1982 2006 2011 2018 2020 Finally, we can also concatenate numbers and character values into one object: (names_and_years &lt;- c(&quot;Fiona&quot;, 1988, &quot;Daniel&quot;, 1982)) ## [1] &quot;Fiona&quot; &quot;1988&quot; &quot;Daniel&quot; &quot;1982&quot; This last example is not necessarily something I would recommend to do, because it likely leads to undesirable outcomes. If you look into your environment pane you currently have three objects: friends, milestones_of_my_life, and names_and_years. The friends object shows that all the values inside the object are classified as chr, which denominates character. In this case, this is correct because it only includes the names of my friends. On the other hand, the object milestones_of_my_life only includes numeric values, and therefore it says num in the environment pane. However, for the object names_and_years we know we want to have numeric and character values included. Still, R recognises them as character values only because values inside objects are meant to be of the same type. Consequently, mixing different types of data (as explained in Chapter @ref()) into one object is likely a bad idea. This is especially true if you want to use the numeric values for computation. In short: ensure your objects are all of the same data type. There is an exception to this rule. ‚ÄòOf course,‚Äô you might say. There is one object that can have values of different types: list. As the name indicates, a list object holds several items. These items are usually other objects. In the spirit of ‚ÄòInception,‚Äô you can have lists inside lists, which contain more objects. Let‚Äôs create a list called x_files using the list function and place all our objects inside. # This creates our list of objects x_files &lt;- list(friends, milestones_of_my_life, names_and_years) # Let&#39;s have a look what is hidden inside the x_files x_files ## [[1]] ## [1] &quot;Fiona&quot; &quot;Ida&quot; &quot;Lukas&quot; &quot;Georg&quot; &quot;Daniel&quot; &quot;Pavel&quot; &quot;Tigger&quot; ## ## [[2]] ## [1] 1982 2006 2011 2018 2020 ## ## [[3]] ## [1] &quot;Fiona&quot; &quot;1988&quot; &quot;Daniel&quot; &quot;1982&quot; You will notice in this example that I do not use \"\" for each value in the list. This is because friends is not a character I put into the list, but an object. When we refer to objects, we do not need quotation marks. We will encounter list objects quite frequently when we perform our analysis. Some functions return the results in the format of lists. This can be very helpful because otherwise our environment pane will be littered with objects. We would not necessarily know how they relate to each other, or worse, to which analysis they belong. Looking at the list item in the environment page (Figure 5.1), you can see that the object x_files is classified as a List of 3, and if you click on the blue icon, you can inspect the different objects inside. Figure 5.1: The environment pane showing our objects and our list x_files In Chapter 5.1, I mentioned that we should avoid using the = operator and explained that it is used to assign values to objects. You can, if you want, use = instead of &lt;-. They fulfil the same purpose. However, as mentioned before, it is not wise to do so. Here is an example that shows that, in principle, it is possible. # DO (avengers1 &lt;- c(&quot;Iron Man&quot;, &quot;Captain America&quot;, &quot;Black Widow&quot;, &quot;Vision&quot;)) ## [1] &quot;Iron Man&quot; &quot;Captain America&quot; &quot;Black Widow&quot; &quot;Vision&quot; # DON&#39;T (avengers2 = c(&quot;Iron Man&quot;, &quot;Captain America&quot;, &quot;Black Widow&quot;, &quot;Vision&quot;)) ## [1] &quot;Iron Man&quot; &quot;Captain America&quot; &quot;Black Widow&quot; &quot;Vision&quot; On a final note, naming your objects is limited. You cannot chose any name. First, every name needs to start with a letter. Second, you can only use letters, numbers _ and . as valid components of the names for your objects (see also Wickham and Grolemund 2016, Chapter 4.2.). I recommend to establish a naming convention that you adhere to. Personally I prefer to only user lower letters and _ to separate/connect words. You want to keep names informative, succinct and precise. Here are some examples of what some might consider good and bad choices for names. # Good choices income_per_annum open_to_exp # for &#39;openness to new experiences&#39; soc_int # for &#39;social integration&#39; # Bad choices IncomePerAnnum measurement_of_boredom_of_watching_youtube Sleep.per_monthsIn.hours Ultimately, you need to be able to effectively work with your data and output. Ideally, this should be true for others as well who want or need to work with your R project as well, e.g.¬†your co-investigator or supervisor. The same is true for your column names in datasets (see Chapter @ref()). Some more information about coding style (i.e.¬†the style of writing coding) can be found in Chapter 5.5. 5.3 Functions I used the term ‚Äòfunction‚Äô multiple times, but I never thoroughly explained what they are and why we need them. In simple terms, functions are objects. They contain lines of code that someone has written for us or we have written ourselves. One could say they are code snippets ready to use. Someone else might see them as shortcuts for our programming. Functions increase the speed with which we perform our analysis and write our computations and make our code more readable. Consider computing the mean of values stored in the object pocket_money. # First we create an object that stores our desired values pocket_money &lt;- c(0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89) #1 Manually compute the mean sum &lt;- 0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 + 55 + 89 sum / 12 # There are 12 items in the object ## [1] 19.33333 #2 Use a function to compute the mean mean(pocket_money) ## [1] 19.33333 #3 Let&#39;s make sure #1 and #2 are actually the same sum / 12 == mean(pocket_money) ## [1] TRUE If we manually compute the mean, we first calculate the sum of all values in the object pocket_money1. Then we divide it by the number of values in the object, which is 12. This is the traditional way of computing the mean as we know it from primary school. However, by simply using the function mean(), we not only write considerably less code, but it is also much easier to understand as well because the word mean does precisely what we would expect. Which one do you find easier? To further illustrate how functions look like, let‚Äôs create one ourselves and call it my_mean. my_mean &lt;- function(numbers){ sum &lt;- sum(numbers) # Compute the sum of all values in &#39;numbers&#39; result &lt;- sum/length(numbers) # Divide the sum by the number of items in &#39;numbers&#39; return(result) # Return the result in the console } my_mean(pocket_money) ## [1] 19.33333 Do not worry if half of this code does not make sense to you. Writing functions is an advanced R skill. However, it is good to know how functions look on the ‚Äòinside.‚Äô You certainly can see the similarities between the code we have written before, but instead of using actual numbers, we work with placeholders like numbers. This way, we can use a function for different data and do not have to rewrite it every time. All functions in R share the same structure. They have a name followed by (). Within these parentheses, we put arguments, which have specific values. For example, a function would look something like this: name_of_function(argument_1 = value_1, argument_2 = value_2, argument_3 = value_3) How many arguments there are and what kind of values you can provide is very much dependent on the function you use. Thus, not every function takes every value. In the case of mean(), the function takes an object which holds a sequence of numeric values. It would make very little sense to compute the mean of our friends object, because it only contains names. R would return an error message: mean(friends) ## Warning in mean.default(friends): argument is not numeric or logical: returning ## NA ## [1] NA NA refers to a value that is ‚Äònot available‚Äô. In this case, R tries to compute the mean, but the result is not available, because the values are not numeric but a character. In your dataset, you might find cells that are NA, which means there is data missing. Remember: If a function attempts a computation that includes even just a single value that is NA, R will return NA. However, there is a way to fix this. You will learn more about how to deal with NA values in Chapter @ref(). Sometimes you will also get a message from R that states NaN. NaN stands for ‚Äònot a number‚Äô and is returned when something is not possible to compute, for example: # Example 1 0/0 ## [1] NaN # Example 2 sqrt(-9) ## Warning in sqrt(-9): NaNs produced ## [1] NaN 5.4 R packages R has many built-in functions that we can use right away. However, some of the most interesting ones are developed by different programmers, data scientists and enthusiasts. To add more functions to your repertoire, you can install R packages. R packages are a collection of functions that you can download and use for your own analysis. Throughout this book, you will learn about and use many different R packages to accomplish various tasks. To give you another analogy, R is like a global supermarket, RStudio is like my shopping cart, and R packages are the products I can pick from the shelves. Luckily, R packages are free to use, so I do not have to bring my credit card. For me, these additional functions, developed by some of the most outstanding scientists, is what keeps me addicted to performing my research in R. R packages do not only include functions but often include datasets and documentation of what each function does. This way, you can easily try every function right away, even without your own dataset and read through what each function in the package does. Figure 5.2 Figure 5.2: The R package documentation for ‚Äòggplot2‚Äô However, how do you find those R packages? They are right at your fingertips. You have two options: Use the function install.packages() Use the packages pane in RStudio (see Chapter 4.4) 5.4.1 Installing packages using install.packages() The simplest and fastest way to install a package is calling the function install.packages(). You can either use it to install a single package or install a series of packages all at once using our trusty c() function. All you need to know is the name of the package. This approach works for all packages that are on CRAN (remember CRAN from Chapter 3.1?). # Install a single package install.packages(&quot;tidyverse&quot;) # Install multiple packages at once install.packages(c(&quot;tidyverse&quot;, &quot;naniar&quot;, &quot;psych&quot;)) If a package is not available from CRAN, chances are you can find them on GitHub. GitHub is probably the world‚Äôs largest global platform for programmers from all walks of life, and many of them develop fantastic R packages that make R programming not just easier but a lot more fun. As you continue to work in R, you should seriously consider creating your own account to keep backups of your R projects (see also Chapter 14.1). An essential companion for this book is r4np, which contains all datasets for this book and some useful functions to get you up and running in no time. # Install the &#39;r4np&#39; pacakge from GitHub devtools::install_github(&quot;ddauber/r4np&quot;) 5.4.2 Installing packages via RStudio‚Äôs package pane RStudio offers a very convenient way of installing packages. In the packages pane, you cannot only see your installed packages, but you have two more buttons: Install and Update. The names are very self-explanatory. To install an R package you can follow the following steps: Click on Install. In most cases, you want to make sure you have Repository (CRAN) selected. Type in the name of the package you wish to install. RStudio offers an auto-complete feature to make it even easier to find the package you want. I recommend NOT to change the option which says Install to library. The default library settings will suffice. Finally, I recommend to select Install dependencies, because some packages need other packages to function properly. This way, you do not have to do this manually. The only real downside of using the packages pane is that you cannot install packages hosted on GitHub only. However, you can download them from there and install them directly from your computer using this option. This is particularly useful if you do not have an internet connection but you already downloaded the required packages onto a hard drive. 5.4.3 Using R Packages Now that you have a nice collection of R packages, the next step would be to use them. While you only have to install R packages once, you have to ‚Äòactivate‚Äô them every time you start an new session in RStudio. This process is also called ‚Äòloading an R package.‚Äô Once an R package is loaded, you can use all its functions. To load an R package, we have to use the function library(). library(tidyverse) The tidyverse package is a special kind of package. It contains multiple packages and loads them all at once. Almost all included packages (and more) you will use at some point when working through this book. I know what you are thinking. Can you use c() to load all your packages at once? Unfortunately not. However, there is a way to do this, but it goes beyond the scope of this book to fully explain this (if you are curious, you can take a peek here). Besides, it is not always advisable to load all functions of an entire package. One reason could be that two packages contain a function with the same name but with a different purpose. Two functions with the same name create a conflict between these two packages, and one of the functions would not be usable. Another reason could be that you only need to use the function once, and loading the whole package to use only one specific function seems excessive. Instead, you can explicitly call functions from packages without loading the package. For example, we might want to use the vismis() function from the naniar package to show where data is missing in our dataset airquality. Writing the code this way is also much quicker than loading the package and then calling the function if you don‚Äôt use it repeatedly. Copy the code and try it yourself. Make sure you have naniar installed (see above). We will work with this package when we explore missing data in Chapter @ref(). # Here I use the dataset &#39;airquality&#39;, which comes with R naniar::vis_miss(airquality) 5.5 Coding etiquette Now you know everything to get started, but before we jump into our first project, I would like to briefly touch upon coding etiquette. This is not something that improves your analytical or coding skills directly, but is essential in building good habbits and making your life and those of others a little easier. Consider writing code like growing plants in your garden. You want to nurture the good plants, remove the weed and add labels that tell you which plant it is that you are growing. At the end of the day, you want your garden to be well-maintained. Treat you programming code the same way. A script (see Chapter @ref()) with code should always have at least the following qualities: Only contains code that is necessary, Is easy to read and understand, Is self-contained. With simple code this is easily achieved. However, what about more complex and longer code representing a whole set of analytical steps? # Very messy code library(tidyverse) library(jtools) model1 &lt;- lm(covid_cases_per_1m ~ idv, data = df) summ(model1, scale = TRUE, transform.response = TRUE, vifs = TRUE) df %&gt;% ggplot(aes(covid_cases_per_1m, idv, colour = europe, label = country))+ theme_minimal()+ geom_label(nudge_y = 2) + geom_point() mod_model2 &lt;- lm(cases_per_1m ~ idv + uai + idv*europe + uai*europe, data = df) summ(mod_model2, scale = TRUE, transform.response = TRUE, vifs = TRUE) anova(mod_model1, mod_model2) How about the following in comparison? # Nicely structured code # Load required R packages library(tidyverse) library(jtools) # ---- Modelling COVID-19 cases ---- ## Specify and run a regression model1 &lt;- lm(covid_cases_per_1m ~ idv, data = df) ## Retrieve the summary statistics of model1 summ(model1, scale = TRUE, transform.response = TRUE, vifs = TRUE) # Does is matter whether a country lies in Europe? ## Visualise rel. of covid cases, idv and being a European country df %&gt;% ggplot(aes(covid_cases_per_1m, idv, colour = europe, label = country))+ theme_minimal()+ geom_label(nudge_y = 2) + geom_point() ## Specify and run a revised regression mod_model2 &lt;- lm(cases_per_1m ~ idv + uai + idv*europe + uai*europe, data = df) ## Retrieve the summary statistics of model2 summ(mod_model2, scale = TRUE, transform.response = TRUE, vifs = TRUE) ## Test whether model2 is an improvement over model1 anova(mod_model1, mod_model2) I hope we can agree that the second example is much easier to read and understand even though you probably do not understand most of it yet. For once, I separated the different analytical steps from each other like paragraphs in a report. Apart from that, I added comments with # to provide more context to my code for someone else who wants to understand my analysis. Admittedly, this example is a little excessive. Usually, you might have fewer comments. Commenting is an integral part of programming because it allows you to remember what you did. Ideally, you want to strike a good balance between commenting on and writing your code. How many comments you need will likely change throughout your R programming journey. Think of comments as headers for your programming script that give it structure.. We can use # not only to write comments but also to tell R not to run particular code. This is very helpful if you want to keep some code but do not want to use it yet. There is also a handy keyboard shortcut you can use to ‚Äòdeactivate‚Äô multiple lines of code at once. Select whatever you want to ‚Äòcomment out‚Äô in your script and press Ctrl+Shift+C (PC) or Cmd+Shift+C (Mac). # mean(pocket_money) # R will NOT run this code mean(pocket_money) # R will run this code RStudio helps a lot with keeping your coding tidy and properly formatted. However, there are some additional aspects worth considering. If you want to find out more about coding style, I highly recommend to read through the ‚ÄòThe tidyverse style guide‚Äô (Wickham 2021). 5.6 Exercises What is the result of \\(\\sqrt[2]{25-16}+2*8-6\\)? What does the console return if you execute the following code \"Five\" == 5? Create a list called books and include the following book titles in it: ‚ÄúHarry Potter and the Deathly Hallows,‚Äù ‚ÄúThe Alchemist,‚Äù ‚ÄúThe Davinci Code,‚Äù ‚ÄúR For Dummies‚Äù Copy and paste the function below into your RStudio console and run it. What does the function do when you use it? x_x &lt;- function(number1, number2){ result1 &lt;- number1*number2 result2 &lt;- sqrt(number1) result3 &lt;- number1-number2 return(c(result1, result2, result3)) } What are the three steps to use a new R package that you found on CRAN? Check you answers: Solutions 15.1 References "],["starting-your-r-projects.html", "6 Starting your R projects 6.1 Creating an R Project file 6.2 Organising your projects 6.3 Creating an R Script 6.4 Using R Markdown", " 6 Starting your R projects Every project likely fills you with enthusiasm and excitement. And it should. You are about to find answers to your questions, and you hopefully come out more knowledgeable due to it. However, there are likely certain aspects of data analysis that you find less enjoyable. I can think of two: Keeping track of all the files my project generates Data wrangling While we cover data wrangling in great detail later (Chapter 7), I would like to share some insights from my work that helped me stay organised and, consequently, less frustrated. The following applies to small and large research projects, which makes it very convenient no matter the situation. Of course, feel free to tweak my approach to whatever suits you. However, consistency is king. 6.1 Creating an R Project file When working on a project, you likely create many different files for various purposes, especially R Scripts (see Chapter 6.3). If you are not careful, this file is stored in your system‚Äôs default location, which might not be where you want them to be. RStudio allows you to manage your entire project intuitively and conveniently through R Project files. Using R Project files comes with a couple of perks, for example: All the files that you generate are in the same place. Your data, your coding, your exported plots, your reports, etc., all are in one place together without you having to manage the files manually. If you want to share your project, you can share the entire folder, and others can quickly reproduce your research or help fix problems. This is because all file paths are relative and not absolute. You can, more easily, use GitHub for backups and so-called ‚Äòversion control,‚Äô which allows you to track changes you have made to your code over time (see also Chapter 14.1). For now, the most important reason to use R Project files is the convenience of the organisation of files and the ability to share it easily with co-investigators, your supervisor, or your students. To create an R Project, you need to perform the following steps: Select File &gt; New Project‚Ä¶ from the menu bar. Select New Directory from the popup window. Next, select New Project. Pick a meaningful name for your project folder, i.e.¬†the Directory Name. Ensure this project folder is created in the right place. You can change the subdirectory by clicking on Browse‚Ä¶. Ideally the subdirectory is a place where you usually store your research projects. You have the option to Create a git repository. This is only relevant if you already have a GitHub account and wish to use version control. For now, you can happily ignore it. Lastly, tick Open in new session. This will open your R Project in a new RStudio window. Once you are happy with your choices, you can click Create Project. This will open a new R Session, and you can start working on your project. If you look carefully, you can see that your RStudio is now ‚Äòbranded‚Äô with your project name. At the top of the window, you see the project name, the files pane shows the root directory where all your files will be, and even the console shows on top the file path of your project. You could set all this up manually, but I would not recommend it, not the least because it is easy to work with R Projects. 6.2 Organising your projects This section is not directly related to RStudio, R or data analysis in general. Instead, I want to convey to you that a good folder structure can go a long way. It is an excellent habit to start thinking about folder structures before you start working on your project. Placing your files into dedicated folders, rather than keeping them loosely in one container, will speed up your work and save you from the frustration of not finding the files you need. I have a template that I use regularly. You can either create it from scratch in RStudio or open your file browser and create the folders there. RStudio does not mind which way you do it. If you want to spend less time setting this up, you might want to use the function create_dr() from the r4np package. It creates all the folders as shown in Figure 6.1. # Install &#39;r4np&#39; from GitHub devtools::install_github(&quot;ddauber/r4np&quot;) # Create the template structure r4np::create_dr() To create a folder, click on New Folder in the Files pane. I usually have at least the following folders for every project I am involved in: A folder for my raw data. I store ‚Äòuntouched‚Äô datasets in it. With ‚Äòuntouched,‚Äô I mean they have not been processed in any way and are usually files I downloaded from my data collection tool, e.g.¬†online questionnaire platform. A folder with ‚Äòtidy‚Äô data. This is usually data I exported from R after cleaning it, i.e.¬†after data wrangling (see Chapter 7). A folder for my R scripts A folder for my plots A folder for reports Thus, in RStudio, it would look something like this: Figure 6.1: An example of a scalable folder structure for your project You probably noticed that my folders have numbers in front of them. I do this to ensure that all folders are in the order I want them to be, usually not the alphabetical order my computer suggests. I use two digits because I may have more than nine folders for a project, and folder ten would otherwise be listed as the third folder in this list. With this filing strategy in place, it will be easy to find whatever I need. Even others can easily understand what I stored where. It is simply ‚Äòtidy,‚Äô similar to how we want our data to be. 6.3 Creating an R Script Code quickly becomes long and complex. Thus, it is not very convenient to write it in the console. So, instead, we can write code into an R Script. An R Script is a document that RStudio recognises as R programming code. Files that are not R Scripts, like .txt, .rtf or .md, can also be opened in RStudio, but any code written in it will not be automatically recognised. When opening an R script or creating a new one, it will display in the source window (see Chapter 4.2). Some refer to this window as the ‚Äòscript editor.‚Äô An R Script starts as an empty file. Good coding etiquette (see Chapter 5.5 demands that we use the first line to indicate what this file does by using a comment #. Here is an example for our ‚ÄòTidyTuesday‚Äô R Project. All examples in this book can easily be copied and pasted into your own R Script. However, for some code you will have to install the R package r4np (see above). Let‚Äôs try it with the following code. The plot this code creates reveals which car manufacturer produces the most efficient cars. library(tidyverse) mpg %&gt;% ggplot(aes(x = reorder(manufacturer, desc(hwy), FUN = median), y = hwy, fill = manufacturer)) + geom_boxplot() + coord_flip() + theme_minimal() + xlab(&quot;Manufacturer&quot;) + ylab(&quot;Highway miles per gallon&quot;) You are probably wondering where your plot has gone. Copying the code will not automatically run it in your R Script. However, this is necessary to create the plot. If you tried pressing Return ‚Üµ, you would only add a new line. Instead, you need to select the code you want to run and press Ctrl+Return ‚Üµ (PC) or Cmd+Return ‚Üµ (Mac). You can also use the Run command at the top of your source window, but it is much more efficient to press the keyboard shortcut. Besides, you will remember this shortcut quickly, because we need to use it very frequently. If all worked out, you should see the following: As you can see, cars from Honda appear to drive furthest with the same amount of fuel (a gallon) compared to other vehicles. Thus, if you are looking for a very economical car, you now know where to find them. The R Script editor has some conveniences for writing your code that are worth pointing out. You probably noticed that some of the code we have pasted is blue, and some other code is in green. These colours help to make your code more readable because they carry a specific meaning. In the default settings, green stands for any values in \"\", which usually stands for characters. This is also called ‚Äòsyntax highlighting.‚Äô Moreover, code in R Scripts will be automatically indented to facilitate reading. If for whatever reason, the indentation does not happen, or you accidentally undo it, you can reindent a line with Ctrl+I (PC) or Cmd+I (Mac). Lastly, the console and the R Script editor both feature code completion. This means that when you start typing a the name of function, R will provide suggestions. These are extremely helpful and make programming a lot faster. Once you found the function you were looking for, you press Return ‚Üµ to insert it. Here is an example of what happens when you have the package tidyverse loaded and type ggpl. Only functions that are loaded via packages or any object in your environment pane benefit from code completion. Not only does RStudio show you all the available options, but it also tells you which package this function is from. In this case, all listed functions are from the ggplot2 package. Furthermore, when you select one of the options but have not pressed Return ‚Üµ yet, you also get to see a yellow box, which provides you with a quick reference of all the arguments that this function accepts. So you do not have to memorise all the functions and their arguments. 6.4 Using R Markdown There is too much to say about R Markdown, which is why I only will highlight that it exists and point out the one feature that might convince you to choose this format over plain R Scripts: They look like a Word document (almost). As the name indicates, R Markdown files are a combination of R Scripts and Markdown. Markdown is a way of writing and formatting text documents without needing software like MS Word. Instead, you write everything in plain text. Such plain text can be converted into many different document types such as HTML websites, PDF or Word documents. If you would like to see how it works, I recommend looking at the¬†R Markdown Cheatsheet. An R Markdown file works oppositely to an R Script. By default, an R Script considers everything as code and only through commenting # we can include text to describe what the code does. This is what you have seen in all the coding examples so far. On the other hand, an R Markdown file considers everything as text, and we have to specify what is code. We can do so by inserting ‚Äòcode chunks.‚Äô Therefore, there is less of a need to use comments # in R Markdown files because you can write about it. Another convenience of R Markdown files is that results from your analysis are immediately shown underneath the code chunk. If you switch your view to the Visual Editor, it almost looks like you are writing a report in MS Word. So, when should you use an R Script, and when should you use R Markdown. The rule-of-thumb is that if you intend to write a report, thesis or another form of publication, it might be better to work in an R Markdown file. If this does not apply, you might want to write an R Script. As mentioned above, R Markdown files emphasise text, while R Scripts primarily focus on code. In my projects, I often have a mixture of both. I use R Scripts to carry out data wrangling and my primary analysis and then use R Markdown files to present the findings, e.g.¬†creating plots, tables, etc. By the way, this book is written in R Markdown using the bookdown package. No matter your choice, it will neither benefit nor disadvantage you in your R journey or when working through this book. The choice is all yours. You likely will come to appreciate both formats for what they offer. If you want to find out more about R Markdown and how to use it, I highly recommend taking a look at ‚ÄòR Markdown: The Definitive Guide‚Äô (rmarkdown2018?). "],["data-wrangling.html", "7 Data Wrangling 7.1 Import your data 7.2 Inspecting your data 7.3 Cleaning your column names: Call the janitor 7.4 Data types: What are they and how can you change them 7.5 Handling factors 7.6 Dealing with missing data 7.7 Latent constructs and their reliability 7.8 Once you finished with data wrangling", " 7 Data Wrangling You collected your data over months (and sometimes years), and all you want to know is whether your data makes sense and reveals something nobody would have ever expected. However, before we can truly go ahead with our analysis, it is essential to understand whether our data is ‚Äòtidy.‚Äô Very often, the data we receive is everything else but clean, and we need to check whether our data is fit for analysis and ensure it is in a format that is easy to handle. For small datasets, this is usually a brief exercise. However, I found myself cleaning data for a month because the dataset was spread out into multiple spreadsheets (no pun intended) with different numbers of columns and odd column names. Thus, data cleaning or data wrangling is an essential first step in any data analysis. It is a step that cannot be skipped and has to be performed on every new dataset. Luckily, R provides many useful functions to make our lives easier. You will be in for a treat if you are like me and used to do this in Excel. It is a lot simpler using R to achieve a clean dataset. Here is an overview of the different steps we usually work through before starting with our primary analysis. This list is certainly not exhaustive: Importing data Checking data types Recoding and arranging factors, i.e.¬†categorical data. Running missing data diagnostics and other things 7.1 Import your data The r4np package hosts several different datasets to work with, but at some point, you might want to apply your R knowledge to your own data. Therefore, an essential first step is to import your data into RStudio. There are three different methods, all of which are very handy: Click on your data file in the Files pane and choose Import Dataset. Use the Import Dataset button in the Environment pane. Import your data calling one of the readr functions in the console or RScript. We will use the readr package to import our data. Using this package we can import a range of different file formats, including .csv, .tsv, .txt. If you want to import data from an .xlsx file, you need to use another package called readxl. The following sections will primarily focus on using readr via RStudio or directly in your Console or RScript. 7.1.1 Import data from the Files pane This approach is by far the easiest. Let‚Äôs assume you have a dataset called gender_age.csv in your 00_raw_data folder. If you wish to import it, you can do the following: Click on the name of the file Select Import Dataset. A new window will open, and you can choose different options. You also see a little preview of how the data looks like. This is great if you are not sure whether you did it correctly. You can change how data should be imported, but the default should be fine in most cases. Here is a quick breakdown of the most important options: Name allows you to change the object name, i.e.¬†the name of the object this data will be assigned to. I often use df_raw (df stand for data frame, which is how R calls such rectangular datasets). Skip is helpful if your data file starts with several empty rows at the top. You can remove them here. First Row as Names is ticked by default. In most Social Science projects, we tend to have the name of the variables as the first row in your dataset. Trim Spaces removes any unnecessary whitespace in your dataset. Leave it ticked. Open Data Viewer allows you to look at your imported dataset. I use it rarely, but it can be helpful at times. Delimiter defines how your columns are separate from each other in your file. If it is a .csv it would imply it is a ‚Äòcomma-separated value,‚Äô i.e.¬†,. This setting can be changed for different files, depending on how your data is delimited. You can even use the option Other‚Ä¶ to specify a custom separation option. NA specifies how missing values in your data are acknowledged. By default, empty cells in your data will be recognised as missing data. Once you are happy with your choices, you can click on Import. You will find your dataset in the Environment pane. In the Console, you can see that R also provides the Column specification, which we need later when inspecting ‚Äòdata types.‚Äô readr automatically imports all text-based columns as chr, i.e.¬†character values. However, this might not always be true. We will cover more of this aspect of data wrangling in Chapter 7.4. 7.1.2 Importing data from the Environment pane The process of importing datasets from the Environment pane follows largely the one from the Files pane. Click on Import Dataset &gt; From Text (readr)‚Ä¶. The only main difference lies in having to find the file using the Browse‚Ä¶ button. The rest of the steps are the same as above. You will have to use the Environment pane for importing data from specific file types, e.g.¬†.txt, because using the File pane would only open the file but not import the data for further processing. 7.1.3 Importing data using functions directly If you organised your files well, it could be effortless and quick to use all the functions from readr directly. Here are two examples of how you can use readr to import your data. Make sure you have the tidyverse package loaded. # Import data from &#39;.csv&#39; read_csv(&quot;00_raw_data/gender_age.csv&quot;) # Import data from any file text file by defining the separator yourself read_delim(&quot;00_raw_data/gender_age.txt&quot;, delim = &quot;|&quot;) You might be wondering whether you can use read_delim() to import .csv files too. The answer is ‚ÄòYes, you can!‚Äô In contrast to read_delim(), read_csv() sets the delimiter to , by default. This is mainly for convenience because .csv files are one of the most popular file formats used to store their data. You might also be wondering what a ‚Äòdelimiter‚Äô is. When you record data in a plain-text file, it is easy to see where a new observation starts and ends because it is defined by a row in your file. However, we also need to tell our software where a new column starts, i.e.¬†where a cell begins and ends. Consider the following example. We have a file that holds our data which looks like this: idagegender 124male 256female 333male The first row we probably can still decipher as id, age, gender. However, the next row makes it difficult to understand which value represents the id of a participant and which value reflects the age of that participant. Like us, computer software would find it hard too to decide on this ambiguous content. Thus, we need to use delimiters to make it very clear which value belongs to which column. For example, In a .csv file, the data would be separated by a ,. id,age,gender 1,24,male 2,56,female 3,33,male Considering our example from above, we could also use | as a delimiter. id|age|gender 1|24|male 2|56|female 3|33|male There is a lot more to readr than could be covered in this book. If you want to know more about this R package, I highly recommend looking at the readr webpage. 7.2 Inspecting your data For the rest of this chapter, we will use the wvs dataset from the r4np package. However, we do not know much about this dataset, and therefore we cannot ask any research questions worth investigating. Therefore we need to look at what it contains. The first method of inspecting a dataset is to type the name of the object, i.e.¬†wvs. # Ensure you loaded the &#39;r4np&#39; package first library(r4np) # Show the data in the console wvs ## # A tibble: 69,578 √ó 7 ## `Participant ID` `Country name` Gender Age relationship_status ## &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 20070001 Andorra 1 60 married ## 2 20070002 Andorra 0 47 living together as married ## 3 20070003 Andorra 0 48 separated ## 4 20070004 Andorra 1 62 living together as married ## 5 20070005 Andorra 0 49 living together as married ## 6 20070006 Andorra 1 51 married ## 7 20070007 Andorra 1 33 married ## 8 20070008 Andorra 0 55 widowed ## 9 20070009 Andorra 1 40 single ## 10 20070010 Andorra 1 38 living together as married ## # ‚Ä¶ with 69,568 more rows, and 2 more variables: Freedom.of.Choice &lt;dbl&gt;, ## # Satisfaction-with-life &lt;dbl&gt; The result is a series of rows and columns. The first information we receive is: A tibble: 69,578 x 9. This indicates that our dataset has 69,578 observations (i.e.¬†rows) and 9 columns (i.e.¬†variables). This rectangular format is the one we encounter most frequently in Social Sciences (and probably beyond). If you ever worked in Microsoft Excel, this format will look familiar. Even though it might be nice to look at a dataset in this way, it is not particularly useful. Depending on your monitor size, you might only see a small number of columns, and therefore we do not get to see a complete list of all variables. In short, we hardly ever will find much use in inspecting data this way. Luckily other functions can help us. If you want to see each variable covered in the dataset and their data types, you can use the function glimpse() from the dplyr package (loaded as part of the tidyverse package). glimpse(wvs) ## Rows: 69,578 ## Columns: 7 ## $ `Participant ID` &lt;dbl&gt; 20070001, 20070002, 20070003, 20070004, 20070‚Ä¶ ## $ `Country name` &lt;chr&gt; &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;‚Ä¶ ## $ Gender &lt;dbl&gt; 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, ‚Ä¶ ## $ Age &lt;dbl&gt; 60, 47, 48, 62, 49, 51, 33, 55, 40, 38, 54, 3‚Ä¶ ## $ relationship_status &lt;chr&gt; &quot;married&quot;, &quot;living together as married&quot;, &quot;sep‚Ä¶ ## $ Freedom.of.Choice &lt;dbl&gt; 10, 9, 9, 9, 8, 10, 10, 8, 8, 10, 9, 8, 10, 7‚Ä¶ ## $ `Satisfaction-with-life` &lt;dbl&gt; 10, 9, 9, 8, 7, 10, 5, 8, 8, 10, 8, 8, 10, 7,‚Ä¶ The output of glimpse shows us the name of each column/variable after the $, for example, `Participant ID`. The $ is used to lookup certain variables in our dataset. For example, if we want to inspect the column relationship_status only, we could write the following: wvs$relationship_status ## [1] &quot;married&quot; &quot;living together as married&quot; ## [3] &quot;separated&quot; &quot;living together as married&quot; ## [5] &quot;living together as married&quot; &quot;married&quot; ## [7] &quot;married&quot; &quot;widowed&quot; .... After the variable name, we find the recognised datatype for each column in &lt;...&gt;, for example &lt;chr&gt;. We will return to data types in Chapter 7.4. Lastly, we get samples of the data included. This output is much more helpful. I use glimpse() very frequently for different purposes, for example: to understand what variables are included in a dataset, to check the correctness of data types, to inspect variable names for typos or unconventional names, to look up variable names. There is one more way to inspect your data and receive more information about it by using a specialised R package. The skimr package is excellent in ‚Äòskimming‚Äô your dataset. It provides not only information about variable names and data types but also provides some descriptive statistics. If you installed the r4np package and called the function install_r4np(), you will have skimr installed already. skimr::skim(wvs) The output in the Console should look like this: As you can tell, there is a lot more information in this output. Many descriptive statistics that could be useful are already displayed. skim() provides a summary of the dataset and then automatically sorts the variables by data type. Depending on the data type, you also receive different descriptive statistics. As a bonus, the function also provides a histogram for numeric variables. However, there is one main problem: Some of the numeric variables are not numeric: Participant ID and Gender. Thus, we will have to correct the data types in a moment. Inspecting your data in this way can be helpful to get a better understanding of what your data includes and spot problems with it. In addition, if you receive data from someone else, these methods are an excellent way to familiarise yourself with the dataset relatively quickly. Since I prepared this particular dataset for this book, I also made sure to provide documentation for it. You can access it by using ?wvs in the Console. This will open the documentation in the Help pane. Such documentation is available for every dataset we use in this book. 7.3 Cleaning your column names: Call the janitor If you have an eagle eye, you might have noticed that most of the variable names in wvs are not consistent or easy to read/use. # Whitespace and inconsistent capitalisation Participant ID Country name Gender Age # Difficult to read YearOfBirth Freedom.of.Choice Satisfaction-with-life From Chapter 5.5, you will remember that being consistent in writing your code and naming your objects is essential. The same applies, of course, to variable names. R will not break using the existing names, but it will save you a lot of frustration if we take a minute to clean the names and make them more consistent. You are probably thinking: ‚ÄúThis is easy. I just open the dataset in Excel and change all the column names.‚Äù Indeed, it would be a viable and easy option, but it is not very efficient, especially with larger datasets with many more variables. Instead, we can make use of the janitor package. By definition, janitor is a package that helps to clean up whatever needs cleaning. In our case, we want to tidy our column names. We can use the function clean_names() to achieve this. We store the result in a new object called wvs to keep those changes. The object will also show up in our Environment pane. wvs &lt;- janitor::clean_names(wvs) glimpse(wvs) ## Rows: 69,578 ## Columns: 7 ## $ participant_id &lt;dbl&gt; 20070001, 20070002, 20070003, 20070004, 2007000‚Ä¶ ## $ country_name &lt;chr&gt; &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;An‚Ä¶ ## $ gender &lt;dbl&gt; 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0,‚Ä¶ ## $ age &lt;dbl&gt; 60, 47, 48, 62, 49, 51, 33, 55, 40, 38, 54, 39,‚Ä¶ ## $ relationship_status &lt;chr&gt; &quot;married&quot;, &quot;living together as married&quot;, &quot;separ‚Ä¶ ## $ freedom_of_choice &lt;dbl&gt; 10, 9, 9, 9, 8, 10, 10, 8, 8, 10, 9, 8, 10, 7, ‚Ä¶ ## $ satisfaction_with_life &lt;dbl&gt; 10, 9, 9, 8, 7, 10, 5, 8, 8, 10, 8, 8, 10, 7, 1‚Ä¶ Now that janitor has done its magic, we suddenly have easy to read variable names that are consistent with the ‚ÄòTidyverse style guide‚Äô (Wickham 2021). If for whatever reason, the variable names are still not looking the way you want, you can use the function rename() from the dplyr package to manually assign new variable names. wvs &lt;- wvs %&gt;% rename(satisfaction = satisfaction_with_life, country = country_name) glimpse(wvs) ## Rows: 69,578 ## Columns: 7 ## $ participant_id &lt;dbl&gt; 20070001, 20070002, 20070003, 20070004, 20070005, ‚Ä¶ ## $ country &lt;chr&gt; &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andor‚Ä¶ ## $ gender &lt;dbl&gt; 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,‚Ä¶ ## $ age &lt;dbl&gt; 60, 47, 48, 62, 49, 51, 33, 55, 40, 38, 54, 39, 44‚Ä¶ ## $ relationship_status &lt;chr&gt; &quot;married&quot;, &quot;living together as married&quot;, &quot;separate‚Ä¶ ## $ freedom_of_choice &lt;dbl&gt; 10, 9, 9, 9, 8, 10, 10, 8, 8, 10, 9, 8, 10, 7, 10,‚Ä¶ ## $ satisfaction &lt;dbl&gt; 10, 9, 9, 8, 7, 10, 5, 8, 8, 10, 8, 8, 10, 7, 10, ‚Ä¶ You are probably wondering what %&gt;% stands for. This symbol is called a ‚Äòpiping operator‚Äô , and it allows us to chain multiple functions together by considering the output of the previous function. So, do not confuse &lt;- with %&gt;%. Each operator serves a different purpose. The %&gt;% has become synonymous with the tidyverse approach to R programming and is the chosen approach for this book. Many functions from the tidyverse are designed to be chained together. If we wanted to spell out what we just did, we could say: wvs &lt;-: We assigned whatever happened to the right of the assignment operator to the object wvs. wvs %&gt;%: We defined the dataset we want to use with the functions defined after the %&gt;%. rename(satisfaction = satisfcation_with_life): We define a new name satisfaction for the column satisfaction_with_life. Notice that the order is new_name = old_name. Here we also use =. A rare occasion where it makes sense to do so. Just for clarification, the following two lines of code accomplish the same task. The only difference lies that with %&gt;% we could chain another function right after it. So, you could say, it is a matter of taste which approach you prefer. However, in later chapters, it will become apparent why using %&gt;% is very advantageous. # Renaming a column using &#39;%&gt;%&#39; wvs %&gt;% rename(satisfaction_new = satisfaction) # Renaming a column without &#39;%&gt;%&#39; rename(wvs, satisfaction_new = satisfaction) Since you will be using the pipe operator very frequently, it is a good idea to remember the keyboard shortcut for it: Ctrl+Shift+M for PC and Cmd+Shift+M for Mac. 7.4 Data types: What are they and how can you change them When we inspected our data, I mentioned that some variables do not have the correct data type. You might be familiar with different data types by classifying them as: Nominal data, which is categorical data of no particular order, Ordinal data, which is categorical data with a defined order, and Quantitative data, which is data that usually is represented by numeric values. In R we have a slightly different distinction: character / &lt;chr&gt;: Textual data, for example the text of a tweet. factor / &lt;fct&gt;: Categorical data with a finite number of categories with no particular order. ordered / &lt;ord&gt;: Categorical data with a finite number of categories with a particular order. double / &lt;dbl&gt;: Numerical data with decimal places. integer / &lt;int&gt;: Numerical data with whole numbers only (i.e.¬†no decimals). logical / &lt;lgl&gt;: Logical data, which only consists of values ‚ÄòTRUE‚Äô and ‚ÄòFALSE.‚Äô date / date: Data which consists dates, e.g.¬†‚Äò2021-08-05.‚Äô date-time / dttm: Data which consists dates and times, e.g.¬†‚Äò2021-08-05 16:29:25 BST.‚Äô For a complete list of data types, I recommend looking at ‚ÄòColumn Data Types‚Äô (M√ºller and Wickham 2021). R has a more fine-grained categorisation of data types. The most important distinction, though, lies between &lt;chr&gt;, &lt;fct&gt;/&lt;ord&gt; and &lt;dbl&gt; for most datasets in the Social Sciences. Still, it is good to know what the abbreviations in your tibble mean and how they might affect your analysis. Now that we have a solid understanding of different data types, we can look at our dataset and see whether readr classified our variables correctly. glimpse(wvs) ## Rows: 69,578 ## Columns: 7 ## $ participant_id &lt;dbl&gt; 20070001, 20070002, 20070003, 20070004, 20070005, ‚Ä¶ ## $ country &lt;chr&gt; &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andor‚Ä¶ ## $ gender &lt;dbl&gt; 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,‚Ä¶ ## $ age &lt;dbl&gt; 60, 47, 48, 62, 49, 51, 33, 55, 40, 38, 54, 39, 44‚Ä¶ ## $ relationship_status &lt;chr&gt; &quot;married&quot;, &quot;living together as married&quot;, &quot;separate‚Ä¶ ## $ freedom_of_choice &lt;dbl&gt; 10, 9, 9, 9, 8, 10, 10, 8, 8, 10, 9, 8, 10, 7, 10,‚Ä¶ ## $ satisfaction &lt;dbl&gt; 10, 9, 9, 8, 7, 10, 5, 8, 8, 10, 8, 8, 10, 7, 10, ‚Ä¶ readr did a great job in identifying all the numeric variables. However, by default, readr imports all variables that include text as &lt;chr&gt;. It appears, in our dataset, this is not entirely correct. The variables country, gender and relationship_status specify a finite number of categories. Therefore they should be classified as a factor. The variable participant_id is represented by numbers, but its meaning is also rather categorical. We would not use the ID numbers of participants to perform additions or multiplications. This would make no sense. Therefore, it might be wise to turn them into a factor, even though we likely will not use it in our analysis and would make no difference. However, I am a stickler for those kinds of things, and I would include in it. To perform the conversion, we need to use two new functions from dplyr: mutate(): Changes, i.e.¬†‚Äòmutates,‚Äô a variable. as_factor(): Converts data from one type into a factor. If we want to convert all variables in one go, we can put them into the same function, separated by a ,. wvs &lt;- wvs %&gt;% mutate(country = as_factor(country), gender = as_factor(gender), relationship_status = as_factor(relationship_status), participant_id = as_factor(participant_id) ) glimpse(wvs) ## Rows: 69,578 ## Columns: 7 ## $ participant_id &lt;fct&gt; 20070001, 20070002, 20070003, 20070004, 20070005, ‚Ä¶ ## $ country &lt;fct&gt; &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andorra&quot;, &quot;Andor‚Ä¶ ## $ gender &lt;fct&gt; 1, 0, 0, 1, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 0, 0,‚Ä¶ ## $ age &lt;dbl&gt; 60, 47, 48, 62, 49, 51, 33, 55, 40, 38, 54, 39, 44‚Ä¶ ## $ relationship_status &lt;fct&gt; married, living together as married, separated, li‚Ä¶ ## $ freedom_of_choice &lt;dbl&gt; 10, 9, 9, 9, 8, 10, 10, 8, 8, 10, 9, 8, 10, 7, 10,‚Ä¶ ## $ satisfaction &lt;dbl&gt; 10, 9, 9, 8, 7, 10, 5, 8, 8, 10, 8, 8, 10, 7, 10, ‚Ä¶ The output in the console shows that we successfully performed the transformation and our data types are as we intended them to be. Mission accomplished. If you need to convert all &lt;chr&gt; columns you can use mutate_if(is.character, as.factor) instead. This function will look at each column and if it is a character type variable, it will convert it into a factor. However, use this function only if you are certain that all character columns need converting. 7.5 Handling factors 7.5.1 Recoding factors Another common problem we have to tackle when working with data is their representation in the dataset. For example, gender could be measured as male and female2 or as 0 and 1. R does not mind which way you represent your data, but some other software does. Therefore, when we import data from somewhere else, the values of a variable might not look the way we want. The practicality of having your data represented accurately as what they are, becomes apparent when you intend to create tables and plots. For example, we might be interested in knowing how many participants in the wvs were male and female. The function count() from dplyr does precisely that. wvs %&gt;% count(gender) ## # A tibble: 3 √ó 2 ## gender n ## &lt;fct&gt; &lt;int&gt; ## 1 0 33049 ## 2 1 36478 ## 3 &lt;NA&gt; 51 Now we know how many people were male and female and how many did not disclose their gender. Or do we? The issue here is that you would have to know what the 0 and 1 stand for. Surely you would have a coding manual that gives you the answer, but it seems a bit of a complication. For gender, this might still be easy to remember, but can you recall the ID numbers for 48 countries? It certainly would be easier to replace the 0s and 1s with their corresponding labels. This can be achieved with a simple function called fct_recode() from forcats. However, since we ‚Äòmutate‚Äô a variable into something else, we also have to use the mutate() function. wvs &lt;- wvs %&gt;% mutate(gender = fct_recode(gender, &quot;male&quot; = &quot;0&quot;, &quot;female&quot; = &quot;1&quot;)) If you have been following along very carefully, you might spot one oddity in this code: \"0\" and \"1\". You likely recall that in Chapter 5, I mentioned that we use \"\" for character values but not for numbers. So what happens if we run the code and remove \"\". wvs %&gt;% mutate(gender = fct_recode(gender, &quot;male&quot; = 0, &quot;female&quot; = 1)) ## Error: Problem with `mutate()` column `gender`. ## ‚Ñπ `gender = fct_recode(gender, male = 0, female = 1)`. ## x Each input to fct_recode must be a single named string. Problems at positions: 1, 2 The error message is easy to understand: fct_recode() only expects strings as input and not numbers. R recognises 0 and 1 as numbers, but fct_recode() converts a factor value into another factor value. To refer to a factor level (i.e.¬†one of the categories in our factor), we have to use \"\". In other words, data types matter and are often a source of problems with your code. Thus, always pay close attention to it. If we rerun our analysis and generate a frequency table for gender, we now get a much more readable output. wvs %&gt;% count(gender) ## # A tibble: 3 √ó 2 ## gender n ## &lt;fct&gt; &lt;int&gt; ## 1 male 33049 ## 2 female 36478 ## 3 &lt;NA&gt; 51 Another benefit of going through the trouble of recoding your factors is the readability of your plots. For example, we could quickly generate a bar plot based on the above table and have appropriate labels instead of 0 and 1. wvs %&gt;% count(gender) %&gt;% ggplot(aes(gender, n)) + geom_col() Plots are an excellent way to explore your data and understand relationships between variables. More about this when we start to perform analytical steps on our data (see Chapter 8 and beyond). Another use case for recoding factors could be for purely cosmetic reasons. For example, when looking through our dataset, we might notice that some country names are very long and do not look great in data visualisations or tables. Thus, we could consider shortening them. First, we need to find out which country names are particularly long. There are 48 countries in this dataset, so it could take some time to look through them all. Instead, we could use the function filter() from dplyr to pick only countries with a long name. However, this poses another problem: How can we tell the filter function to pick only country names with a certain length? Ideally, we would want a function that does the counting for us. As you probably anticipated, there is a package called stringr, which also belongs to the tidyverse, and has a function that counts the number of characters that represent a value in our dataset: str_length(). This function takes any character variable and returns the length of it. This also works with factors because this function can ‚Äòcoerce‚Äô it into a character, i.e.¬†it just ignores that it is a factor and looks at it as if it was a regular character variable. Good news for us, because now we can put the puzzle pieces together. wvs %&gt;% filter(stringr::str_length(country) &gt;= 15) %&gt;% count(country) ## # A tibble: 3 √ó 2 ## country n ## &lt;fct&gt; &lt;int&gt; ## 1 Bolivia, Plurinational State of 2067 ## 2 Iran, Islamic Republic of 1499 ## 3 Korea, Republic of 1245 I use the value 15 arbitrarily after some trial and error. You can change the value and see which other countries would show up with a lower threshold. However, this number seems to do the trick and returns three countries that seem to have longer labels. All we have to do is replace these categories with new ones the same way we recoded gender. You probably can guess already what we have to do to achieve this. wvs &lt;- wvs %&gt;% mutate(country = fct_recode(country, &quot;Bolivia&quot; = &quot;Bolivia, Plurinational State of&quot;, &quot;Iran&quot; = &quot;Iran, Islamic Republic of&quot;, &quot;Korea&quot; = &quot;Korea, Republic of&quot;)) 7.5.2 Reordering factor levels TODO: CONTINUE FROM HERE Consider whether this should happen here or later. Probably later, actually when we talk about descriptive statistics. This is not really data cleaning at this point. Too much stuff already. Move to descriptive statistics section. 7.6 Dealing with missing data There is hardly any Social Sciences project where researchers do not have to deal with missing data. Participants are sometimes unwilling to complete a questionnaire or miss the second round of data collection entirely, e.g., longitudinal studies. It is not the purpose of this chapter to delve into all aspects of analysing missing data but provide a solid starting point. There are mainly three steps involved in dealing with missing data: Mapping missing data Identifying patterns of missing data Replacing or removing missing data 7.6.1 Mapping missing data Every study that intends to be rigorous will have to identify how much data is missing. In R, this can be achieved in multiple ways, but using a specialised package like naniar does help us to do this very quickly and systematically. First, we have to load the naniar package, and then we use the function vis_miss() to visualise how much and where exactly data is missing. library(naniar) vis_miss(wvs) Figure 7.1: Mapping missing data with naniar naniar plays along nicely with the tidyverse approach of programming. As such, it would also be possible to write wvs %&gt;% vis_miss(). As we can see, 99,7% of our dataset is complete, and we are only missing 0.3%. The dark lines (actually blocks) refer to missing data points. On the x-axis, we can see all our variables, and on the y-axis, we see our observations. This is the same layout as our rectangular dataset: Rows are observations, and columns are variables. Overall, this dataset appears relatively complete (luckily). In addition, we can see the percentage of missing data per variable. freedom_of_choice is the variable with the most missing data, i.e.¬†0.79%. Still, the amount of missing data is not very large. When working with larger datasets, it might also be helpful to rank variables by their degree of missing data to see where the most significant problems lie. gg_miss_var(wvs) Figure 7.2: Missing data per variable It is noticeable that freedom_of_choice has the most missing data points, while participant_id, and country_name have no missing values. If you prefer to see the actual numbers instead, we can use a series of functions that start with miss_ (for a complete list of all functions, see the reference page of naniar). For example, to retrieve the numeric values which are reflected in the plot above, we can write the following: # Summarise the missingness in each variable miss_var_summary(wvs) ## # A tibble: 7 √ó 3 ## variable n_miss pct_miss ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 freedom_of_choice 547 0.786 ## 2 relationship_status 335 0.481 ## 3 age 318 0.457 ## 4 satisfaction 239 0.343 ## 5 gender 51 0.0733 ## 6 participant_id 0 0 ## 7 country 0 0 I tend to prefer data visualisations over numerical results for mapping missing data, especially in larger datasets with many variables. This also has the benefit that patterns of missing data can be more easily identified as well. 7.6.2 Identifying patterns of missing data If you find that your data ‚Äòsuffers‚Äô from missing data, it is essential to answer another question: Is data missing systematically? This is quite an important diagnostic step since systematically missing data would imply that if we remove these observations from our dataset, we likely produce the wrong results. We can distinguish missing data based on how it is missing, i.e. missing completely at random (MCAR), missing at random (MAR), and missing not at random (MNAR). (Rubin 1976) 7.6.2.1 Missing completely at random (MCAR) Missing completely at random (MCAR) means that neither observed nor missing data can systematically explain why data is missing. It is a pure coincidence how data is missing, and there is no underlying pattern. The naniar package comes with the very popular Little‚Äôs MCAR test (Little 1988), which provides insights into whether our data is missing completely at random. Thus, we can call the function mcar_test() and inspect the result. wvs %&gt;% select(-participant_id) %&gt;% # Remove variables which do not reflect a response mcar_test() ## # A tibble: 1 √ó 4 ## statistic df p.value missing.patterns ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 411. 67 0 19 When you run such a test, you have ensure that variables that are not part of the data collection are removed. In our case, the participant_id is generated by the researcher and does not represent an actual response by the participants. As such, we need to remove it using select() before we can run the test. A - inverts the meaning of select(). While select(participant_id) would do what it says, i.e.¬†include it as the only variable in the test, select(-participant_id) results in selecting everything but this variable in our test. You will find it is sometimes easier to remove a variable with select() rather than listing all the variables you want to keep. Since the p.value of the test is so small that it got rounded down to 0, i.e.¬†\\(p&lt;0.0001\\), we have to assume that our data is not missing completely at random. If we found that \\(p&gt;0.05\\), we would have confirmation that data are missing completely at random. 7.6.2.2 Missing at random (MAR) Missing at random (MAR) refers to a situation where the observed data can explain missing data, but not the missing data. Dong and Peng (2013) (p.¬†2) provide a good example when this is the case: Let‚Äôs suppose that students who scored low on the pre-test are more likely to drop out of the course, hence, their scores on the post-test are missing. If we assume that the probability of missing the post-test depends only on scores on the pre-test, then the missing mechanism on the post-test is MAR. In other words, for students who have the same pre-test score, the probability of [them] missing the post-test is random. Thus,the main difference between MCAR and MAR data lies in the fact that we can observe some patterns of missing data if data is MAR. These patterns are only based on data we have, i.e.¬†observed data. We also assume that no unobserved variables can explain these or other patterns. Accordingly, we first look into variables with no missing data and see whether they can explain our missing data in other variables. For example, we could investigate whether missing data in freedom_of_choice is attributed to specific countries. wvs %&gt;% group_by(country) %&gt;% filter(is.na(freedom_of_choice)) %&gt;% count() %&gt;% arrange(desc(n)) # Rearranging scores for easier reading ## # A tibble: 32 √ó 2 ## # Groups: country [32] ## country n ## &lt;fct&gt; &lt;int&gt; ## 1 Japan 47 ## 2 Brazil 44 ## 3 New Zealand 44 ## 4 Russia 43 ## 5 Bolivia 40 ## 6 Romania 29 ## 7 Kazakhstan 27 ## 8 Turkey 24 ## 9 Egypt 23 ## 10 Serbia 20 ## # ‚Ä¶ with 22 more rows It seems four countries have exceptionally high numbers of missing data for freedom_of_choice: Japan, Brazil, New Zealand, Russia and Bolivia. Why this is the case lies beyond this dataset and is something only the researchers themselves could explain. Collecting data in different countries is particularly challenging, and one is quickly faced with different unfavourable conditions. Furthermore, the missing data is not completely random because we have some first evidence that the location of data collection might have affected its completeness. Another way of understanding patterns of missing data can be achieved by looking at relationships between missing values, for example, the co-occurrence of missing values across different variables. This can be achieved by using upset plots. An upset plot consists of three parts: Set size, intersection size and a Venn diagram which defines the intersections. gg_miss_upset(wvs) The most frequent combination of missing data in our dataset occurs when only freedom_of_choice is missing (the first column), but nothing else. Similar results can be found for relationships_status and age. The first combination of missing data is defined by two variables: satisfaction and freedom_of_choice. In total, 107 participants had satisfaction and freedom_of_choice missing but nothing else. The ‚Äòset size‚Äô shown in the upset plot refers to the number of missing values for each variable in the diagram. This corresponds to what we have found when looking at Figure 7.2). Our analysis also suggests that values are not completely randomly missing but that we have data to help explain why they are missing. 7.6.2.3 Missing not at random (MNAR) Lastly, missing not at random (MNAR) implies that data is missing systematically and that other variables or reasons exist that explain why data is missing. Still, they are not fully known to us. In questionnaire-based research, an easily overlooked reason that can explain missing data is the ‚Äòpage-drop-off‚Äô phenomenon. In such cases, participants stop completing a questionnaire once they advance to another page. Figure 7.3 shows this very clearly for a large scale project where an online questionnaire was used. After almost every page break in the questionnaire, some participants decided to discontinue. Finding these types of patterns is difficult when only working with numeric values. Thus, it is always advisable to visualise your data as well. Such missing data is linked to the design of the data collection tool. Figure 7.3: MNAR pattern in a dataset due to ‚Äòpage-drop-offs‚Äô Defining whether a dataset is MNAR or not is mainly achieved by ruling out MCAR and MAR assumptions. It is not possible to test whether missing data is MNAR, unless we have more information about the underlying population available (Ginkel et al. 2020). We have sufficient evidence that our data is MAR as was shown above, because we managed to identify some relationships between unobserved and observed data. In practice, it is very rare to find datasets that are truly MCAR (Buuren 2018). Therefore we might consider ‚Äòimputation‚Äô as a possible strategy to solve our missing data problem. More about imputation in the next Chapter. If you are looking for more inspiration of how you could visualise and identify patterns of missingness in your data, you might find the ‚ÄòGallery‚Äô of the naniar website particularly useful. 7.6.3 Replacing or removing missing data Once you determined which pattern of missing data applies to your dataset, it is time to evaluate how we want to deal with those missing values. Generally, you can either keep the missing values as they are, replace them or remove them entirely. Jakobsen et al. (2017) provide a rule of thumb of 5% where researchers can consider missing data as negligible, i.e.¬†we can ignore the missing values because they won‚Äôt affect our analysis in a significant way. They also argue that if the proportion of missing data exceeds 40%, we should also only work with our observed data. However, with such a large amount of missing data, it is questionable whether we can rely on our analysis as much as we want to. If the missing data lies somewhere in-between this range, we need to consider the missing data pattern at hand. If data is MCAR, we could remove missing data. This process is called ‚Äòlistwise deletion,‚Äô i.e.¬†you remove all data from a participant with missing data. As just mentioned, removing missing values is only suitable if you have relatively few missing values in your dataset (see also Schafer (1999)), as is the case with the wvs dataset. There are additional problems with deleting observations listwise, many of which are summarised by Buuren (2018) in his introduction. Usually, we try to avoid removing data as much as possible. If you wanted to perform listwise deletion, it can be done with a single function call: na.omit() from the built-in stats package. Here is an example of how we can apply this function. # No more missing data in this plot wvs %&gt;% na.omit() %&gt;% vis_miss() # How much observations are left after we removed all missing data? wvs %&gt;% na.omit() %&gt;% count() ## # A tibble: 1 √ó 1 ## n ## &lt;int&gt; ## 1 68312 If you wanted to remove the missing data without the plot, you could use wvs_no_na &lt;- na.omit(wvs). However, I always recommend ‚Äòsaving‚Äô the result in a new object to ensure I keep my original data available. This can be helpful when trying to compare how this decision affects my analysis, i.e.¬†I can run the analysis with and without missing data removed. For the wvs dataset, this does not seem to be the best option. Based on our analysis of the wvs dataset (by no means complete!), we could assume that data is MAR. In such cases, it is possible to ‚Äòimpute‚Äô the missing values, i.e.¬†replacing the missing data with computed scores. This is possible because we can model the missing data based on variables we have. We cannot model missing data based on variables we have not measured in our study for obvious reasons. You might be thinking: ‚ÄúWhy would it make data better if we ‚Äòmake up‚Äô numbers? Is this not cheating?‚Äù Imputation of missing values is a science in itself. There is plenty to read about the process of handling missing data, which would reach far beyond the scope of this book. However, the seminal work of Buuren (2018), Dong and Peng (2013) and Jakobsen et al. (2017) are excellent starting points. In short: Simply removing missing data can lead to biases in your data, e.g.¬†if we removed missing data in our dataset, we would mainly exclude participants from Japan, Brazil, New Zealand, Russia and Bolivia (as we found out earlier). While imputation is not perfect, scholars have shown that it can produce more reliable results than not using imputation at all (add some references here), assuming the data meets the requirements for such imputation. Even though our dataset has only a minimal amount of missing data (relative to the entire size), we can still use imputation. There are many different ways to approach this task, one of which is ‚Äòmultiple imputation.‚Äô As highlighted by Ginkel et al. (2020), multiple imputation has not yet reached the same popularity as listwise deletion, despite its benefits. The main reason for this lies in the complexity of using this technique. Therefore I included an example of how to use multiple imputation separately in Chapter @ref(). There are many more approaches to imputation, and going through them all in detail would be impossible and distract from the book‚Äôs main purpose. Still, I would like to share some interesting packages with you that use different imputation methods: mice (Multivariate Imputation via Chained Equations) Amelia (Uses a bootstrapped-based algorithm) missForest (Uses a random forest algorithm) Hmisc (Uses Additive Regression, Bootstrapping, and Predictive Mean Matching) mi (Uses posterior predictive distribution, predictive mean matching, mean-imputation, median-imputation, or conditional mean-imputation) Besides multiple imputation, there is also the option for single imputation. The simputation package offers a great variety of imputation functions, one of which also fits our data quite well impute_knn(). This function makes use of a clustering technique called ‚ÄòK-nearest neighbour.‚Äô In this case, the function will look for observations closest to the one with missing data and take the value of that observation. In other words, it looks for similar participants who answered the questionnaire in a very similar way. The great convenience of this approach is that it can handle all kinds of data types simultaneously, which is not true for all imputation techniques. If we apply this function to our dataset, we have to write the following: wvs_nona &lt;- wvs %&gt;% select(-participant_id) %&gt;% as.data.frame() %&gt;% # Transforms our tibble into a data frame simputation::impute_knn(. ~ .) # Be aware that our new dataframe has different datatypes glimpse(wvs_nona) ## Rows: 69,578 ## Columns: 6 ## $ country &lt;fct&gt; Andorra, Andorra, Andorra, Andorra, Andorra, Andor‚Ä¶ ## $ gender &lt;fct&gt; female, male, male, female, male, female, female, ‚Ä¶ ## $ age &lt;chr&gt; &quot;60&quot;, &quot;47&quot;, &quot;48&quot;, &quot;62&quot;, &quot;49&quot;, &quot;51&quot;, &quot;33&quot;, &quot;55&quot;, &quot;4‚Ä¶ ## $ relationship_status &lt;fct&gt; married, living together as married, separated, li‚Ä¶ ## $ freedom_of_choice &lt;chr&gt; &quot;10&quot;, &quot;9&quot;, &quot;9&quot;, &quot;9&quot;, &quot;8&quot;, &quot;10&quot;, &quot;10&quot;, &quot;8&quot;, &quot;8&quot;, &quot;1‚Ä¶ ## $ satisfaction &lt;chr&gt; &quot;10&quot;, &quot;9&quot;, &quot;9&quot;, &quot;8&quot;, &quot;7&quot;, &quot;10&quot;, &quot;5&quot;, &quot;8&quot;, &quot;8&quot;, &quot;10‚Ä¶ # Let&#39;s fix this wvs_nona &lt;- wvs_nona %&gt;% mutate(age = as.numeric(age), freedom_of_choice = as.numeric(freedom_of_choice), satisfaction = as.numeric(satisfaction)) The function impute_knn(. ~ .) might look like a combination of text with an emoji (. ~ .). This imputation function requires us to specify a model to impute the data. Since we want to impute all missing values in the dataset and use all variables available, we put . on both sides of the equation, separated by a ~. The . reflects that we do not specify a specific variable but instead tell the function to use all variables that are not mentioned. In our case, we did not mention any variables at all, and therefore it chooses all of them. For example, if we wanted to impute only freedom_of_choice, we would have to put impute_knn(freedom_of_choice ~ .). We will elaborate more on how to specify models when we cover regression models (see Chapter 12). As you will have noticed, we also had to convert our tibble into a data frame using as.data.frame(). As mentioned in Chapter 5.3, some functions require a specific data type or format. The simputation package works with dplyr, but it prefers data frames. Based on my experiences, the wrong data type or format is one of the most frequent causes of errors that novice R programmers report. So, keep an eye on it and read the documentation carefully. Also, once you inspect the new data frame, you will notice that some of our double variables have now turned into character values. Therefore, I strongly recommend checking your newly created data frames to avoid any surprises further down the line of your analysis. Be aware that imputation of any kind can take a long time. For example, my MacBook Pro took about 4.22 seconds to complete impute_knn() with the wvs dataset. If we used multiple imputation, this would have taken considerably longer, i.e.¬†several minutes and more. We now should have a dataset that is free of any missing values. To ensure this is the case we can create the missing data matrix that we made at the beginning of this chapter (see Figure 7.1). vis_miss(wvs_nona) 7.6.4 Main takeaways regarding dealing with missing data Handling missing data is hardly ever a simple process. Do not feel discouraged if you get lost in the myriad of options. While there is some guidance on how and when to use specific strategies to deal with missing values in your dataset, the most crucial point to remember is: Be transparent about what you did. As long as you can explain why you did something and how you did it, everyone can follow your thought process and help improve your analysis. However, ignoring the fact that data is missing and not acknowledging it is more than just unwise. 7.7 Latent constructs and their reliability Social Scientists commonly face the challenge that we want to measure something that cannot be measured directly. For example, ‚Äòhappiness‚Äô is a feeling that does not naturally occur as a number we can observe and measure. The opposite is true for ‚Äòtemperature‚Äô which is naturally measured in numbers. At the same time, ‚Äòhappiness‚Äô is much more complex of a variable than ‚Äòtemperature,‚Äô because ‚Äòhappiness‚Äô can unfold in various ways and be caused by different triggers (e.g.¬†a joke, an unexpected present, tasty food, etc.). To account for this, we often work with ‚Äòlatent variables.‚Äô These are defined as variables that are not directly measured but are inferred from other variables. In practice, we often use multiple questions in a questionnaire to measure one latent variable, usually by computing the mean of those questions. The gep dataset from the r4np package includes data about students‚Äô social integration experience (si) and communication skills development (cs). Data were obtained using the Global Education Profiler (GEP). I extracted 6 different questions (also called ‚Äòitems‚Äô) from the questionnaire, which measure si, and 6 items that measure cs. This dataset only consists of a randomly chosen set of responses, i.e.¬†300 out of over 12,000. glimpse(gep) ## Rows: 300 ## Columns: 12 ## $ age &lt;dbl&gt; 22, 26, 21, 23, 25, 27, 24, 23, 21, 24, ‚Ä¶ ## $ gender &lt;chr&gt; &quot;Female&quot;, &quot;Female&quot;, &quot;Female&quot;, &quot;Female&quot;, ‚Ä¶ ## $ level_of_study &lt;chr&gt; &quot;UG&quot;, &quot;PGT&quot;, &quot;UG&quot;, &quot;UG&quot;, &quot;PGT&quot;, &quot;PGT&quot;, &quot;‚Ä¶ ## $ si_socialise_with_people_exp &lt;dbl&gt; 6, 3, 4, 3, 4, 2, 5, 1, 6, 6, 3, 3, 4, 5‚Ä¶ ## $ si_supportive_friends_exp &lt;dbl&gt; 4, 4, 5, 4, 4, 2, 5, 1, 6, 6, 3, 3, 4, 6‚Ä¶ ## $ si_time_socialising_exp &lt;dbl&gt; 5, 2, 4, 4, 3, 2, 6, 3, 6, 6, 3, 2, 4, 6‚Ä¶ ## $ cs_explain_ideas_imp &lt;dbl&gt; 6, 5, 5, 5, 5, 5, 4, 5, 6, 6, 5, 5, 4, 6‚Ä¶ ## $ cs_find_clarification_imp &lt;dbl&gt; 4, 5, 5, 6, 6, 5, 4, 6, 6, 6, 5, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_imp &lt;dbl&gt; 6, 5, 6, 4, 4, 4, 4, 6, 6, 6, 4, 5, 5, 5‚Ä¶ ## $ cs_explain_ideas_exp &lt;dbl&gt; 6, 5, 2, 5, 6, 5, 6, 6, 6, 6, 4, 4, 3, 6‚Ä¶ ## $ cs_find_clarification_exp &lt;dbl&gt; 6, 5, 4, 6, 6, 5, 6, 6, 6, 6, 2, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_exp &lt;dbl&gt; 6, 4, 5, 4, 6, 3, 5, 6, 6, 6, 2, 4, 2, 5‚Ä¶ For example, if we wanted to know how each student scored with regards to social integration (si), we have to compute the mean (mean()) of all related items (i.e.¬†all variables starting with si_), for each row (rowwise()) because each row presents one participant. The same is true for communication skills (cs_imp and cs_exp). We can compute all three variables in one go. For each variable, we compute mean() and use c() to list all the variables that we want to include in the mean: # Compute the scores for the latent variable &#39;si&#39; and &#39;cs&#39; gep &lt;- gep %&gt;% rowwise() %&gt;% mutate(si = mean(c(si_socialise_with_people_exp, si_supportive_friends_exp, si_time_socialising_exp ) ), cs_imp = mean(c(cs_explain_ideas_imp, cs_find_clarification_imp, cs_learn_different_styles_imp ) ), cs_exp = mean(c(cs_explain_ideas_exp, cs_find_clarification_exp, cs_learn_different_styles_exp ) ) ) glimpse(gep) ## Rows: 300 ## Columns: 15 ## Rowwise: ## $ age &lt;dbl&gt; 22, 26, 21, 23, 25, 27, 24, 23, 21, 24, ‚Ä¶ ## $ gender &lt;chr&gt; &quot;Female&quot;, &quot;Female&quot;, &quot;Female&quot;, &quot;Female&quot;, ‚Ä¶ ## $ level_of_study &lt;chr&gt; &quot;UG&quot;, &quot;PGT&quot;, &quot;UG&quot;, &quot;UG&quot;, &quot;PGT&quot;, &quot;PGT&quot;, &quot;‚Ä¶ ## $ si_socialise_with_people_exp &lt;dbl&gt; 6, 3, 4, 3, 4, 2, 5, 1, 6, 6, 3, 3, 4, 5‚Ä¶ ## $ si_supportive_friends_exp &lt;dbl&gt; 4, 4, 5, 4, 4, 2, 5, 1, 6, 6, 3, 3, 4, 6‚Ä¶ ## $ si_time_socialising_exp &lt;dbl&gt; 5, 2, 4, 4, 3, 2, 6, 3, 6, 6, 3, 2, 4, 6‚Ä¶ ## $ cs_explain_ideas_imp &lt;dbl&gt; 6, 5, 5, 5, 5, 5, 4, 5, 6, 6, 5, 5, 4, 6‚Ä¶ ## $ cs_find_clarification_imp &lt;dbl&gt; 4, 5, 5, 6, 6, 5, 4, 6, 6, 6, 5, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_imp &lt;dbl&gt; 6, 5, 6, 4, 4, 4, 4, 6, 6, 6, 4, 5, 5, 5‚Ä¶ ## $ cs_explain_ideas_exp &lt;dbl&gt; 6, 5, 2, 5, 6, 5, 6, 6, 6, 6, 4, 4, 3, 6‚Ä¶ ## $ cs_find_clarification_exp &lt;dbl&gt; 6, 5, 4, 6, 6, 5, 6, 6, 6, 6, 2, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_exp &lt;dbl&gt; 6, 4, 5, 4, 6, 3, 5, 6, 6, 6, 2, 4, 2, 5‚Ä¶ ## $ si &lt;dbl&gt; 5.000000, 3.000000, 4.333333, 3.666667, ‚Ä¶ ## $ cs_imp &lt;dbl&gt; 5.333333, 5.000000, 5.333333, 5.000000, ‚Ä¶ ## $ cs_exp &lt;dbl&gt; 6.000000, 4.666667, 3.666667, 5.000000, ‚Ä¶ Compared to dealing with missing data, this is a fairly straightforward task. However, there is a caveat. Before we can compute the mean across all these variables, we need to know and understand whether all these scores reliably contribute to one single latent variable. If not, we would be in trouble and make a significant mistake. By far, the most common approach to assessing reliability (or more accurately ‚Äòinternal consistency‚Äô) of latent variables is Cronbach‚Äôs \\(\\alpha\\). This indicator looks at how strongly a set of items (i.e.¬†questions in your questionnaire) are related to each other. For example, the stronger the relationship of all items starting with si_ to each other, the more likely we achieve a higher Cronbach‚Äôs \\(\\alpha\\). The psych package has a suitable function to compute it for us. Instead of listing all the items by hand, I use the function starts_with() to pick only the variables whose names start with si_. It certainly pays off to think about your variable names more thoroughly in advance to benefit from such shortcuts (see also Chapter 7.3. gep %&gt;% select(starts_with(&quot;si_&quot;)) %&gt;% psych::alpha() ## ## Reliability analysis ## Call: psych::alpha(x = .) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.85 0.85 0.8 0.66 5.8 0.015 3.5 1.3 0.65 ## ## lower alpha upper 95% confidence boundaries ## 0.82 0.85 0.88 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N alpha se ## si_socialise_with_people_exp 0.82 0.82 0.70 0.70 4.6 0.021 ## si_supportive_friends_exp 0.77 0.77 0.63 0.63 3.4 0.027 ## si_time_socialising_exp 0.79 0.79 0.65 0.65 3.7 0.025 ## var.r med.r ## si_socialise_with_people_exp NA 0.70 ## si_supportive_friends_exp NA 0.63 ## si_time_socialising_exp NA 0.65 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## si_socialise_with_people_exp 300 0.86 0.86 0.75 0.69 3.7 1.4 ## si_supportive_friends_exp 300 0.90 0.89 0.81 0.75 3.5 1.6 ## si_time_socialising_exp 300 0.88 0.88 0.79 0.73 3.2 1.5 ## ## Non missing response frequency for each item ## 1 2 3 4 5 6 miss ## si_socialise_with_people_exp 0.06 0.17 0.22 0.24 0.19 0.12 0 ## si_supportive_friends_exp 0.13 0.18 0.20 0.18 0.18 0.13 0 ## si_time_socialising_exp 0.15 0.21 0.22 0.20 0.12 0.10 0 The function alpha() returns a lot of information. The most important part, though, is shown at the very beginning: ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.85 0.85 0.8 0.66 5.76 0.01 3.46 1.33 0.65 In most publications, researchers would primarily report the raw_alpha value. This is fine, but it is not a bad idea to include at least std.alpha and G6(smc). In terms of interpretation, Cronbrach‚Äôs \\(\\alpha\\) scores can range from 0 to 1. The closer the score to 1, the higher we would judge its reliability. Nunally (1967a) originally provided the following classification for Cronbach‚Äôs \\(\\alpha\\): between 0.6 and 0.5 can be sufficient during the early stages of development, 0.8 or higher is sufficient for most basic research, 0.9 or higher is suitable for applied research, where the questionnaires are used to make critical decisions, e.g.¬†clinical studies, university admission tests, etc., with a ‚Äòdesired standard‚Äô of 0.95. However, a few years later, Nunally (1967b) revisited his original categorisation and considered 0.7 or higher as a suitable benchmark in more exploratory-type research. This gave grounds for researchers to pick and choose the ‚Äòright‚Äô publication for them (Henson 2001). Consequently, depending on your research field, the expected reliability score might lean more towards 0.7 or 0.8. Still, the higher the score, the better it is. Our dataset shows that si scores a solid \\(\\alpha = 0.85\\), which is excellent. We should repeat this step for cs_imp and cs_exp as well. However, we have to adjust select(), because we only want variables included that start with cs_ and end with the facet of the respective variable, i.e.¬†_imp or _exp. We also created two variables that start with cs_, which we also have to remove. Let me demonstrate the ‚Äòevolution‚Äô of how the select() function works to achieve what we want. # Select only variables which start with &#39;cs_&#39; gep %&gt;% select(starts_with(&quot;cs_&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 8 ## Rowwise: ## $ cs_explain_ideas_imp &lt;dbl&gt; 6, 5, 5, 5, 5, 5, 4, 5, 6, 6, 5, 5, 4, 6‚Ä¶ ## $ cs_find_clarification_imp &lt;dbl&gt; 4, 5, 5, 6, 6, 5, 4, 6, 6, 6, 5, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_imp &lt;dbl&gt; 6, 5, 6, 4, 4, 4, 4, 6, 6, 6, 4, 5, 5, 5‚Ä¶ ## $ cs_explain_ideas_exp &lt;dbl&gt; 6, 5, 2, 5, 6, 5, 6, 6, 6, 6, 4, 4, 3, 6‚Ä¶ ## $ cs_find_clarification_exp &lt;dbl&gt; 6, 5, 4, 6, 6, 5, 6, 6, 6, 6, 2, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_exp &lt;dbl&gt; 6, 4, 5, 4, 6, 3, 5, 6, 6, 6, 2, 4, 2, 5‚Ä¶ ## $ cs_imp &lt;dbl&gt; 5.333333, 5.000000, 5.333333, 5.000000, ‚Ä¶ ## $ cs_exp &lt;dbl&gt; 6.000000, 4.666667, 3.666667, 5.000000, ‚Ä¶ # Do the above but include only variables that also end with &#39;_imp&#39; gep %&gt;% select(starts_with(&quot;cs_&quot;) &amp; ends_with(&quot;_imp&quot;)) %&gt;% glimpse() ## Rows: 300 ## Columns: 4 ## Rowwise: ## $ cs_explain_ideas_imp &lt;dbl&gt; 6, 5, 5, 5, 5, 5, 4, 5, 6, 6, 5, 5, 4, 6‚Ä¶ ## $ cs_find_clarification_imp &lt;dbl&gt; 4, 5, 5, 6, 6, 5, 4, 6, 6, 6, 5, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_imp &lt;dbl&gt; 6, 5, 6, 4, 4, 4, 4, 6, 6, 6, 4, 5, 5, 5‚Ä¶ ## $ cs_imp &lt;dbl&gt; 5.333333, 5.000000, 5.333333, 5.000000, ‚Ä¶ # Remove &#39;cs_imp&#39;, because it is the computed latent variable gep %&gt;% select(starts_with(&quot;cs_&quot;) &amp; ends_with(&quot;_imp&quot;), -cs_imp) %&gt;% glimpse() ## Rows: 300 ## Columns: 3 ## Rowwise: ## $ cs_explain_ideas_imp &lt;dbl&gt; 6, 5, 5, 5, 5, 5, 4, 5, 6, 6, 5, 5, 4, 6‚Ä¶ ## $ cs_find_clarification_imp &lt;dbl&gt; 4, 5, 5, 6, 6, 5, 4, 6, 6, 6, 5, 5, 4, 5‚Ä¶ ## $ cs_learn_different_styles_imp &lt;dbl&gt; 6, 5, 6, 4, 4, 4, 4, 6, 6, 6, 4, 5, 5, 5‚Ä¶ Since we want to compute the Cronbach‚Äôs \\(\\alpha\\) for both variables, we write the following: gep %&gt;% select(starts_with(&quot;cs_&quot;) &amp; ends_with(&quot;_imp&quot;), -cs_imp) %&gt;% psych::alpha() ## ## Reliability analysis ## Call: psych::alpha(x = .) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.86 0.87 0.82 0.68 6.5 0.014 5 0.98 0.65 ## ## lower alpha upper 95% confidence boundaries ## 0.84 0.86 0.89 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N ## cs_explain_ideas_imp 0.78 0.78 0.65 0.65 3.6 ## cs_find_clarification_imp 0.76 0.76 0.62 0.62 3.2 ## cs_learn_different_styles_imp 0.88 0.88 0.79 0.79 7.4 ## alpha se var.r med.r ## cs_explain_ideas_imp 0.025 NA 0.65 ## cs_find_clarification_imp 0.028 NA 0.62 ## cs_learn_different_styles_imp 0.014 NA 0.79 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## cs_explain_ideas_imp 300 0.90 0.90 0.85 0.77 5.2 1.0 ## cs_find_clarification_imp 300 0.91 0.91 0.87 0.79 5.1 1.1 ## cs_learn_different_styles_imp 300 0.86 0.85 0.71 0.67 4.8 1.2 ## ## Non missing response frequency for each item ## 1 2 3 4 5 6 miss ## cs_explain_ideas_imp 0.01 0.01 0.06 0.14 0.27 0.51 0 ## cs_find_clarification_imp 0.01 0.02 0.05 0.14 0.30 0.47 0 ## cs_learn_different_styles_imp 0.01 0.03 0.09 0.19 0.31 0.36 0 gep %&gt;% select(starts_with(&quot;cs_&quot;) &amp; ends_with(&quot;_exp&quot;), -cs_exp) %&gt;% psych::alpha() ## ## Reliability analysis ## Call: psych::alpha(x = .) ## ## raw_alpha std.alpha G6(smc) average_r S/N ase mean sd median_r ## 0.81 0.82 0.76 0.6 4.4 0.019 4.2 1.1 0.58 ## ## lower alpha upper 95% confidence boundaries ## 0.78 0.81 0.85 ## ## Reliability if an item is dropped: ## raw_alpha std.alpha G6(smc) average_r S/N ## cs_explain_ideas_exp 0.69 0.69 0.53 0.53 2.3 ## cs_find_clarification_exp 0.73 0.74 0.58 0.58 2.8 ## cs_learn_different_styles_exp 0.81 0.81 0.68 0.68 4.2 ## alpha se var.r med.r ## cs_explain_ideas_exp 0.035 NA 0.53 ## cs_find_clarification_exp 0.031 NA 0.58 ## cs_learn_different_styles_exp 0.022 NA 0.68 ## ## Item statistics ## n raw.r std.r r.cor r.drop mean sd ## cs_explain_ideas_exp 300 0.88 0.88 0.80 0.71 4.2 1.3 ## cs_find_clarification_exp 300 0.85 0.86 0.76 0.68 4.5 1.2 ## cs_learn_different_styles_exp 300 0.84 0.82 0.67 0.61 4.0 1.4 ## ## Non missing response frequency for each item ## 1 2 3 4 5 6 miss ## cs_explain_ideas_exp 0.04 0.09 0.11 0.33 0.26 0.17 0 ## cs_find_clarification_exp 0.02 0.05 0.13 0.27 0.32 0.21 0 ## cs_learn_different_styles_exp 0.06 0.09 0.21 0.24 0.22 0.17 0 Similarly, to si, cs_imp and cs_exp show very good internal consistency scores too: \\(\\alpha_{cs\\_imp} = 0.86\\) and \\(\\alpha_{cs\\_exp} = 0.81\\). Based on these results we could be confident to use our latent variables for further analysis. However, while Cronbach‚Äôs \\(\\alpha\\) is very popular due to its simplicity, there is plenty of criticism (add references). Therefore, it is often not enough to report the Cronbach‚Äôs \\(\\alpha\\), but undertake additional steps. Depending on the stage of development of your measurement instrument (i.e.¬†your questionnaire), you likely have to perform one of the following before computing the \\(\\alpha\\) scores: Exploratory factor analysis (EFA): Generally used to identify latent variables in a set of questionnaire items. Confirmatory factor analysis (CFA): To confirm whether a set of items truly reflect a latent variable. An example of exploratory factor analysis is presented in Chapter @ref(). Since the gep data is based on an established measurement tool, we perform a CFA. To perform a CFA, we use the popular lavaan (Latent Variable Analysis) package. The steps of running a CFA in R include: Define which variables are supposed to measure a specific latent variable (i.e.¬†creating a model) Run the CFA to see whether our model fits the data we collected Interpret the results based on various indicators. library(lavaan) ## This is lavaan 0.6-9 ## lavaan is FREE software! Please report any bugs. #1: Define the model which explains how items relate to latent variables model &lt;- &#39; social_integration =~ si_socialise_with_people_exp + si_supportive_friends_exp + si_time_socialising_exp comm_skills_imp =~ cs_explain_ideas_imp + cs_find_clarification_imp + cs_learn_different_styles_imp comm_skills_exp =~ cs_explain_ideas_exp + cs_find_clarification_exp + cs_learn_different_styles_exp &#39; #2: Run the CFA to see how well this model fits our data fit &lt;- cfa(model, data = gep) #3a: Extract the performance indicators fit_indices &lt;- fitmeasures(fit) #3b: We tidy the results with the &#39;broom&#39; package and pick only those indices we are most interested in broom::tidy(fit_indices) %&gt;% filter(names == &quot;cfi&quot; | names == &quot;srmr&quot; | names == &quot;rmsea&quot;) %&gt;% mutate(x = round(x, 3)) # Round the results to 3 decimal places ## # A tibble: 3 √ó 2 ## names x ## &lt;chr&gt; &lt;lvn.vctr&gt; ## 1 cfi 0.967 ## 2 rmsea 0.081 ## 3 srmr 0.037 The broom package is useful to clean output from all kinds of models, such as a CFA model. It allows us to convert the raw output into a tibble, which we can further manipulate using the functions we already know. If you want to know where names and x came from we have to inspect the output from broom::tidy(fit_indices). broom::tidy(fit_indices) ## # A tibble: 42 √ó 2 ## names x ## &lt;chr&gt; &lt;lvn.vctr&gt; ## 1 npar 2.100000e+01 ## 2 fmin 1.177732e-01 ## 3 chisq 7.066390e+01 ## 4 df 2.400000e+01 ## 5 pvalue 1.733810e-06 ## 6 baseline.chisq 1.429729e+03 ## 7 baseline.df 3.600000e+01 ## 8 baseline.pvalue 0.000000e+00 ## 9 cfi 9.665187e-01 ## 10 tli 9.497780e-01 ## # ‚Ä¶ with 32 more rows These column names were generated when we called the function tidy(). I often find myself working through chains of analytical steps iteratively to see what the intermediary steps produce. This also makes it easier to spot any mistake early on. Therefore, I recommend slowly building up your dplyr chains of function calls, especially when you just started learning R and the tidyverse approach of data analysis. The results of our CFA appear fairly promising: The cfi (Comparative Fit Index) lies above 0.95 and the srmr (Standardised, Root Mean Square Residual) lies well below 0.08. The rmsea (Root Mean Square Error of Approximation) appears slightly higher than desirable, i.e.¬†below 0.6. (Hu and Bentler 1999) Overall, however, the model seems to suggest a good fit with our data. Combined with the computed Cronbach‚Äôs \\(\\alpha\\), we can be reasonably confident in our latent variables and perform further analytical steps, for example, as shown in Chapter 12. 7.8 Once you finished with data wrangling Once you finished your data cleaning, I recommend writing (i.e.¬†exporting) your cleaned data out of R into your ‚Äò01_tidy_data‚Äô folder. You can then use this dataset to continue with your analysis. This way, you do not have to run all your data wrangling code every time you open your R project. To write your tidy dataset onto your hard drive of choice, we can use readr in the same as we did at the beginning. However, instead of read_csv() we have to use another function that writes the file into a folder. The function write_csv() first takes the object we want to save and then the folder and file name. We only made changes to the wvs dataset, so we should save it to our hard drive. write_csv(wvs, &quot;01_tidy_data/wvs_tidy.csv&quot;) This chapter has been a reasonably long one. Nonetheless, it only covered the basics of what can and should be done when preparing data for analysis. These steps should not be rushed or even skipped. It is essential to have the data cleaned appropriately. This process helps you familiarise yourself with the dataset in great depth, and it makes you aware of limitations or even problems of your data. In the spirit of Open Science, using R also helps to document the steps you undertook to get from a raw dataset to a tidy one. This is also beneficial if you intend to publish your work later. Reproducibility has become an essential aspect of transparent and impactful research and should be a guiding principle of any empirical research. Now that we have learned the basics of data wrangling (and there might be more waiting for you in the coming chapters), we can finally start our data analysis. References "],["descriptive-statistics.html", "8 Descriptive Statistics 8.1 Plotting in R with ggplot2 8.2 Central tendency measures: Mean, Median, Mode 8.3 Indicators and visualisations to examine the spread of data", " 8 Descriptive Statistics The best way to understand how participants in your study have responded to various questions or an experimental treatment is to use descriptive statistics. As the name indicates, their main purpose is to ‚Äòdescribe.‚Äô Most of the time we want to describe the composition of our sample and likely how the majority (or minority) of participants performed. In contrast, we use ‚Äòinferential‚Äô statistics to make predictions about the future. In Social Sciences, we are often interested in predicting how people will behave in certain situations and scenarios. We aim to develop models that help us navigate the complexity of social interactions that we all engage in, but might not fully understand. We cover ‚Äòinferential statistics‚Äô in later chapters of this book. In short, descriptive statistics are an essential component to understand your data. To some extend, one could argue that we were already describing our data when we performed various data wrangling tasks (see Chapter 7. The following chapters focus on the most essential descriptive statistics, i.e.¬†the ones you likely want to investigate in 99 out of 100 research projects. This book takes a ‚Äòvisualise first‚Äô approach to data analysis. Therefore, each section will start with data visualisations, followed by computing statistical output, and end with how we can report our results in publications of all kind. A key learning outcome of this chapter is to plot your data using the package ggplot2 and to present characteristics of your data in different ways. Each chapter will ask questions about our dataset that we aim to answer. However, first we need to understand how to create plots in R. 8.1 Plotting in R with ggplot2 Plotting can appear intimidating at first, but is very easy and quick, once you understand the basics. The ggplot2 package is a very popular package to generate plots in R and many other packages are built upon it. This makes it a very flexible tool to create almost any data visualisation you could think of. If you want to see what is possible with ggplot2 you might want to consider looking at #tidytuesday on Twitter where novices and veterans share their data visualisations on a weekly basis. To generate any plot we need to at least define three components: a dataset, variables we want to plot, and how we want to plot them, e.g.¬†as lines, bars, points, etc. Admittedly, this is a harsh oversimplification, but it will serve as a useful guide to get us started. The function ggplot() is the one responsible to create any type of data visualisation. The generic structure of a ggplot() looks like this: ggplot(data, aes(x = variable_01, y = variable_02)) In other words, we first need to provide the dataset data, and then the aesthetics (aes()). Think of aes() as the place where we define our variables (i.e.¬†x and y). For example, we might be interested to know which movie genre is the most popular among the top 250 IMDb movies. The dataset imdb_top_250 from the r4np package allows us to find an answer to this question. Therefore we define the components of the plot as follows: our data is imdb_top_250, and our variable of interest is genre_01 ggplot(imdb_top_250, aes(x = genre_01)) Running this line of code will produce an empty plot. We only get labels for our x-axis, since we defined it already. However, we have yet to tell ggplot() how we want to represent the data on this canvas. Your choice for how you want to plot your data is usually informed by the type of data you want to plot and the statistics you want to represent. For example trying to plot the mean of a factor is not useful, e.g.¬†computing the mean of movie genres. On the other hand, we can count how often certain genres appear in our dataset. One way of representing the count (or frequency) of a factor is to use a bar plot. In order to add an element to ggplot(), i.e.¬†bars, we use + and append the function geom_bar() which draws bars. The + operator works similar to %&gt;% and allows to chain multiple functions one after the other. ggplot(imdb_top_250, aes(x = genre_01)) + geom_bar() This already looks great and we can see that Drama is by far the most popular genre, followed by Action and Crime. Thus, we successfully found an answer to our question. Still, there are more improvements necessary to use it in a publication. We can use + to add other elements to our plot, such as a title and proper axes labels. Here are some common functions to further customise our plot: ggplot(imdb_top_250, aes(x = genre_01)) + geom_bar() + ggtitle(&quot;Most popular movie genres&quot;) + # Add a title xlab(&quot;movie genre&quot;) + # Rename x-axis ylab(&quot;frequency&quot;) # Rename y-axis When working with factors, the category names can be rather long. In this plot, we also have lots of categories and the labels Adventure, Animation and Biography are a bit too close to each other for my taste. This might be a good opportunity to use coord_flip(), which rotates the entire plot by 90 degrees, i.e.¬†turning the x-axis into the y-axis and vice versa. This makes the label much easier to read. ggplot(imdb_top_250, aes(x = genre_01)) + geom_bar() + ggtitle(&quot;Most popular movie genres&quot;) + xlab(&quot;movie genre&quot;) + ylab(&quot;frequency&quot;) + coord_flip() Our plot is almost perfect, but there is one more step we should take to make reading and understanding this plot even easier. At the moment, the bars are ordered alphabetically by movie genre. This is hardly ever a useful way to order your data. Instead, we might want to sort the data by the frequency, showing the most popular genre at the top. We could either sort the movies by hand or slightly amend what we have coded so far. The problem you encounter when rearranging a geom_bar() with only one variable is that we do not have an explicit value we can use to indicate how we want to sort the bars. Our current code is based on the fact that ggplot does the counting for us. So, instead we need to do two things: create a table with all genres and their frequency, and use this table to plot the genres by the frequency we computed # Step 1: The frequency table only imdb_top_250 %&gt;% count(genre_01) ## # A tibble: 11 √ó 2 ## genre_01 n ## &lt;fct&gt; &lt;int&gt; ## 1 Action 40 ## 2 Adventure 20 ## 3 Animation 24 ## 4 Biography 22 ## 5 Comedy 23 ## 6 Crime 38 ## 7 Drama 72 ## 8 Film-Noir 1 ## 9 Horror 3 ## 10 Mystery 4 ## 11 Western 3 # Step 2: Plotting a barplot based on the frequency table imdb_top_250 %&gt;% count(genre_01) %&gt;% ggplot(aes(x = genre_01, y = n)) + geom_col() + # Use geom_col() instead of geom_bar() ggtitle(&quot;Most popular movie genres&quot;) + xlab(&quot;movie genre&quot;) + ylab(&quot;frequency&quot;) + coord_flip() #Step 3: Sort the plot by frequency, i.e. by &#39;n&#39; imdb_top_250 %&gt;% count(genre_01) %&gt;% ggplot(aes(x = reorder(genre_01, n), y = n)) + # Use &#39;reorder()&#39; geom_col() + ggtitle(&quot;Most popular movie genres&quot;) + xlab(&quot;movie genre&quot;) + ylab(&quot;frequency&quot;) + coord_flip() Step 3 is the only code you need to create the desired plot. The other two steps are a mean to demonstrate how one can slowly built up this plot, step-by-step. You might have noticed that I used dplyr to chain all these functions together and therefore it was not necessary to specify the dataset in ggplot(). There are also two new functions we had to use: geom_col() and reorder(). The functions geom_col() and geom_bar() can be confusing. The easiest way to remember how to use them is: If you use a frequency table to create your barplot, use geom_col, if not, use geom_bar(). The function geom_col() requires that we specify a y-axis (our frequency scores), while geom_bar() does not. In many cases, when creating plots you have to perform two steps: generate the statistics you want to plot, e.g.¬†a frequency table, and plot the data via ggplot() Now you have learned the fundamentals of plotting in R. Throughout the next chapters we will create a lot more plots. They all share the same basic structure, but we will use different ‚Äògeoms‚Äô to describe our data. By the end of this book, you will have accrued enough experience in plotting in R that it will feel like second nature. If you want to deepen your knowledge of ggplot, you should take a look at the book ‚Äòggplot: Elegant Graphics for Data Analysis‚Äô or ‚ÄòR Graphics Cookbook‚Äôwhich moves beyond ggplots. Apart from that, you can also find fantastic packages which extend the range of ‚Äògeoms‚Äô you can use in the ‚Äòggplot2 extensions gallery‚Äô. 8.2 Central tendency measures: Mean, Median, Mode The mean, median and mode (the 3 Ms), are all measures of central tendency, i.e.¬†they provide insights into how our data is distributed. All three of these measures summarise our data/variable by a single score which can be helpful, but sometimes also terribly misleading. 8.2.1 Mean The mean is likely the most known descriptive statistics and, at the same time, a very powerful and influential one. For example, the average ratings of restaurants on Google might influence our decision on where to eat out. Similarly, we might consider the average rating of movies to decide which one to watch in cinema with friends. What we casually refer to as the ‚Äòaverage‚Äô is equivalent to the ‚Äòmean.‚Äô In R it is simple to compute the mean using the function mean(). We used this function in Chapter 5.3 and Chapter 7.7 already. However, we have not looked at how we can plot the mean. Assume, we are curious to know how successful movies are in each of the genres. The mean could be a good starting point to answer this question, because it provides the ‚Äòaverage‚Äô success of movies in a genre. The simplest approach to investigate this is to use a bar plot, like in Chapter 8.1. We first create a tibble that contains the means of gross_in_m for each genre in genre_01. Then we use this table to plot a bar plot with geom_col(). imdb_top_250 %&gt;% # Group data by genre group_by(genre_01) %&gt;% # Compute the mean for each group (remove NAs via na.rm = TRUE) summarise(mean_earnings_in_m = mean(gross_in_m, na.rm = TRUE)) %&gt;% # Create the plot ggplot(aes(x = genre_01, y = mean_earnings_in_m)) + geom_col() + coord_flip() It appears as if Action and Animation are far ahead of the rest. On average, both make around 200 million per movie. Adventure ranks third with only around 70 million. We can retrieve the exact earnings by removing the plot from the above code. imdb_top_250 %&gt;% group_by(genre_01) %&gt;% summarise(mean_earnings_in_m = mean(gross_in_m, na.rm = TRUE)) %&gt;% arrange(desc(mean_earnings_in_m)) ## # A tibble: 11 √ó 2 ## genre_01 mean_earnings_in_m ## &lt;fct&gt; &lt;dbl&gt; ## 1 Action 203. ## 2 Animation 189. ## 3 Adventure 73.9 ## 4 Biography 57.9 ## 5 Drama 52.9 ## 6 Crime 49.6 ## 7 Mystery 48.4 ## 8 Horror 41.6 ## 9 Comedy 33.2 ## 10 Western 8.81 ## 11 Film-Noir 0.45 In the last line I used a new function called arrange(). It allows us to sort rows in our dataset by a specified variable (i.e.¬†a column). By default, arrange() sorts values in ascending order, which would put the top genre last. Therefore, we have to use another function to change the order to descending with desc(). Now the top genre is listed at the top. Based on this result we might believe that Action and Animation movies are the most successful genres. However, we have not taken into account how many movies there are in each genre. Consider the following example: # Assume there are 2 Action movies in the top 250 2 * 203 ## [1] 406 # Assume there are 10 Drama movies in the top 250 10 * 53 ## [1] 530 Thus, the ‚Äòmean‚Äô alone might not be a sufficient indicator. It can tells us which genre is most successful based on a single movie, but we also should consider how many movies there are in each genre. Let‚Äôs add the number of movies (n) in each genre to our table. imdb_top_250 %&gt;% group_by(genre_01) %&gt;% summarise(mean_earnings_in_m = mean(gross_in_m, na.rm = TRUE), n = n()) %&gt;% arrange(desc(mean_earnings_in_m)) ## # A tibble: 11 √ó 3 ## genre_01 mean_earnings_in_m n ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 Action 203. 40 ## 2 Animation 189. 24 ## 3 Adventure 73.9 20 ## 4 Biography 57.9 22 ## 5 Drama 52.9 72 ## 6 Crime 49.6 38 ## 7 Mystery 48.4 4 ## 8 Horror 41.6 3 ## 9 Comedy 33.2 23 ## 10 Western 8.81 3 ## 11 Film-Noir 0.45 1 Our interpretation might slighlty change based on these findings. There are considerably more movies in the genre Drama then in Action or Animation. We already plotted the frequency of movies per genre in Chapter 8.1. Accordingly, we would have to think that Drama turns out to be the most successful genre. As a final step, we can plot the sum of all earnings per genre as yet another indicator for the ‚Äòmost successful genre.‚Äô imdb_top_250 %&gt;% filter(!is.na(gross_in_m)) %&gt;% group_by(genre_01) %&gt;% summarise(sum_gross_in_m = sum(gross_in_m)) %&gt;% ggplot(aes(x = genre_01, y = sum_gross_in_m)) + geom_col() + coord_flip() Theses results confirm that the Action genre made the most money out of all genres covered by the top 250 IMDb movies. I am sure you are curious to know which action movie contributed the most to this result. We can achieve this easily by using functions we already know. imdb_top_250 %&gt;% select(title, genre_01, gross_in_m) %&gt;% filter(genre_01 == &quot;Action&quot;) %&gt;% arrange(desc(gross_in_m)) %&gt;% top_n(5) ## Selecting by gross_in_m ## # A tibble: 5 √ó 3 ## title genre_01 gross_in_m ## &lt;chr&gt; &lt;fct&gt; &lt;dbl&gt; ## 1 Avengers: Endgame Action 858. ## 2 Avengers: Infinity War Action 679. ## 3 The Dark Knight Action 535. ## 4 The Dark Knight Rises Action 448. ## 5 Jurassic Park Action 402. Avengers: Endgame and Avengers: Infinity war rank the highest out of all Action movies. Two amazing movies if you are into Marvel comics. In the last line I sneaked in another new function from dplyr called top_n(). This function allows us to pick any given number of rows from the top. If you have many rows in your dataset (remember there are 40 action movies), you might want to be ‚Äòpicky‚Äô and report only the top 3, 4 or 5. In conclusion, the mean is helpful in understanding how each individual movie on average performed across different genres. However, the mean alone provides a rather incomplete picture. Thus, we need always look at means in context of other information we have to gain a more comprehensive insight into our data. 8.2.2 Median The ‚Äòmedian‚Äô is the little, lesser known and used brother of the ‚Äòmean.‚Äô However, it can be a very powerful indicator for central tendency, because it is not so much affected by outliers. With outliers I mean observations that lie way beyond or below the average observation in our dataset. Let‚Äôs inspect the Action genre more closely and see how each movie in this category performed relative to each other. We first filter() our dataset to only show movies in the genre Action and also remove responses that have no value for gross_in_m. imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot; &amp; !is.na(gross_in_m)) %&gt;% ggplot(aes(x = reorder(title, gross_in_m), y = gross_in_m)) + geom_col() + coord_flip() Avengers: Endgame and Avengers: Infinity War are far ahead of any other movie. We can compute the mean with and without these two movies. # Mean earnings for Action genre with Avengers movies imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot;) %&gt;% summarise(mean = mean(gross_in_m, na.rm = TRUE)) ## # A tibble: 1 √ó 1 ## mean ## &lt;dbl&gt; ## 1 203. # Mean earnings for Action genre with Avengers movies imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot; &amp; title != &quot;Avengers: Endgame&quot; &amp; title != &quot;Avengers: Infinity War&quot;) %&gt;% summarise(mean = mean(gross_in_m, na.rm = TRUE)) ## # A tibble: 1 √ó 1 ## mean ## &lt;dbl&gt; ## 1 170. The result is striking. Without these two movies, the Action genre would have less earning per movie than the Animiation genre. However, if we computed the median instead, we would not notice such a huge difference in results. This is due to the fact that the median sorts a dataset, e.g.¬†by gross_in_m and then picks the value that would cut the data into two equally large halves. It does not matter which value is the highest or lowest in our dataset, what matters is the value that is ranked right in the middle of all values. # Median earnings for Action genre with Avengers movies imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot;) %&gt;% summarise(median = median(gross_in_m, na.rm = TRUE)) ## # A tibble: 1 √ó 1 ## median ## &lt;dbl&gt; ## 1 180. # Median earnings for Action genre with Avengers movies imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot; &amp; title != &quot;Avengers: Endgame&quot; &amp; title != &quot;Avengers: Infinity War&quot;) %&gt;% summarise(median = median(gross_in_m, na.rm = TRUE)) ## # A tibble: 1 √ó 1 ## median ## &lt;dbl&gt; ## 1 163. Both medians are much closer to each other, showing how much better suited the median is in our case. In general, when we report means, it is advisable to report the median as well. If a mean and median differ substantially, it could mean your data ‚Äòsuffers‚Äô from outliers. So we have to detect them and think about whether we should remove them for further analysis. We can visualise medians using boxplots. Boxplots are a very effective tool to show how your data is distributed in one single data visualisation and it shows more than just the mean. It also shows the spread of your data (see Chapter @ref()). imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot; &amp; !is.na(gross_in_m)) %&gt;% ggplot(aes(gross_in_m)) + geom_boxplot() To interpret this boxplot consider the Figure ??. [insert boxplot explanation figure here] The boxplot shows that we have apparently one observation that is an outlier, which is likely Avengers: Endgame, but what happened to the over Avengers movie? Is it no an outlier too? It seems we need some more information. We can overlay another geom_ on top to visualise where exactly each movie lies on this boxplot. We can represent each movie as a point by using geom_point(). This function requires us to define the values for the x and y axis. Here it makes sense to set y = 0 which aligns all the dots in the middle of the boxplot. imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot; &amp; !is.na(gross_in_m)) %&gt;% ggplot(aes(gross_in_m)) + geom_boxplot() + geom_point(aes(y = 0, colour = &quot;red&quot;), show.legend = FALSE) To make the dots stand out more I changed the colour to \"red\". By adding the colour (color also works) attribute ggplot would automatically generate a legend. Since we do not need it we can specify it directly in the geom_point() function. If you prefer the legend, just remove show.legend = FALSE. The two dots on the right are the two Avengers movies. This plot also nicely demonstrates why boxplots are so popular and helpful: They provide so many insights, not only into the central tendency of a variable, but also highlights outliers and, more generally, gives a sense of the spread of our data (more about this in Chapter @ref()). The median is an important descriptive and diagnostic statistic and should be included in most empirical quantitative studies. 8.2.3 Mode Finally, the ‚Äòmode,‚Äô indicates which value is the most frequently occurring value for a certain variable. For example, we might be interested in knowing which IMDb rating was most frequently awarded to the top 250 movies. When trying to compute the mode in R, we quickly run into a problem, because there is no function available to do this straight away unless you search for a package that does it for you. However, before you start searching, let‚Äôs reflect on what the mode does and why we can find out the mode without additional packages or functions. The mode is based on the frequency of the occurrence of a value. Thus, the most frequently occurring value would be the one that is listed at the top of a frequency table. We have already created several frequency tables in this book and we can create another one to find the answer to our question. imdb_top_250 %&gt;% count(imdb_rating) ## # A tibble: 12 √ó 2 ## imdb_rating n ## &lt;dbl&gt; &lt;int&gt; ## 1 8.1 80 ## 2 8.2 45 ## 3 8.3 42 ## 4 8.4 29 ## 5 8.5 22 ## 6 8.6 14 ## 7 8.7 5 ## 8 8.8 5 ## 9 8.9 3 ## 10 9 3 ## 11 9.2 1 ## 12 9.3 1 We can also easily visualise this frequency table in the same way as before. In order to make the plot a bit more ‚Äòfancy,‚Äô we can add labels to the bar which reflect the frequency of the rating. We need to add the attribute label and also add a geom_text() layer to display them. Because the numbers would overlap with the bars, I ‚Äònudge‚Äô the labels up by 4 units on the y axis. imdb_top_250 %&gt;% count(imdb_rating) %&gt;% ggplot(aes(imdb_rating, n, label = n)) + geom_col() + geom_text(nudge_y = 4) The frequency table and the plot reveal that the mode for imdb_rating is 8.1. In addition, we also get to know how often this rating was applied, i.e.¬†80 times. This provides much more information then receiving a single score and helps to better interpret the importance of the mode as an indicator for central tendency. Consequently, there is generally no need to compute the mode if you can have a frequency table instead. Still, if you are keen to have a function that computes the mode, you will have to write your own function, e.g.¬†as shown in this post on stackeroverflow.com or search for a package that coded one already. As a final remark, it is also possible that you can find two or more modes in your data. For example, if the rating 8.1 appears 80 times and the rating 9.0 appears 80 times, both would be considered to a mode. 8.3 Indicators and visualisations to examine the spread of data Understanding how your data is spread out is important to get a better sense of what your data is composed of. We already touched upon the notion of spread in Chapter 8.2.2 through plotting a boxplot. The spread of data provides insights into how homogeneous or heterogeneous the responses of our participants are. In the following we will cover some essential techniques to investigate the spread of your data and investigate whether our variables are normally distributed, which is often an important assumption for certain analytical techniques. In addition, we will aim to identify outliers which could be detrimental to subsequent analysis and significantly affect our modelling and testing in later stages. 8.3.1 Boxplot: So much information in just one box The boxplot is a staple in visualising descriptive statistics. If offers so much information in just a single plot that it might not take much to convince you that it has become a very popular way to show the spread of data. For example, we might be interested to know how long most movies run. Our gut feeling might tell us that most movies are probably around 2 hours long. One approach to find out is a boxplot, which we used before. # Text for annotations longest_movie &lt;- imdb_top_250 %&gt;% filter(runtime_min == max(runtime_min)) %&gt;% select(title) shortest_movie &lt;- imdb_top_250 %&gt;% filter(runtime_min == min(runtime_min)) %&gt;% select(title) # Create the pot imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_boxplot() + annotate(&quot;text&quot;, label = glue::glue(&quot;{longest_movie} ({max(imdb_top_250$runtime_min)} min)&quot;), x = 310, y = 0.05, size = 2.5) + annotate(&quot;text&quot;, label = glue::glue(&quot;{shortest_movie} ({min(imdb_top_250$runtime_min)} min)&quot;), x = 45, y = 0.05, size = 2.5) Figure 8.1: A boxplot The results indicate that most movies are between 100 to 150 minutes long. Our intuition was right. We find that one movie is even over 300 minutes long, i.e.¬†over 5 hours: ‚ÄòGangs of Wasseypur.‚Äô In contrast, the shortest movie only lasts 45 minutes and is called ‚ÄòSherlock Jr.‚Äô I added annotations using annotate() to highlight these two movies in the plot. A very useful package for annotations is glue, which allows to combine text with data. So, instead of looking up the titles of the longest and shortest movie, I used the filter() and select() functions to find them automatically. This has the great advantage that if I wanted to update my data, the name of the longest movie might change. However, I do not have to look it up again by hand. As we can see from our visualisation, both movies would also count as outliers in our dataset (see Chapter 9.5.2. 8.3.2 Histogram: Do not mistake it as a bar plot Another frequently used approach to show the spread (or distribution) of data is the histogram. The histogram easily gets confused with a bar plot. However, you would be very mistaken to assume that they are the same. Some key differences between these two types of plots is summarised in Table 8.1. Table 8.1: Histogram vs bar plot Histogram Bar plot Used to show the distribution of non-categorical data Used for showing the frequency of categorical data, i.e.¬†factors Each bar (also called ‚Äòbin‚Äô) represents a group of observations. Each bar represents one category (or level) in our factor. The order of the bars is important and cannot/should not be changed. The order of bars is arbitrary and can be reordered if meaningful. To make this difference even clearer, let‚Äôs overlap a bar plot with a histogram for the same variable. imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_histogram() + geom_bar(aes(fill = &quot;red&quot;), show.legend = FALSE) ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. There are a couple of important observations to be made: The bar plot has much shorter bars, because each bar represents the frequency of a single unique score. Thus, the runtime of 151 is represented as a bar as is the runtime of 152. Only identical observations are grouped together. As such, the bar plot is based on a frequency table, similar to what we computed before. In contrast, the histogram‚Äôs ‚Äòbars‚Äô are higher because they group together individual observations based on a specified range, e.g.¬†one bar might represent movies that have a runtime between 150-170 minutes. These ranges are commonly called bins. We can control the number of bars in our histogram using the bins attribute. ggplot even reminds us in a warning that we should adjust it to represent more details in the plot. Let‚Äôs experiment with this setting to see how it would look like with different numbers of bins. imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_histogram(bins = 5) + geom_bar(aes(fill = &quot;red&quot;), show.legend = FALSE) imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_histogram(bins = 20) + geom_bar(aes(fill = &quot;red&quot;), show.legend = FALSE) imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_histogram(bins = 60) + geom_bar(aes(fill = &quot;red&quot;), show.legend = FALSE) imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_histogram(bins = 300) + geom_bar(aes(fill = &quot;red&quot;), show.legend = FALSE) As becomes obvious, if we select a large enough number of bins, we can achieve the same result as a bar plot. This is the closest a bar plot can become to a histogram, i.e.¬†if you define the number of bins in such a way that each observation is captured by one bin. While theoretically possible, practically this rarely makes much sense. We use histograms to judge whether our data is normally distributed. A normal distribution is often a requirement for assessing whether we can run certain types of analyses or not (for more details see Chapter 9.3. In short: It is very important to know about it in advance. The shape of a normal distribution looks like a bell (see Figure 8.2). If our data is equal to a normal distribution we find that the mean and the median are the same value, and can conclude that the mean is a good representation for our data/variable. Figure 8.2: A normal distribution Let‚Äôs see whether our data is normally distributed using the histogram we already plotted and overlay a normal distribution. The coding for the normal distribution is a little more advanced. Do not worry if you cannot fully decipher its meaning just yet. To draw such a reference plot we need to: compute the mean() of our variable, compute the standard deviation sd() of our variable (see Chapter 8.3.6, use the function geom_func() to plot it and, define the function fun as dnorm, which stands for ‚Äònormal distribution.‚Äô More important than understanding how the computational side works, is the aim of this task: we try to compare our distribution with a normal one. imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_histogram(aes(y = ..density..), bins = 30) + # This part creates a normal curve based on the mean # and standard deviation of our data geom_function(fun = dnorm, n = 103, args = list(mean = mean(imdb_top_250$runtime_min), sd = sd(imdb_top_250$runtime_min)), colour = &quot;red&quot;) However, there are two problems if we use histograms in combination with a normal distribution reference plot: First, the y axis needs to be transformed to fit the normal distribution (which is a density plot and not a histogram). Second, the shape of our histogram is affected by the number of bins we have chosen, which is an arbitrary choice we make. Besides, the lines of code might be tough to understand, because we have to ‚Äòhack‚Äô the visualisation to make it work. There is, however, a better way to do this: Density plots. 8.3.3 Density plots: Your smooth histograms Density plots are a special form of the histogram. It uses ‚Äòkernel smoothing,‚Äô which turns our blocks into a smoother shape. Better than trying to explain what it does, it might help to see it. We use the same data but replace geom_histogram() with geom_density(). # Ingredients for our normality reference plot mean_ref &lt;- mean(imdb_top_250$runtime_min) sd_ref &lt;- sd(imdb_top_250$runtime_min) imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_density() + geom_function(fun = dnorm, n = 103, args = list(mean = mean_ref, sd = sd_ref), colour = &quot;red&quot;) Figure 8.3: Density plot vs normal distribution For density plots we can aslo define how big the bins are which make the plot more or less smooth. After all, the density plot is a histogram, but the transitions from one bin to the next are ‚Äòsmoothed.‚Äô Here is an example of how different bw settings affect the plot. # Ingredients for our normality reference plot mean_ref &lt;- mean(imdb_top_250$runtime_min) sd_ref &lt;- sd(imdb_top_250$runtime_min) # bw = 18 imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_density(bw=18) + geom_function(fun = dnorm, n = 103, args = list(mean = mean_ref, sd = sd_ref), colour = &quot;red&quot;) + ggtitle(&quot;bw = 18&quot;) # bw = 3 imdb_top_250 %&gt;% ggplot(aes(runtime_min)) + geom_density(bw=3) + geom_function(fun = dnorm, n = 103, args = list(mean = mean_ref, sd = sd_ref), colour = &quot;red&quot;) + ggtitle(&quot;bw = 18&quot;) The benefits of the density plot in this situation are obvious: It is much easier to see whether our data is normally distributed or not when compared to a reference plot. However, we still might struggle to determine normality just by these plots, because it depends on how high or low we set bw. 8.3.4 Violin plot: Your smooth boxplot If a density plot is the sibling of a histogram, the violin plot would be the sibling of a boxplot, but the twin of a density plot. Confused? If so, then let‚Äôs use the function geom_volin() to create one. imdb_top_250 %&gt;% ggplot(aes(x = runtime_min, y = 0)) + geom_violin() Looking at our plot it becomes evident where the violin plot got its name from, i.e.¬†its shape. The reason why it also a twin of the density plot becomes clear when we only plot half of the violin. imdb_top_250 %&gt;% ggplot(aes(x = 0, y = runtime_min)) + see::geom_violinhalf()+ coord_flip() It looks exactly like the density plot we plotted earlier (see Figure 8.3. The interpretation largely remains the same to a density plot as well. The relationship between the boxplot and the violin plot lies in the symmetry of the violin plot. At this point, it is fair to say that we enter ‚Äòfashion‚Äô territory. It is really up to your taste which visualisation you prefer, because they are largely similar, but offer nuances that some data sets might require. Lastly, I cannot finish this chapter without sharing with you one of the most popular uses of half-violin plots: The rain cloud plot. It is a combination of a dot plot with a density plot. Each dot represents a movie in our dataset. This creates the appearance of a cloud with rain drops. There are several packages available that can create such a plot. Here I used the see package. imdb_top_250 %&gt;% filter(genre_01 == &quot;Action&quot; | genre_01 == &quot;Drama&quot;) %&gt;% ggplot(aes(x = genre_01, y = imdb_rating, fill = genre_01)) + see::geom_violindot(fill_dots = &quot;blue&quot;, size_dots = 0.2) + see::theme_modern() + coord_flip() 8.3.5 QQ plot: A ‚Äòcute‚Äô plot to check for normality in your data The QQ plot is an alternative to comparing distributions to a normality curve. Instead of a curve, we plot a line which represents the quantiles of our data against the quantiles of a normal distribution. The term ‚Äòquantile‚Äô can be somewhat confusing, especially after learning about the boxplot, which shows quartiles. There is a relationship between these terms. Consider the following comparison: \\(1^{st}\\) Quartile = \\(25^{th}\\) percentile = 0.25 quantile \\(2^{nd}\\) Quartile = \\(50^{th}\\) percentile = 0.50 quantile = median \\(3^{rd}\\) Quartile = \\(75^{th}\\) percentile = 0.75 quantile With these definitions out of the way, let‚Äôs plot some quantiles against each other. imdb_top_250 %&gt;% ggplot(aes(sample = runtime_min)) + geom_qq() + geom_qq_line(colour = &quot;red&quot;)+ annotate(&quot;text&quot;, label = &quot;The 5h long movie&quot;, x = 2.5, y = 308, size = 3) The function geom_qq() is responsible for creating the dots, while geom_qq_line creates a reference for a normal distribution. The reference line is drawn in such a way that it touches the quartiles of our distribution. Ideally, we would want that all dotes are firmly aligned with each other. Unfortunately, this is not the case in our dataset. At the top and at the bottom we have points that deviate quite far from a normal distribution. Remember the five hour long movie? It is very far away from the rest of the other movies in our dataset. 8.3.6 Standard deviation: Your average deviation from the mean I left the most commonly reported statistics for the spread of data last. The main reasons for this lies in the fact that one easily jumps ahead to look at the standard deviation without ever considering plotting the distribution in the first place. Similar to the mean and other numeric indicators, they could potentially convey the wrong impression. Nevertheless, the standard deviation is an import measure. To understand what the standard deviation is, we can consider the following visualisation: runtime_mean &lt;- mean(imdb_top_250$runtime_min) imdb_top_250 %&gt;% select(title, runtime_min) %&gt;% ggplot(aes(x = title, y = runtime_min)) + geom_point() + geom_hline(aes(yintercept = runtime_mean, colour = &quot;red&quot;), show.legend = FALSE) + # Making the plot a bit more pretty theme(axis.text.x = element_blank(), # Removes movie titles panel.grid.major = element_blank(), # Removes grid lines panel.background = element_blank() # Turns background white ) + ylab(&quot;run time&quot;) + xlab(&quot;movies&quot;) The red line represent the mean runtime for all movies in the dataset, which is 129 minutes. We notice that the points are falling around the mean, but not really directly on it. In other words, there are not many movies that are about 129 minutes long. We make this visualisation even more meaningful if we sorted the movies by their runtime. We can also change the shape of the dots (see also Chapter 10 by using the attribute shape. This helps to plot many dots without having them overlap. imdb_top_250 %&gt;% select(title, runtime_min) %&gt;% ggplot(aes(x = reorder(title, runtime_min), y = runtime_min)) + geom_point(shape = 124) + geom_hline(aes(yintercept = runtime_mean, colour = &quot;red&quot;), show.legend = FALSE) + theme(axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.background = element_blank() ) + ylab(&quot;run time&quot;) + xlab(&quot;movies&quot;) As we can see, there is only a small fraction of movies that are close to the mean. If we now consider the distance of each dot from the red line, we know how much each dot, i.e.¬†each movie, deviates from the mean. The standard deviation tells us how much the runtime deviates on average. To be more specific, to compute the standard deviation by hand you would: compute the difference between each observed value of runtime_min and the mean of runtime_min in your dataset, which is also called ‚Äòdeviance,‚Äô i.e.¬†\\(deviance = runtime\\_min - mean_{all\\ movies}\\) square the deviance to turns all scores into positive ones, i.e.¬†\\(deviance_{squared} = (deviance)^2\\), then we take the sum of all deviations (also known as ‚Äòsum of squared errors‚Äô) and divide it by the number of movies minus 1, which results in the ‚Äòvariance,‚Äô i.e.¬†i.e.¬†\\(variance = \\frac{\\sum(deviations_{squared})}{250-1}\\). The variance reflects the average dispersion of our data. Lastly, we take the square root of this score to obtain the standard deviation, i.e.¬†\\(sd = \\sqrt{variance}\\). While the deviation and variance are interesting to look at, the standard deviation has the advantage that it provides us with the average deviation (often also called error) based on the units of measurement of our variable. Thus, it is much easier to interpret its size. We could compute this by hand if we wanted, but it is much simpler to use the functionsd() to achieve the same. The result shows that movies tend to be about 32 minutes longer or shorter than the average movie. This seems quite long. sd(imdb_top_250$runtime_min) ## [1] 32.63701 However, we have to be aware that this score is also influenced by the outliers we detected before. As such, if standard deviations in your data appear quite large, it likely is due to outliers and you should investigate further. Needless to say, plotting your data will undoubtedly help to diagnose any outliers. "],["sources-of-bias.html", "9 Sources of bias: Outliers, normality and other ‚Äòconundrums‚Äô 9.1 Linearity and additivity 9.2 Independence 9.3 Normality 9.4 Homogeneity of variance (homoscedasticity) 9.5 Outliers and how to deal with them", " 9 Sources of bias: Outliers, normality and other ‚Äòconundrums‚Äô library(tidyverse) library(r4np) library(patchwork) ‚ÄòBias‚Äô in your analysis is hardly ever a good thing, unless you are qualitative researcher. No matter whether you consider it as something positive or negative, we certainly have to be aware of issues that could hinder us of performing a certain type of analysis. All of the statistical computations that we discuss in the following chapters can easily be affected by different sources of bias. The lack of certain biases can be even an assumption of particular statistical tests. Thus, violating these assumptions would imply that the analytical technique we use will produce wrong results, i.e.¬†biased results. Field (2013) summarises three main assumptions we have to consider: Linearity and additivity, Independence, Normality Homogeneity of variance, i.e.¬†homoscedasticity, Most parametric tests require that all assumptions are met. If this is not the case we have to use alternative approaches, i.e.¬†non-parametric tests. The distinction is of importance, since parametric and non-parametric tests are based on different computational methods and can lead to vastly different results. Lastly, Field (2013) also mentions outliers as an important source of bias. Irrespective of whether your data fulfils the assumptions for parametric tests, outliers tend to be a major problem. They usually lead to misinterpretations of our findings. We will also cover how we can identify and handle such outliers in our data at the end of this chapter. 9.1 Linearity and additivity The assumption of linearity postulates that the relationship of variables represents a straight line and not a curve or any other shape. Figure ?? depicts examples of how two variables could be related to each other. Only the first one demonstrates a linear relationship and all other plots would represent a violation for parametric tests. Figure 9.1: Examples of linear and non-linear relationship of two variables Data visualisations are particularly useful to identify whether variables are related to each other in a linear fashion. The examples above were all created with geom_point(), which creates a dot plot that maps the relationship between two variables. In the Chapter 10 we will look more closely at the relationship of two variables in the form of correlations, which measure the strength of a linear relationship between variables. Additivity is given when the effects of all independent variables can be added up to obtain the total effect they have on a dependent variable. In other words, the effect that multiple variables have on another variable can be added up to reflect their total effect. If we assume that we have a dependent variable \\(Y\\) which is affected by other (independent) variables \\(X\\), we could summarise additivity and linearity as a formula: \\(Y = \\beta_{1} * X_1 + \\beta_{2} * X_{2} + ... + \\beta_{n} * X_{n}\\) The \\(\\beta\\) stands for the degree of change a variable \\(X\\) causes in \\(Y\\). Or, in simpler terms, \\(\\beta\\) reflects the impact a independent variable has on the dependent variable. We will return to this equation in Chapter 12, were we try to create a linear model via regression. 9.2 Independence The notion of independence is an important one. It assumes that the each observation in our dataset is independent from other observations. For example, imagine my wife Fiona and I take part in a survey which asks us to rank movies by how much we like them. Each of us has to complete the ranking by themselves, but since we both sit in the same living room, we start chatting about these movies. By doing so, we influence each others rankings and might even agree on the same ranking. Thus, our scores are not independent from each other. If we were both sitting in our respective offices and rank these movies independently from each other, the rankings could potentially still be very similar to each other, but this time the observations are independent from each other. There is no statistical measurement or plot that can tell us whether observations are independent or not. Ensuring independence is a matter of data collection and not data analysis. Thus, it depends on how you designed your experiment, when and where you ask participants to complete a survey, etc. Still, this criterion should not be downplayed as being a ‚Äòsoft‚Äô one, just because there is no statistical test, but should remain on your radar throughout the planning and data collection stage of your research. 9.3 Normality We already touched upon the notion of ‚Äònormality‚Äô and ‚Äònormal distributions‚Äô in Chapter 8.3, because it refers to the spread of our data. Figure 9.2 should look familiar by now. Figure 9.2: A normal distribution However, we have yet to understand why it is important that our data follows a normal distribution. Most parametric tests are based on means. For example, if we want to compare two groups with each other, we would compute the mean for each of them and then see whether their means differ from each other in a significant way. Of course, if our data is not very normally distributed, means are a poor reference point for the majority of the observations in this group. We already know that means are heavily affected by outliers, but even without outliers, the mean could be a poor choice. Considering all three plots, we notice that neither the median nor the mean by themselves are a reliable indicator for normality. Fig A and Fig C both show that the median and mean are almost identical, but only Fig A shows a normal distribution. In fact, the median and mean in Fig C are not reflective for the average observation in this dataset. Most scores lie below and above the mean/median. This type of distribution hints at two sub-groups in our dataset, for example male versus female participants. Therefore, when we analyse the normality of our data, we usually are not interested in the normality of a single variable, but the normality of the sampling distribution. However, we cannot directly assess the sampling distribution in most cases. As such, we often revert to testing the normality of our data. There also instances were we would not expect a normal distribution to begin with. Consider the following plots: Figure 9.3: Two normal distributions in one dataset The first plot clearly shows that data is not normally distributed. If anything, it looks more like the back of a camel. If we identify distributions that look remotely like this, we can assume that there must be another variable that helps explain why there are two peaks in our distribution. The plot below reveals that gender appears to play an important role. Drawing the distribution for each subset of our data reveals that income is now normally distributed for each group and that these groups have two different means. Thus, solely focusing on normal distributions for a single variable would not be meaningful if you do not consider the impact of other variables. Determining whether data is normally distributed can be very challenging when only inspecting plots, e.g.¬†historgrams, density plots or QQ plots. Luckily, there is also a statistical method to test whether our data is normally distributed: The Shapiro-Wilk test. This test compares our distribution with a normal distribution (like in our plot) and tells us whether our distribution is significantly different from it. Thus, if the test is not significant the distribution of our data is not significantly different from a normal distribution, or in simple terms: It is normally distributed. We can run the test in R as follows for the dataset that underpins Fig A above shapiro.test(data$income) ## ## Shapiro-Wilk normality test ## ## data: data$income ## W = 0.94586, p-value = 0.5916 According to this result, we can confirm that the data is normally distributed, because it is not significantly different from it (\\(p &gt; 0.05\\)). We look at significance and its meaning more thoroughly in the chapter on correlations (Chapter 10). In conclusion, normality of data is an important pre-test for any of your studies. If we violate the assumption of normality, we will have to fall back to non-parametric tests. However, there is one exception to this rule: The Central Limit Theorem. The Central Limit Theorem postulates that as our sample becomes larger, our sampling distribution becomes more and more normal around the mean of the underlying population. Field (2013) (p.54) refers to a sample of 30 as a common rule of thumb. As such, it is possible to assume normality for larger datasets even though our visualisation and Shapiro-Wilk test tell us otherwise. Admittedly, this raises the question: Can I simply ignore normality and move on with my analysis if my sample is large enough? In short: Yes. This probably also explains why we hardly ever find results from normality tests in journal publications since most Social Science research involves more than 30 participants. However, if you find yourself in a situation where the sample size is smaller, all of the above needs to be check and thoroughly considered. The sample size, however, also has implications with regards to the power of your test/findings (for more details see Chapter @ref()). 9.4 Homogeneity of variance (homoscedasticity) The term ‚Äòvariance‚Äô should sound familiar, because we mentioned it in Chapter 8.3.6 where we looked at the standard deviation, which is derived from the variance. Homogeneity of variance implies that the variance of, for example two subsets of data is equal, or close to being equal. Let‚Äôs take a look how close the observed values are to the mean for the two groups identified in Figure 9.3. data4 %&gt;% ggplot(aes(x = gender, y = income, colour = gender)) + geom_jitter(width = 0.1) + geom_hline(yintercept = group_means$mean[1], color = &quot;red&quot;) + geom_hline(yintercept = group_means$mean[2], color = &quot;turquoise&quot;) Judging by eye, we could argue that the majority of values lies around the mean for each respective group. There are some observations that are a bit further off. Still, using this visualisation, it is tough to truly judge whether the spread is about the same. However, boxplots can help with this, or even better, a boxplot that is reflected by a bar. The package ggdist has a nice plotting function called stat_interval(), which allows us to show a boxplot in the form of a bar. data4 %&gt;% ggplot(aes(x = gender, y = income, group = gender)) + ggdist::stat_interval(aes(y = income), .width = c(0.25, 0.5, 0.75, 1)) + # Let&#39;s add some nice complementary colours into our chart scale_color_manual(values = c(&quot;#4D87B3&quot;, &quot;#A1D6FF&quot;, &quot;#FFDAA1&quot;, &quot;#B3915F&quot;)) If we compare the bars, we can tell that the variance in both groups looks very similar, i.e.¬†the length of the bars appear to be about the same height. If we compared the IQR for both groups, we also find that they are very close to each other. data4 %&gt;% group_by(gender) %&gt;% summarise(iqr = IQR(income)) ## # A tibble: 2 √ó 2 ## gender iqr ## &lt;fct&gt; &lt;dbl&gt; ## 1 male 82.5 ## 2 female 99 However, to test whether the variance between these two groups is truly similar or different, we have to perform a Levene‚Äôs test. The Levene‚Äôs test follows a similar logic as the Shapiro-Wilk test. If the test is significant, i.e.¬†\\(p &lt; 0.05\\), we have to assume that the variances between these groups is significantly different from each other. However, if the test is not significant, then the variances are similar and we can proceed with a parametric test - assuming the other assumptions are not violated. car::leveneTest(gep$age ~ gep$gender) ## Warning in leveneTest.default(y = y, group = group, ...): group coerced to ## factor. ## Levene&#39;s Test for Homogeneity of Variance (center = median) ## Df F value Pr(&gt;F) ## group 2 0.8834 0.4144 ## 297 The Levene‚Äôs test shows that our variances are similar and not different from each other, because \\(p &gt; 0.05\\). Good news if we wanted to continue and perform a group comparison, like in Chapter 11. 9.5 Outliers and how to deal with them In Chapter 8, I referred to outliers many times but never eluded to the aspects of handling them. Dealing with outliers is similar to dealing with missing data. It is not quite as straightforward as one might think. In a first step, we need to determine which values count as an outlier. Aguinis, Gottfredson, and Joo (2013) reviewed 232 journal articles and found that scholars had defined outliers in 14 different ways, used 39 different techniques to detect them and applied 20 different strategies to handle them. It would be impossible to work through all different options in this book. However, I want to offer two options that have been frequently considered in publications in the field of Social Sciences: The standard deviation, and The inter-quartile range. 9.5.1 Detecting outliers using the standard deviation A very frequently used approach to detecting outliers is the use of the standard deviation. Usually, scholars use multiples of the standard deviation to determine thresholds. For example, a value that lies 3 standard deviations above or below the mean could be categorised as an outlier. Unfortunately, there is quite some variability regarding how many multiples of the standard deviation counts as an outlier. Some authors might use 3, others might settle for 2 (see also Leys et al. (2013)). Let‚Äôs stick with the definition of 3 standard deviations to begin with. We can revisit our previous plot and add lines which show the thresholds above and below the mean. # Compute the mean and standard deviation runtime_mean &lt;- mean(imdb_top_250$runtime_min) sd_upper &lt;- runtime_mean + 3 * sd(imdb_top_250$runtime_min) sd_lower &lt;- runtime_mean - 3 * sd(imdb_top_250$runtime_min) # Create our plot imdb_top_250 %&gt;% select(title, runtime_min) %&gt;% ggplot(aes(x = reorder(title, runtime_min), y = runtime_min)) + geom_point(shape = 124) + geom_hline(aes(yintercept = runtime_mean, colour = &quot;red&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = sd_upper, color = &quot;blue&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = sd_lower, color = &quot;blue&quot;), show.legend = FALSE) + theme(axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.background = element_blank() ) + ylab(&quot;run time&quot;) + xlab(&quot;movies&quot;) The results suggests that only very few outliers would be detected if we chose these thresholds. Especially ‚ÄòSherlock Jr.‚Äô the shortest movie in our dataset would not classify as an outlier. How about we choosen two standard deviations instead? # Compute the mean and standard deviation runtime_mean &lt;- mean(imdb_top_250$runtime_min) sd_upper &lt;- runtime_mean + 2 * sd(imdb_top_250$runtime_min) d_lower &lt;- runtime_mean - 2 * sd(imdb_top_250$runtime_min) # Create our plot imdb_top_250 %&gt;% select(title, runtime_min) %&gt;% ggplot(aes(x = reorder(title, runtime_min), y = runtime_min)) + geom_point(shape = 124) + geom_hline(aes(yintercept = runtime_mean, colour = &quot;red&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = sd_upper, color = &quot;blue&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = sd_lower, color = &quot;blue&quot;), show.legend = FALSE) + theme(axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.background = element_blank() ) + ylab(&quot;run time&quot;) + xlab(&quot;movies&quot;) As we would expect, we identify some more movies as being outliers. Still, it feels rather arbitrary to choose a threshold of our liking. Despite its popularity, there are additional problems with this approach: outliers affect our mean and standard deviation too, since we use the mean, we assume that our data is normally distributed, and in smaller samples, this approach might result in not identifying outliers at all (despite their presence) (Leys et al. (2013), p.¬†764) Leys et al. (2013) propose an alternative approach, based on the fact that medians are much less vulnerable to outliers than the mean. Similarly to the standard deviation, it is possible to calculate thresholds using the ‚Äòmedian absolute deviation‚Äô (MAD). Best of all, the function mad() in R does this automatically for us. Leys et al. (2013) suggest to use 2.5 times the MAD as a threshold. However, if we want to compare directly how well this option does against the standard deviation, we should 3 again. # Compute the median and thresholds runtime_median &lt;- median(imdb_top_250$runtime_min) mad_upper &lt;- runtime_median + 3 * mad(imdb_top_250$runtime_min) mad_lower &lt;- runtime_median - 3 * mad(imdb_top_250$runtime_min) # Create our plot imdb_top_250 %&gt;% select(title, runtime_min) %&gt;% ggplot(aes(x = reorder(title, runtime_min), y = runtime_min)) + geom_point(shape = 124) + geom_hline(aes(yintercept = runtime_median, colour = &quot;red&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = mad_upper, color = &quot;blue&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = mad_lower, color = &quot;blue&quot;), show.legend = FALSE) + theme(axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.background = element_blank() ) + ylab(&quot;run time&quot;) + xlab(&quot;movies&quot;) Compared to our previous results, we notice that the median approach was much better in detecting outliers at the upper range of runtim_min. Because the median is not affected so much by the five hour-long movie, the results have improved. Still, we would not classify the outlier at the bottom for the shortest movie in the data. If we chose the criterion of 2.5*MAD, we would also get this outlier (see Figure 9.4). Figure 9.4: Outlier detection via MAD using 2.5 * MAD as a threshold Which approach to choose can be informed by the normality of your data. If your data is normally distributed, the mean and median would be very close to each other and the results from both approach would return very similar results. However, if your data is not normally distributed, it might be better to classify outliers using the median. 9.5.2 Detecting outliers using the interquartile range Another approach to classify outliers is the use of the interquartile range (IQR). This one is used in boxplots and creates the dots at its ends to indicate any outliers. This approach is very easy to implement because the computation of the IQR is simple: \\(IQR = Q_{3}-Q_{1}\\) Therefore, we can create new thresholds for the detection of outliers. For IQR it is common to use ‚Äò1.5 * IQR‚Äô as the lower and upper thresholds. # Compute the median and thresholds runtime_median &lt;- median(imdb_top_250$runtime_min) iqr_upper &lt;- runtime_median + 1.5 * IQR(imdb_top_250$runtime_min) iqr_lower &lt;- runtime_median - 1.5 * IQR(imdb_top_250$runtime_min) # Create our plot imdb_top_250 %&gt;% select(title, runtime_min) %&gt;% ggplot(aes(x = reorder(title, runtime_min), y = runtime_min)) + geom_point(shape = 124) + geom_hline(aes(yintercept = runtime_median, colour = &quot;red&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = iqr_upper, color = &quot;blue&quot;), show.legend = FALSE) + geom_hline(aes(yintercept = iqr_lower, color = &quot;blue&quot;), show.legend = FALSE) + theme(axis.text.x = element_blank(), panel.grid.major = element_blank(), panel.background = element_blank() ) + ylab(&quot;run time&quot;) + xlab(&quot;movies&quot;) As we can tell, the IQR detects much more outliers for our data than any of the previous methods. The outliers we find here are the same as shown in Figure 8.1. For our data it seems that the MAD by Leys et al. (2013) produced the ‚Äòbest‚Äô selection. However, we have to acknowledge that these classifications will always be subjective, because the decision of how we position the thresholds is still depending on the researcher‚Äôs choice. 9.5.3 Removing or replacing outliers Now that we have identified our outliers we are confronted with the question what we should do with them. Similar to missing data (see Chapter 7.6) we can either remove them or replace them with other values. While removal is a fairly simple task, replacing it with other ‚Äòreasonable‚Äô values implies that we need to find techniques to create such values. As you may remember, we were confronted with a similar problem before when we looked into missing data (Chapter 7.6. The same techniques, especially multiple imputation (see Cousineau and Chartier 2010), can be used for such scenarios as well. Irrespective of whether we remove or replace outliers, we somehow need to single them out of the crowd. Since the MAD strategy worked well for our data, we can use the thresholds we defined before, i.e.¬†mad_upper and mad_lower. Therefore, an observation (i.e.¬†a movie) is considered as an outlier if: its value lies above mad_upper, or its value lies below mad_lower It becomes clear that we somehow need to define a condition, because if it is an outlier, it should be labelled as one, if not then it should not be labelled as one. Ideally we want a new column in our dataset which indicates whether a movie is an outlier (i.e.¬†outlier = TRUE) or not (outlier = FALSE). R offers a way for us to express such conditions with the function ifelse(). It has the following structure: ifelse(condition, TRUE, FALSE) Let‚Äôs formulate a sentence that describes our scenario as an ifelse() function: If a movie‚Äôs runtime_min is longer than mad_upper, or if a movie‚Äôs runtime_min is lower than mad_lower, classify this movie as an outlier (i.e.¬†TRUE), otherwise classify this movie as not being an outlier (i.e.¬†FALSE). We already know from Chapter 5.1 how to use logical and arithmetic operators. All we have to do is put them together in one function call. imdb_top_250 &lt;- imdb_top_250 %&gt;% mutate(outlier = ifelse(runtime_min &gt; mad_upper | runtime_min &lt; mad_lower, TRUE, FALSE)) Since we have a classification we can more thoroughly inspect our outliers and see which movies are the ones that are lying outside our defined norm. We can arrange() them by runtime_min. imdb_top_250 %&gt;% filter(outlier == &quot;TRUE&quot;) %&gt;% select(title, runtime_min, outlier) %&gt;% arrange(runtime_min) ## # A tibble: 10 √ó 3 ## title runtime_min outlier ## &lt;chr&gt; &lt;dbl&gt; &lt;lgl&gt; ## 1 Sherlock Jr. 45 TRUE ## 2 The Lord of the Rings: The Return of the King 201 TRUE ## 3 The Godfather: Part II 202 TRUE ## 4 Andrei Rublev 205 TRUE ## 5 Seven Samurai 207 TRUE ## 6 Ben-Hur 212 TRUE ## 7 Lawrence of Arabia 228 TRUE ## 8 Once Upon a Time in America 229 TRUE ## 9 Gone with the Wind 238 TRUE ## 10 Gangs of Wasseypur 321 TRUE The list of movies contains some of the most iconic Hollywood films ever shown on screen. I think we can agree that most of them are truly outside the norm of regular movies, not just in terms of runtime. From here it is simple to remove these movies (i.e.¬†keep the movies that are not outliers) or set their values to NA by writing the following lines of code. We replace the values with NA we can the continue with one of the techniques demonstrated for missing values (Chapter 7.6. # Keep all movies that are not outliers imdb_top_250 %&gt;% filter(outlier == &quot;FALSE&quot;) # Replace values with NA imdb_top_250 %&gt;% mutate(runtime_min = replace(runtime_min, outlier == &quot;TRUE&quot;, NA)) The replace() function is very intuitive to use. It first needs to know where you want to replace a value (runtime_min), then what the condition for replacing is (outlier == \"TRUE\"), and lastly, which value should be put instead of the original one (NA). As you hopefully noticed, understanding your data requires some effort, but it is important to know your data well before proceeding to any further analysis. You can experiment with different data visualisations and design them in a way that best reflect the message you want to get across. For example, because we have now a separate variable which classifies outliers we can do more with our data visualisation than before and dress it up a bit more nicely. colour_pal &lt;- wesanderson::wes_palette(&quot;Darjeeling1&quot;, 11, type = &quot;continuous&quot;) imdb_top_250 %&gt;% ggplot(aes(x = reorder(genre_01, runtime_min), y = runtime_min, colour = genre_01) ) + geom_boxplot(alpha = 0, show.legend = FALSE) + geom_jitter(width = 0.1, size = 0.5, alpha = 0.5, show.legend = FALSE) + scale_color_manual(values = colour_pal) + coord_flip() + theme(panel.background = element_blank())+ xlab(&quot;runtime&quot;) + ylab(&quot;Genre&quot;) + ggtitle(&quot;Distribution of movie runtimes by genre&quot;) References "],["correlations.html", "10 Correlations 10.1 Parametric or non-parametric: That is the question 10.2 Plotting correlations 10.3 Significance: A way to help you judge your findings 10.4 Limitations of correlations", " 10 Correlations Sometimes counting and measuring means, medians and standard deviations is not enough, because they are all based on a single variable. Instead, we might have questions related to the relationship of two or more variables. In this section we will explore how correlations can (and kind of cannot - see Chapter 10.4.3) provide insights into the following questions: Do movie viewers agree with critics regarding the rating of movies? Do popular movies receive more votes from users than less popular movies? Do movies with more votes also make more money? There are many different ways of how one can compute the correlation and it partially depends on the type of data you want to relate. The ‚ÄòPearson‚Äôs correlation‚Äô is by far the most frequently used correlation technique for data that is normally distributed. On the other hand, if data is not normally distributed, we can opt for the ‚ÄòSpearman‚Äôs rank‚Äô correlation. One could argue that the relationship between these two correlations is like the mean (Pearson) to the median (Spearman). Both approaches require numeric values to be computed properly. If our data is ordinal, or worse dichotomous (like a logical variables), we have to opt for different options. Table 10.1: Different ways of computing correlations Correlation Used Pearson Requires variables to be parametric and therefore numeric Spearman Used when data is non-parametric and requires numeric variables Polychoric Used when investigating two ordinal variables Tetrachoric Used when both variables are dichotomous, e.g.¬†‚Äòyes/no,‚Äô ‚ÄòTrue/False.‚Äô Rank-biserial Used when one variable is dichotomous and the other variable is ordinal There are many more variations of correlations, which you can explore on the website of the package we will use in this chapter: correlation. We will primarily focus on Pearson, Spearman and the Chi-Squared test, because they are the most commonly used correlation types in academic publications to understand the relationship between two variables. In addition, we also look at ‚Äòpartial correlations,‚Äô which allow us to introduce a third variable into this mix. 10.1 Parametric or non-parametric: That is the question TODO: ADD SECTION 10.2 Plotting correlations Since correlations only show the relationship between two variables, we can easily put one variable onto the x axis and one variable onto the y axis creating a so-called ‚Äòscatterplot.‚Äô We used the functions to create scatterplots before, i.e.¬†geom_point() and geom_jitter. Let‚Äôs try to answer our first research question, i.e.¬†whether regular movie viewers and critics (people who review movies as a profession) rate the top 250 in the same way. One assumption could be that it does not matter whether you are a regular movie viewer or someone who does it professionally. After all, we are just human beings. A counter thesis could be that critics have a different perspective on movies and might use different evaluation criteria. Either way, we first need to identify the two variables of interest: imdb_rating is based on IMDb users metascore is based on movie critics imdb_top_250 %&gt;% filter(!is.na(metascore)) %&gt;% ggplot(aes(imdb_rating, metascore)) + geom_jitter() + see::theme_modern() The results from our scatterplot are, well, somewhat random. We can see that some movies receive high imdb_ratings as well as high metascores. However, there are also some movies that receive high imdb_ratings, but low metascores. Overall, the points look like they are randomly scattered all over our canvas. The only visible pattern we can notice is that there are more movies at the lower end of the rating system relative to all the movies in the top 250. In fact, ther are only 2 movies which actually received an IMDb rating of over 9. Be aware, geom_jitter() makes it look like there were more than 9!). Since correlations only explain linear relationships, a perfect correlation would be represented by a straight line. Consider the following examples of correlations: A correlation can be either positive or negative and its score (i.e.¬†r in case of Pearson) can range from -1 to 1: -1 defines a perfectly negative correlation, 0 defines no correlation (completely random), and 1 defines a perfectly positive correlation. In other words, the further the score is away from zero, the stronger is the relationship between variables. We also have benchmarks which we can use to asses the strength of a relationship, for example the one by Cohen (1988). The strength of the relationship is also called ‚Äòeffect size.‚Äô Table 10.2 shows the relevant benchmarks. Note that effect sizes are always provided as absolute figures. Therefore, -0.4 would also count as a moderate relationship. Table 10.2: Assessing effect size of relationships according to Cohen (1988) effect size interpretation r &lt; 0.1 very small 0.1 \\(\\leq\\) r &lt; 0.3 small 0.3 \\(\\leq\\) r &lt; 0.5 moderate r \\(\\geq\\) 0.5 large If we compare the plot from our data with the sample plots, we would come to the conclusion that the relationship is weak, and therefore the r must be close to zero as well. We can test this with the Pearson correlation. library(correlation) ## Registered S3 method overwritten by &#39;datawizard&#39;: ## method from ## plot.visualisation_recipe see imdb_top_250 %&gt;% select(imdb_rating, metascore) %&gt;% correlation() ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(214) | p ## ---------------------------------------------------------------- ## imdb_rating | metascore | 0.08 | [-0.06, 0.21] | 1.11 | 0.270 ## ## p-value adjustment method: Holm (1979) ## Observations: 216 Indeed, our analysis reveals that the effect size is very small (r = 0.08 &lt; 0.1). Therefore, critics appear to rate movies differently than regular movie viewers. This triggers an interesting follow-up question: Which movie is the most controversial, i.e.¬†where is the difference between imdb_rating and metascore the highest? We can answer this question with the tools we already know. We create a new variable to subtract the metascore from the imdb_rating and plot it. We have to make sure both scales are the same length. The variable imdb_rating ranges from 0-10, but the metascore ranges from 0-100. As such, I used the percentile score instead by dividing the scores by 10 and 100 respectively. Since plotting 250 movies would have been too much and would also not help us find the answer to our question, I chose arbitrary values to pick only those movies with the highest differences in scores. Feel free to adjust the filter to your liking to see more or less movies. plot &lt;- imdb_top_250 %&gt;% mutate(r_diff = imdb_rating/10 - metascore/100) %&gt;% filter(!is.na(r_diff) &amp; r_diff &gt;= 0.25 | r_diff &lt;= -0.165) plot %&gt;% ggplot(aes(x = reorder(title, r_diff), y = r_diff, label = title)) + geom_col(aes(fill = ifelse(r_diff &gt; 0, &quot;Viewers&quot;, &quot;Critics&quot;))) + geom_text(aes(x = title, y = 0, label = title), size = 2.5, # to adjust the labels of the plot vjust = ifelse(plot$r_diff &gt;= 0, 0.5, 0.5), hjust = ifelse(plot$r_diff &gt;= 0, 1.05, -0.05) ) + coord_flip() + # Cleaning up the plot to make it look more readable and colourful scale_fill_manual(values = c(&quot;#FFCE7D&quot;, &quot;#7DC0FF&quot;)) + theme(axis.title = element_blank(), plot.background = element_blank(), panel.background = element_blank(), axis.text = element_blank(), axis.ticks = element_blank(), legend.title = element_blank() ) Another question we posed at the beginning was: Do popular movies receive more votes from users than less popular movies? Our intuition might say ‚Äòyes.‚Äô More popular movies are likely seen by more people, which makes them more popular. Consequently, the more people have seen a movie, the more likely they might vote for this movie. For less popular movies, the opposite should be true. Let‚Äôs create another scatterplot to find out. imdb_top_250 %&gt;% ggplot(aes(x = imdb_rating, y = votes)) + geom_jitter() + scale_y_continuous(labels = scales::label_number(big.mark = &quot;,&quot;)) The last line of code helps to make the labels on the y axis more readable. The numbers are in the millions and it helps to have the indicators present using label_number() from the scales package. The scatterplot shows a somewhat positive trend. Often, it can be tough to see the trend clearly. In order to improve our plot we can make use of the function geom_smooth(), which can help us draw a straight line that fits our data points the best. We need to set the method for drawing the line to lm, which stands for linear model. Remember, correlations assume a linear relationship between two variables. imdb_top_250 %&gt;% ggplot(aes(x = imdb_rating, y = votes)) + geom_jitter() + geom_smooth(method = &quot;lm&quot;, formula = y ~ x, se = FALSE, colour = &quot;red&quot;) Another problem we face with this plot (and correlations) are extreme values, i.e.¬†outliers. We already know that outliers tend to cause trouble for our analysis (see Chapter 9.5 and in correlations they can affect the strength of relationships. If we compute the the Pearson correlation with and without some of the outliers, the differences are very significant. Be aware, since we work with two variables at the same time, we should consider outliers on both. There our filter() will have to include two conditions. # The correlation with outliers imdb_top_250 %&gt;% select(imdb_rating, votes) %&gt;% correlation() ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(248) | p ## ------------------------------------------------------------------- ## imdb_rating | votes | 0.59 | [0.51, 0.67] | 11.57 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 250 # Define outliers votes_out &lt;- 1.5*IQR(imdb_top_250$votes) + median(imdb_top_250$votes) imdb_r_out &lt;- 1.5*IQR(imdb_top_250$imdb_rating) + median(imdb_top_250$imdb_rating) # The correlation with outliers (based on 1.5 * IQR) imdb_top_250 %&gt;% filter(votes &lt; votes_out &amp; imdb_rating &lt; imdb_r_out) %&gt;% select(imdb_rating, votes) %&gt;% correlation() ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(230) | p ## ------------------------------------------------------------------- ## imdb_rating | votes | 0.31 | [0.19, 0.42] | 4.94 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 232 While both correlations are highly significant (p &lt; 0.01), the drop in r from 0.59 to 0.31 is substantial. When we plot the data again, we can see that the dots are fairly randomly distributed across the plotting area. Thanks to geom_smooth we get an idea of a slight positive relationship between these two variables. imdb_top_250 %&gt;% filter(votes &lt; votes_out &amp; imdb_rating &lt; imdb_r_out) %&gt;% ggplot(aes(x = imdb_rating, y = votes)) + geom_jitter() + geom_smooth(method = &quot;lm&quot;, formula = y ~ x, se = FALSE, colour = &quot;red&quot;) In conclusion, while there is some relationship between the rating and the number of votes, it is by far not as strong as we might have thought, especially after removing outliers, which had a considerable effect on the effect size. 10.3 Significance: A way to help you judge your findings One of the most common pitfalls of novice statisticians is related to the interpretation of what counts as significant and not significant. Most basic tests offer a ‚Äòp value,‚Äô which stands for ‚Äòprobability value.‚Äô The p value can range from 1 (for 100%) to 0 (for 0%) and implies: \\(p = 1\\), there is a 100% chance that the result is a pure coincidence \\(p = 0\\), there is a 0% chance that the results is a pure coincidence, i.e.¬†we can be certain this is not just luck. Technically, we would not find that p is ever truly zero, and instead denote very small p values with p &lt; 0.01 or even p&lt; 0.001. There are also commonly considered thresholds for the p value: \\(p &gt; 0.05\\), the result is not significant. There is chance of 5% that our finding is a pure coincidence. p \\(\\leq 0.05\\) , the result is significant. p \\(\\leq 0.01\\), the result is highly significant. We will cover more about the p value in Chapter 11 and Chapter 12. For now, it is important to know that a significant correlation is one that we should look at more closely. Usually, correlations that nor significant suffer from low effect sizes. However, different samples can lead to different effect sizes and different significant levels. Consider the following examples: ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(2) | p ## ------------------------------------------------------------- ## x | y | 0.77 | [-0.73, 0.99] | 1.73 | 0.225 ## ## p-value adjustment method: Holm (1979) ## Observations: 4 ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(10) | p ## --------------------------------------------------------------- ## x | y | 0.77 | [0.36, 0.93] | 3.87 | 0.003** ## ## p-value adjustment method: Holm (1979) ## Observations: 12 In both examples \\(r = 0.77\\), but the sample sizes are different (4 vs 12) and the p values differ as well. In the first example \\(p = 0.225\\), which means the relationship is not significant, while in the second example, we find that \\(p &lt; 0.01\\) and is therefore highly significant. As a general rule, we find that the bigger the sample, the more likely we find significant results, even though the effect size is small. Therefore, it is important to interpret correlations base on at least three factors: the p value, i.e.¬†significance level the r value, i.e.¬†the effect size, and the sample size. The interplay of all three can help determine whether a relationship is truly important. Therefore, when we include correlation tables in publications, we have to make sure we provide information about all three. It is common that we do not only compute correlations for two variables at a time, instead, we can do this for multiple variables simultaneously. imdb_top_250 %&gt;% select(imdb_rating, metascore, year, votes, gross_in_m) %&gt;% correlation() ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t | df | p ## --------------------------------------------------------------------------- ## imdb_rating | metascore | 0.08 | [-0.06, 0.21] | 1.11 | 214 | 0.539 ## imdb_rating | year | 0.03 | [-0.10, 0.15] | 0.42 | 248 | 0.678 ## imdb_rating | votes | 0.59 | [ 0.51, 0.67] | 11.57 | 248 | &lt; .001*** ## imdb_rating | gross_in_m | 0.21 | [ 0.07, 0.33] | 3.07 | 213 | 0.010** ## metascore | year | -0.41 | [-0.52, -0.30] | -6.63 | 214 | &lt; .001*** ## metascore | votes | -0.25 | [-0.37, -0.12] | -3.76 | 214 | 0.001** ## metascore | gross_in_m | -0.13 | [-0.27, 0.01] | -1.83 | 193 | 0.207 ## year | votes | 0.37 | [ 0.26, 0.47] | 6.29 | 248 | &lt; .001*** ## year | gross_in_m | 0.36 | [ 0.23, 0.47] | 5.58 | 213 | &lt; .001*** ## votes | gross_in_m | 0.56 | [ 0.46, 0.64] | 9.79 | 213 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 195-250 If you have seen correlation tables before, you might find that correlation() does not produce the classic table by default. If you want it to look like the tables in publications, which are more compact but offers less information, you can use the function summary(). imdb_top_250 %&gt;% select(imdb_rating, metascore, year, votes, gross_in_m) %&gt;% correlation() %&gt;% summary() ## # Correlation Matrix (pearson-method) ## ## Parameter | gross_in_m | votes | year | metascore ## --------------------------------------------------------- ## imdb_rating | 0.21** | 0.59*** | 0.03 | 0.08 ## metascore | -0.13 | -0.25** | -0.41*** | ## year | 0.36*** | 0.37*** | | ## votes | 0.56*** | | | ## ## p-value adjustment method: Holm (1979) This table also provides an answer to our final question, i.e.¬†do movies with more votes earn more money. It appears as if this is true, because \\(r = 0.56\\) and \\(p &lt; 0.001\\). In the classic correlation table you also see *. These stand for the difference significant levels: *, i.e.¬†\\(p &lt; 0.05\\) **, i.e.¬†\\(p &lt; 0.01\\) ***, i.e.¬†\\(p &lt; 0.001\\) (although you might find some do not use this as a separate level) In short, the more * there are attached to each value, the more significant a result. In other words, relationships with many * likely repeat if we collect data again. 10.4 Limitations of correlations Correlations are useful, but only to some extend. The three most common limitations you should be aware of are: Correlations are not causal relationships Correlations can be spurious Correlations might only appear in sub-samples of your data 10.4.1 Correlations are not causal relationships Correlations do not offer insights into causality, i.e.¬†whether change in one variable causes change in the other variable. Correlations only provide insights into whether these two variables tend to change when one of them changes. Still, sometimes we can infer such causality by the nature of the variables. For example, in countries with heavy rain, more umbrellas are sold. It is apparent that buying more umbrellas will not cause more rain, but if there is more rain in a country, we rightly assume that there is a higher demand for umbrellas. If we can theorise the relationship between variables we would rather opt for a regression model instead of a correlation (see Chapter 12. 10.4.2 Correlations can be spurious Just because we find a relationship between two variables does not necessarily mean that are truly related to each other. Instead, it might be possible that a third variable is the reason for the relationship. We call relationships between variables that are cause by a third variable ‚Äòspurious correlations.‚Äô This third variable can either be part of our dataset or even something we have not measured at all. The latter case would make it impossible to investigate the relationship further. However, we can always test whether some of our variables affect the relationship between the two variables of interest. This can be done by using partial correlations. A partial correlation returns the relationship between two variables minus the relationship two a third variable. Figure 10.1 depicts this visually. While a and b appear to be correlated with each other, the correlation might only exist because of their correlation with x. Figure 10.1: Illustration of a spurious correlation Let‚Äôs consider a practical example. We found that votes and gross_in_m are positively correlated with each other. However, could it be possible that these are affected by the year in which the movies was published. We could assume that movies that appeared later received more votes, because it has become more of a cultural phenomenon to vote about almost everything online3. # Correlation between variables without considering partial correlations imdb_top_250 %&gt;% select(votes, gross_in_m, year) %&gt;% correlation() ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t | df | p ## ---------------------------------------------------------------------- ## votes | gross_in_m | 0.56 | [0.46, 0.64] | 9.79 | 213 | &lt; .001*** ## votes | year | 0.37 | [0.26, 0.47] | 6.29 | 248 | &lt; .001*** ## gross_in_m | year | 0.36 | [0.23, 0.47] | 5.58 | 213 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 215-250 # Correlation between variables with consideration of partial correlations imdb_top_250 %&gt;% select(votes, gross_in_m, year) %&gt;% correlation(partial = TRUE) ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(213) | p ## ------------------------------------------------------------------ ## votes | gross_in_m | 0.48 | [0.37, 0.58] | 7.98 | &lt; .001*** ## votes | year | 0.28 | [0.16, 0.40] | 4.31 | &lt; .001*** ## gross_in_m | year | 0.16 | [0.03, 0.29] | 2.43 | 0.016* ## ## p-value adjustment method: Holm (1979) ## Observations: 215 The first table reveals that there is a strong relationship between the variables of interest, i.e.¬†between votes and gross_in_m with an effect size of \\(r = 0.56\\). There is also a significant relationship between votes and year, \\(r = 0.37\\) and between gross_in_m and year, \\(r = 0.36\\). Thus, we should control for year to see how it might affect the relationship between votes and gross_in_m. The second table, suggests that year does not much affect the relationship between votes and gross_in_m. However, we do notice that the relationship between gross_in_m and year substantially goes down to \\(r = 0.16\\). It appears, as if the year has not managed to impact the relationship between votes and gross_in_m all that much. Therefore, we can be more confident that this relationship is likely not spurious. However, we can never be fully sure, because we might not have all data that could explain this correlation. 10.4.3 Simpson‚Äôs Paradox: When correlations betray you The final limitation is so important that it even has its own name: the ‚ÄòSimpson‚Äôs Paradox.‚Äô Let‚Äôs find out what is so paradox about some correlations. For this demonstration we have to make use of a different dataset: simpson of the r4np package. It contains information about changes in student performance and changes in happiness. The dataset includes responses from three different groups: Teachers, Students and Parents. We would assume that an increased in students‚Äô performance will likely increase the happiness of participants. After all, all three have stakes in students‚Äôs performance. simpson %&gt;% ggplot(aes(performance, happiness)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = y ~ x, se = FALSE, color = &quot;red&quot;) simpson %&gt;% select(performance, happiness) %&gt;% correlation() ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t(298) | p ## ---------------------------------------------------------------------- ## performance | happiness | -0.34 | [-0.44, -0.24] | -6.32 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 300 It appears we were terrible wrong. It seems as if performance and happiness are moderately negatively correlated with each other. Thus, the more a student improves their performance, the less happy teachers, parents and even students are. I hope you agree that this is quite counter-intuitive. However, what could be the cause for such a finding. The Simpson‚Äôs paradox explains the phenomenon were correlation might not exist, or even is reversed when considering an entire sample. However, when inspecting sub-samples, different correlations are found. So, what happens if we look at the correlations for each group separately? simpson %&gt;% ggplot(aes(performance, happiness, group = group, colour = group)) + geom_point() + geom_smooth(method = &quot;lm&quot;, formula = y ~ x, se = FALSE, color = &quot;black&quot;) + # Changing colours to make the reference line more visible scale_color_manual(values = c(&quot;#42BDFF&quot;,&quot;#FF5C67&quot;, &quot;#B3AF25&quot;)) simpson %&gt;% group_by(group) %&gt;% select(performance, happiness) %&gt;% correlation() ## Adding missing grouping variables: `group` ## # Correlation Matrix (pearson-method) ## ## Group | Parameter1 | Parameter2 | r | 95% CI | t(98) | p ## ---------------------------------------------------------------------------- ## Parent | performance | happiness | 0.65 | [0.52, 0.75] | 8.47 | &lt; .001*** ## Student | performance | happiness | 0.65 | [0.52, 0.75] | 8.47 | &lt; .001*** ## Teacher | performance | happiness | 0.65 | [0.52, 0.75] | 8.47 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 100 The results have magically been inverted. Instead of a negative correlation we now find a strong positive correlation for among all groups. This seems to make much sense. When compute correlations we need to be aware that subsets of our data might show different directions of correlations, or where we found now correlation, there might suddenly be one. If your study relies on correlations only to detect relationships between variables, which it hopefully does not, it is important to investigate whether the detected or undetected correlations exist. Of course, such an investigation can only be based on data you obtain. The rest remains pure speculation. Nevertheless, as descriptive statistics correlations are very helpful to review the bilateral relationship of your variables. It is often used as a pre-test for regressions (see Chapter 12) and similarly more advanced computations. As a technique to make inferences, the correlation is a good starting point, but should be complemented by other steps, if possible. References "],["comparing-groups.html", "11 Comparing groups 11.1 Comparability: Apples vs Oranges 11.2 Comparing two groups 11.3 Comparing more than two groups 11.4 Comparing groups based on factors: Contingency tables 11.5 A cheatsheet to guide your own group comparisons", " 11 Comparing groups ## ## Attaching package: &#39;rstatix&#39; ## The following object is masked from &#39;package:correlation&#39;: ## ## cor_test ## The following object is masked from &#39;package:stats&#39;: ## ## filter ## Rows: 69578 Columns: 6 ## ‚îÄ‚îÄ Column specification ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ## Delimiter: &quot;,&quot; ## chr (3): country, gender, relationship_status ## dbl (3): age, freedom_of_choice, satisfaction ## ## ‚Ñπ Use `spec()` to retrieve the full column specification for this data. ## ‚Ñπ Specify the column types or set `show_col_types = FALSE` to quiet this message. Social Sciences is about the study of human beings and their interactions. As such, we frequently want to compare two or more groups of human beings, organisations, teams, countries, etc., with each other to see whether they are similar or different from each other. Sometimes we also want to track individuals over time and see how they may have changed in some way or other. In short, comparing groups is an essential technique to make inferences and helps us better understand the diversity that surrounds us. If we want to perform a group comparison we have to consider which technique is most appropriate for the data we have. Some of it might be related to the type of data we have collected, other aspects might be linked to the distribution of the data. More specifically, before we apply any statistical technique we have to consider at least the following: missing data (see Chapter 7.6), outliers (see Chapter 9.5, and the assumptions made by analytical techniques about our data. While we covered missing data and outliers in previous chapters, we have yet to discuss assumptions. For group comparisons there are three main questions we need to answer: Are the groups big enough to be compared, i.e.¬†are they comparable? Is my data parametric or non-parametric? (see Chapter 10.1) How many groups do I wish to compare? Are these groups paired or unpaired? In the following we will look at group comparisons for parametric and non-parametric data in each category and use the wvs_nona dataset, i.e.¬†the wvs data frame after we performed imputation (see also Chapter 7.6.3). Since we already covered how to test whether data is parametric or non-parametric we will forgo this step out of pure convenience and to remain succinct. We also ignore any potential outliers or missing data. The case studies at the end of the book provide realistic examples of how to perform groups comparisons with a new set of data from start to finish (see Chapter @ref()). Thus, parametric and non-parametric tests will be demonstrated with the same dataset and the same variables. 11.1 Comparability: Apples vs Oranges Before we can jump into group comparisons we need to make ourselves aware of whether our groups can be compared in the first place. ‚ÄòComparability‚Äô should not be confused with ‚Äòare the groups equal.‚Äô In many cases, we don‚Äôt want groups to be equal in terms of participants, e.g.¬†between-subject studies. On the other hand, we might want groups to be perfectly equal when we perform within-subject studies. Thus, asking whether groups are comparable is unrelated to whether the subjects in our study are the same. Instead, we are looking at characteristics of our groups. Some commonly considered characteristics include: size: Are the groups about equally large? time: Was the data collected around the same time? exogenous variables: Is the distribution of characteristics we are not interested in, approximately the same across groups? When we compare groups we want to minimise the systematic differences that are not the primary focus of our study. Using the right sampling technique can help with this matter. For example, using a random sample and performing a random allocation to groups can help with achieving comparable groups and remove systematic differences in a way no other sampling strategy can. However, there is still no guarantuee that they will be comparable (see also Altman (1985) and Berger (2006)). Besides, we also face the challenge that in Social Sciences we do not have the option of random sampling. For example, International Business studies heavily rely on lists provided by others, e.g.¬†the European Union, Fortune 500, etc., personal judgement and convenience sampling and only a small proportion actually perform probability sampling (Yang, Wang, and Su 2006). In short, there is no reason to worry if your sampling technique is not random to begin with. However, it emphasises the need to understand your sample and your groups thoroughly. In order to inspect characteristics of groups we wish to compare, we can use descriptive statistics as we covered them in Chapter 8. The only aspect that is different is that we apply these techniques to subsets of our data and not the entire dataset. For example, we might wish to compare female and male Egyptians (see Chapter 11.2.1). If we wanted to make sure these two groups can be compared we might have to check (among other characteristics) whether their age is distributed similarly. We can use the functions we already know to create a plot to investigate this matter. We could either use a boxplot, or, a bit more accurate, a density plot using the ggridges package. # Only select participants from &#39;Egypt&#39; comp &lt;- wvs_nona %&gt;% filter(country == &quot;Egypt&quot;) comp %&gt;% ggplot(aes(x = age, y = gender, fill = gender)) + ggridges::geom_density_ridges(bandwidth = 4) As we can see, the distribution of age across both gender groups is fairly similar and likely not different between groups. Of course, we could also statistically explore this using a suitable test before performing the main group comparison. However, we first have to understand how we can perform them. In the following chapters we will largely rely the package rstatix which offers a pipe-friendly approach to using the built-in functions to perform our group comparisons. However, you are welcome to also try the basic functions as well, which you can find in Chapter ??. 11.2 Comparing two groups The simplest of comparisons is the one where you only have two groups. These groups could either consist of different people (unpaired) or represent two measurements of the same individuals (paired). 11.2.1 Two Unpaired groups An unpaired group test assumes that the observations in each group are not related to each other, for example that the participants in each group are different individuals. Our first comparison will be participants from Egypt and we want to understand whether male and female citizens in this country perceive that they have freedom_of_choice. We first can compare these two groups using our trusty geom_boxplot (or any variation of it). # Compute the mean for and size of each group group_means &lt;- comp %&gt;% group_by(gender) %&gt;% summarise(g_mean = mean(freedom_of_choice), n = n()) group_means ## # A tibble: 2 √ó 3 ## gender g_mean n ## &lt;fct&gt; &lt;dbl&gt; &lt;int&gt; ## 1 female 6.21 579 ## 2 male 6.82 621 # Create our data visualisation comp %&gt;% ggplot(aes(x = gender, y = freedom_of_choice, fill = gender)) + geom_boxplot() + # Add the mean for each group geom_point(data = group_means, aes(x = gender, y = g_mean), shape = 3, size = 2) While the distribution looks similar, we can notice that the median and the mean (marked by the cross inside the boxplot) are slighter higher for male participants. Thus, we can suspect slight differences between these two groups, but we do not know whether these differences are significant or not. To consider the significance (remember Chapter 10.3) and the effect size (see Table 10.2) we have to perform statistical tests. Table 11.1 summarises the different tests and functions to perform the group comparison computationally. It is important to note that the parametric test compares the means of two groups, while the non-parametric test compares medians. All of these tests turn significant if the differences between groups is large enough. Thus, significant results can be read as ‚Äòthese groups are significantly different from each other.‚Äô Of course, if the difference is not significant, the groups are considered to be not different from each other. For parametric tests, i.e.¬†t.test(), it is also important to indicate whether the variances between these two groups are equal or not. Remember this was one of the assumptions for parametric tests. The Welch t-test can be used if the variances are not equal, but all other criteria for normality are met. By setting var.equal = TRUE, a regular T-Test would be performed. By defaulty, t.test assumes that variances are not equal. Make sure you test for homogeneity of variance before making your decision (see Chapter 9.4. Table 11.1: Comparing two unpaired groups (effect size functions from package effectsize, except for wilcoxonR() from rcompanion Assumption Test Function Effect size Function Parametric T-Test Welch T-Test t_test(var.equal = TRUE) t_test(var.equal = FALSE) Cohen‚Äôs d cohens_d() Non-parametric Mann-Whitney U wilcox_test(paired = FALSE) Wilcoxon R wilcoxonR() With this information in hand, we can start comparing the female Egyptians with the male Egyptians using the parametric and the non-parametric test for illustration purposes only. By setting detailed = TRUE we can obtain the maximum amount for certain comparisons information. In such cases it is advisable to use glimpse(). This will make the output easier to read because each row presents one piece of information, rather than having one row with many columns. # T-Test comp %&gt;% t_test(freedom_of_choice ~ gender, var.equal = TRUE, detailed = TRUE) %&gt;% glimpse() ## Rows: 1 ## Columns: 15 ## $ estimate &lt;dbl&gt; -0.6120414 ## $ estimate1 &lt;dbl&gt; 6.212435 ## $ estimate2 &lt;dbl&gt; 6.824477 ## $ .y. &lt;chr&gt; &quot;freedom_of_choice&quot; ## $ group1 &lt;chr&gt; &quot;female&quot; ## $ group2 &lt;chr&gt; &quot;male&quot; ## $ n1 &lt;int&gt; 579 ## $ n2 &lt;int&gt; 621 ## $ statistic &lt;dbl&gt; -4.75515 ## $ p &lt;dbl&gt; 2.22e-06 ## $ df &lt;dbl&gt; 1198 ## $ conf.low &lt;dbl&gt; -0.864566 ## $ conf.high &lt;dbl&gt; -0.3595169 ## $ method &lt;chr&gt; &quot;T-test&quot; ## $ alternative &lt;chr&gt; &quot;two.sided&quot; # Welch t-test (var.equal = FALSE by default) comp %&gt;% t_test(freedom_of_choice ~ gender, var.equal = FALSE, detailed = TRUE) %&gt;% glimpse() ## Rows: 1 ## Columns: 15 ## $ estimate &lt;dbl&gt; -0.6120414 ## $ estimate1 &lt;dbl&gt; 6.212435 ## $ estimate2 &lt;dbl&gt; 6.824477 ## $ .y. &lt;chr&gt; &quot;freedom_of_choice&quot; ## $ group1 &lt;chr&gt; &quot;female&quot; ## $ group2 &lt;chr&gt; &quot;male&quot; ## $ n1 &lt;int&gt; 579 ## $ n2 &lt;int&gt; 621 ## $ statistic &lt;dbl&gt; -4.756287 ## $ p &lt;dbl&gt; 2.21e-06 ## $ df &lt;dbl&gt; 1193.222 ## $ conf.low &lt;dbl&gt; -0.8645067 ## $ conf.high &lt;dbl&gt; -0.3595762 ## $ method &lt;chr&gt; &quot;T-test&quot; ## $ alternative &lt;chr&gt; &quot;two.sided&quot; # Mann-Withney U test comp %&gt;% wilcox_test(freedom_of_choice ~ gender, detailed = TRUE) %&gt;% glimpse() ## Rows: 1 ## Columns: 12 ## $ estimate &lt;dbl&gt; -0.999948 ## $ .y. &lt;chr&gt; &quot;freedom_of_choice&quot; ## $ group1 &lt;chr&gt; &quot;female&quot; ## $ group2 &lt;chr&gt; &quot;male&quot; ## $ n1 &lt;int&gt; 579 ## $ n2 &lt;int&gt; 621 ## $ statistic &lt;dbl&gt; 149937.5 ## $ p &lt;dbl&gt; 4.97e-07 ## $ conf.low &lt;dbl&gt; -0.9999694 ## $ conf.high &lt;dbl&gt; -5.79946e-05 ## $ method &lt;chr&gt; &quot;Wilcoxon&quot; ## $ alternative &lt;chr&gt; &quot;two.sided&quot; You might notice that the notation within the functions for group tests looks somewhat different to what we are used to, i.e.¬†we use the ~ (‚Äòtilde‚Äô) symbol. Some functions take a formula as their attribute and to distinguish the dependent and independent variable from each other we use ~. A more generic notation of how formulas in functions work is shown below, where DV stands for dependent variable and IV stands for independent variable: function(formula = DV ~ IV) Group comparisons, even for multiple groups, we usually only have one independent variable, i.e.¬†the grouping variable. Grouping variables are usually of the type factor. In case of two groups, we have two levels present in this factor, e.g.¬†gender. If there are multiple groups, the factor contains multiple levels, e.g.¬†country. No matter which test we run, it appears as if the difference is significant. However, how big is the difference? The answer to this is provided by the effect size. The interpretation of what the effect size is, follows the explanations in Chapter 10, where we looked at the strength of the correlation of two variables. However, different effect size measures imply that we have to use different benchmarks. To help us a bit with the interpretation we can use the effectsize package and their set of interpret_...() functions (see also Indices of Effect Size). Sometimes, there are even more than one way of computing the effect size. For example for the Mann-Whitney test we can choose between the classic Wilcoxon R or the rank-biserial correlation coefficient. In practice, you have to be explicit about how you computed the effect size. The differences between the two measures are often marginal and a matter of taste (or should I say: Your reviewers‚Äô taste). Throughout this chapter I will rely on the effect sizes most commonly found in Social Sciences publications. However, feel free to explore other indices as well, especially those offered in the effectsize package as well. # After parametric test d &lt;- comp %&gt;% cohens_d(freedom_of_choice ~ gender, var.equal = TRUE, ci = TRUE) effectsize::interpret_d(d$effsize) ## [1] &quot;small&quot; ## (Rules: cohen1988) # After non-parametric test wr &lt;- comp %&gt;% wilcox_effsize(freedom_of_choice ~ gender, ci = TRUE) effectsize::interpret_r(wr$effsize) ## [1] &quot;small&quot; ## (Rules: funder2019) Looking at our test results, the female Egyptians perceive freedom_of_choice differently from their male counterparts. This is in line with our boxplots. However, the effect sizes tend to be small, which means the differences between the two groups is marginal. Similar to correlations, group comparisons need to be analysed in two stages answering two questions: Is the difference between groups significant? Is the difference small, medium or large? The combination of both analytical steps gives us a comprehensive answer to our research question and enables us to derive with meaningful conclusions. This applies to all group comparisons covered in this book. 11.2.2 Two Paired groups Sometimes, we are not interested in the difference between subjects, but within them, i.e.¬†we want to know whether the same person provides similar or different responses at two different times. Thus, it becomes evident that observations need to be somehow linked to each other. Paired groups are often found and used in longitudinal studies and in experimental studies (e.g.¬†pre-test vs post-test). For example, if we look at our imdb_top_250 dataset we can see that some directors have more than one movie in the top 250. Therefore, we could be curious to know whether earlier movies of directors have been significantly more successful than their later ones. imdb_top_250 %&gt;% group_by(director) %&gt;% summarise(n = n()) %&gt;% arrange(desc(n)) ## # A tibble: 155 √ó 2 ## director n ## &lt;fct&gt; &lt;int&gt; ## 1 Christopher Nolan 7 ## 2 Martin Scorsese 7 ## 3 Stanley Kubrick 7 ## 4 Akira Kurosawa 6 ## 5 Alfred Hitchcock 6 ## 6 Steven Spielberg 6 ## 7 Billy Wilder 5 ## 8 Charles Chaplin 5 ## 9 Hayao Miyazaki 5 ## 10 Ingmar Bergman 5 ## # ‚Ä¶ with 145 more rows For this investigation we use the modified dataset dir_mov which only contains movies of directors who have two or more movies listed in the IMDb Top 250s. Where directors had more than two movies, I randomly sampled two movies. Thus, there is a certain limitation to our dataset. We can use boxplots to compare earlier movies (i.e.¬†1) with later movies (i.e.¬†2) across all directors. Thus, each director is reflected in both groups with one of their movies and therefore the same directors can be found in each group. As a measure of success we use the imdb_rating. dir_mov %&gt;% ggplot(aes(x = movie, y = imdb_rating, fill = movie)) + geom_boxplot() The boxplots look almost identical which suggests that the rating of movies in both groups has not changed significantly. However, the boxplot can only show a summary statistics for each group. Thus, it only implies that the movies in group 1 have about the same ratings as the movies in group 2. If we want to visualise how the ratings have changed for each director from the first to the second movie, we can create a point plot and draw lines with geom_line() to connect the movies in each group. A line that movies up indicates that the second movie was rated higher than the first one and vice versa. dir_mov %&gt;% ggplot(aes(x = movie, y = imdb_rating, colour = director)) + geom_point() + geom_line(aes(group = director)) + # Remove the legend theme(legend.position = &quot;none&quot;) Based on this plot we have to revise our interpretation slightly. Directors who received particularly high ratings on their first movie (i.e.¬†the top 3 in group 1) scored much lower on the second movie. First, we can notice from our boxplots that these movies count as outliers, and second, obtaining such high scores on a movie is tough to replicate. Needless to say, all these movies are rated as very good, otherwise they would not be in this list. It is worth noting that the way the y axis is scaled emphasises differences. Thus, a difference between a rating of 9 and 8.5 appears large. If we change the range of the y axis to ‚Äò0-10,‚Äô the differences appear marginal, but it reflects (1) the possible length of the scale (IMDb ratings range from 0-10) and (2) the magnitude in change relative to the entire scale. More often than note, this ‚Äòzoom-in‚Äô effect is sometimes used to create the illusion of large differences were there are none. Be aware when you present your findings not to create visualisations that could be misleading. dir_mov %&gt;% ggplot(aes(x = movie, y = imdb_rating, colour = director)) + geom_point() + geom_line(aes(group = director)) + # Remove the legend theme(legend.position = &quot;none&quot;)+ # Manuall define the y axis range ylim(0,10) Considering the revised plot, we likely can predict what the statistical test will show. Table 11.2 summarises which tests and functions need to be performed if our data is parametric or non-parametric. In both cases, the functions are the same to those of the unpaired group comparisons, but we need to add the attribute paired = TRUE. Still, the interpretations between the unpaired and paired tests remain the same. Also, be aware that some tests have changed in name, e.g.¬†the Mann-Whitney U test has become the Wilcoxon Signed Rank Test. even though we use the same functions as before, by changing the attributed of paired we also change the computational technique to obtain the results. Thus, be aware that the same function can perform different computations. Table 11.2: Comparing two unpaired groups (effect size functions from package effectsize, except for wilcoxonPairedR() from rcompanion) Assumption Test Function Effect size Function Parametric T-Test t_test(paired = TRUE) Cohen‚Äôs d cohens_d() Non-parametric Wilcoxon Signed Rank Test wilcox_test(paired = TRUE) Wilcoxon r wilcoxonPairedR() Let‚Äôs apply the functions to find out whether the differences we can see in our plots matter. # Paired T-Test dir_mov %&gt;% t_test(imdb_rating ~ movie, paired = TRUE, var.equal = TRUE, detailed = TRUE) %&gt;% glimpse() ## Rows: 1 ## Columns: 13 ## $ estimate &lt;dbl&gt; 0.04186047 ## $ .y. &lt;chr&gt; &quot;imdb_rating&quot; ## $ group1 &lt;chr&gt; &quot;1&quot; ## $ group2 &lt;chr&gt; &quot;2&quot; ## $ n1 &lt;int&gt; 43 ## $ n2 &lt;int&gt; 43 ## $ statistic &lt;dbl&gt; 0.8717132 ## $ p &lt;dbl&gt; 0.388 ## $ df &lt;dbl&gt; 42 ## $ conf.low &lt;dbl&gt; -0.05504967 ## $ conf.high &lt;dbl&gt; 0.1387706 ## $ method &lt;chr&gt; &quot;T-test&quot; ## $ alternative &lt;chr&gt; &quot;two.sided&quot; ## Wilcoxon Signed Rank Test dir_mov %&gt;% wilcox_test(imdb_rating ~ movie, paired = TRUE) ## # A tibble: 1 √ó 7 ## .y. group1 group2 n1 n2 statistic p ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 imdb_rating 1 2 43 43 278 0.562 As expected, the paired tests reveal that the differences in rating between the first movie and the second movie are not significant. Usually, there would be no reason to follow this up with the computation of effect sizes, because we only need to do this if the differences are statistically significant. However, nothing can stop us from still doing so. ## After T-Test d &lt;- cohens_d(imdb_rating ~ movie, data = dir_mov, paired = TRUE, var.equal = TRUE) effectsize::interpret_d(d$effsize) ## [1] &quot;very small&quot; ## (Rules: cohen1988) # After Wilcoxon Signed Rank Test wr &lt;- dir_mov %&gt;% wilcox_effsize(imdb_rating ~ movie, paired = TRUE, ci = TRUE) effectsize::interpret_r(wr$effsize, rules = &quot;cohen1988&quot;) ## [1] &quot;very small&quot; ## (Rules: cohen1988) As we would expect, the effect sizes are very small too, irrespective of whether we treat our data as parametric or non-parametric. After all, being a successful director ranked in the IMDb top 250 seems to imply that other movies are equally successful, but remember the limitations of our dataset before drawing your final conclusions. 11.3 Comparing more than two groups Often we find ourselves in situations where comparing two groups is not enough. Instead, we might be faced with three or more groups fairly quickly. For example, the wvs dataset let‚Äôs us look at 48 different countries, all of which we could compare very quickly with just a few lines of code. In the following chapters we look at how we can perform the same type of analysis as before, but with multiple unpaired and paired groups using R. Similarly to the two-samples group comparison, we cover the parametric and non-parametric approaches. 11.3.1 Multiple unpaired groups Have you ever been wondering whether people in different countries are equally satisfied with their lives? You might have a rough guess that it is not the case, because the social, economic and political environment might place an import role. If you live in a country that is affected by social conflicts, one‚Äôs life satisfaction might be drastically lower. In the following we take a look at three countries Iraq, Japan and Korea. I did not only chose these countries out of personal interest, but because they nicely demonstrate the purpose of the chapter, i.e.¬†finding out whether there are differences in the perception of satisfaction across three countries. At any time, feel free to remove the filter() function to gain the results of all countries in the dataset, but prepare for slightly longer computations. We first create the dataset which only contains the three desired countries. mcomp &lt;- wvs_nona %&gt;% filter(country == &quot;Iraq&quot; | country == &quot;Japan&quot; | country == &quot;Korea&quot;) Similar to before, we can use the ggridges package to draw density plots for each group. This has the added benefit that we can compare the distribution of data for each group and see whether the assumption of normality is likely met or not. On the other hand, we lose the option to easily identify any outliers. You win some and you lose some. mcomp %&gt;% group_by(country) %&gt;% ggplot(aes(x = satisfaction, y = reorder(country, satisfaction), fill = country)) + ggridges::stat_density_ridges(bandwidth = 0.6, quantile_lines = TRUE, # adds median indicator quantiles = (0.5)) + # Remove legend theme(legend.position = &quot;none&quot;) The plot shows us that Japan and Korea appear to be very similar if not identical (based on the median), but Iraq appears to be different from the other two groups. When performing a multiple group comparison we can follow similar steps as before with two groups, i.e. perform the comparison, determine the effect size, and interpret the effect size. Table 11.3 summarises which test needs to be chosen to compare multiple unpaired groups and their corresponding effect size measures. Table 11.3: Comparing multiple unpaired groups (effect size functions from package effectsize) Assumption Test Function for test Effect size Function for effect size4 Parametric ANOVA anova_test (assumes equal variances) oneway.test(var.equal = TRUE/FALSE) Eta squared eta_squared() Non-parametric Kruskall-Wallis test kruskal_test() Epsilon squared (rank) rank_epsilon_squared() Let‚Äôs begin by conducting the group comparison. As you will notice, rstatix currently does not support a parametric test where var.equal = FALSE. Therefore we need to fall back to the underlying function oneway.test(var.equal = FALSE) # ANOVA ## equal variances assumed mcomp %&gt;% anova_test(satisfaction ~ country, detailed = TRUE) ## ANOVA Table (type II tests) ## ## Effect SSn SSd DFn DFd F p p&lt;.05 ges ## 1 country 4258.329 11314.68 2 3795 714.133 5.74e-264 * 0.273 ## Equal variances not assumed (test &lt;- oneway.test(satisfaction ~ country, data = mcomp, var.equal = FALSE)) ## ## One-way analysis of means (not assuming equal variances) ## ## data: satisfaction and country ## F = 663.17, num df = 2.0, denom df = 2422.8, p-value &lt; 2.2e-16 # Kruskall-Wallis test ## Perform comparison (test &lt;- mcomp %&gt;% kruskal_test(satisfaction ~ country)) ## # A tibble: 1 √ó 6 ## .y. n statistic df p method ## * &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 satisfaction 3798 1064. 2 1.11e-231 Kruskal-Wallis While anova_test() does provide the effect size automatically, i.e.¬†generalised eta squared (ges), this is not the case for the other two approaches. Therefore, we have to use the effectsize package to help us out. Packages often can get you a long way and make your life easier, but it is good to know alternatives in case a single package does not give you what you need. # # After ANOVA with var.equal = FALSE # effectsize::eta_squared(test) # # # effect size rank epsilon squared # effectsize::rank_epsilon_squared(mcomp$satisfaction ~ mcomp$gender) # # # effect size eta squared (an alternative to epsilon squared) # mcomp %&gt;% kruskal_effsize(satisfaction ~ country) The results show that there is a significant and large difference between these groups. You might argue that this is actually not quite true. Considering our plot, we know that Japan and Korea do not look like as if they are significantly different. Multiple group comparisons only consider differences across all three groups. Therefore, if one group lies far away from the other groups, the test will turn significant and even provide a large enough effect size to consider it important. However, these tests do not provide information which differences between groups are significant. To gain more clarification about this, we need to incorporate another step, so called ‚Äòpost-hoc tests.‚Äô These tests compare two groups at a time, which is why they are also known as ‚Äòpairwise comparisons.‚Äô Compared to regular two-sample tests, these perform corrections of the pvalues for mulitple testing, which is necessary. However, there are many different ‚Äòpost-hoc‚Äô tests one can choose from. Field (2013) (p.459) nicely outlines the different scenarios and provides recommends to navigate this slightly complex field of post-hoc tests to follow-up a one-way ANOVA. Table 11.4 provides an overview of his suggestions. Table 11.4: Different post-hoc tests for different scenarios (parametric) Equal sample size Equal variances Post-hot tests Functions in R YES YES REGWQ, Tukey, Bonferroni mutoss::regwq()5 rstatix::tukey_hsd() pairwise.t.test(p.adjust.method = \"bonferroni\") NO (slightly different) YES Gabriel YES YES Hochberg‚Äôs GT2 Not available in R and should not be confused with pairwise.t.test(p.adjust.method = \"hochberg\"), which is based on Hochberg (1988). The GT2, however, is based on Hochberg (1974). NO (not ideal for small samples) NO Games-Howell rstatix::games_howell_test() You might be surprised to see that there are also post-hoc tests for parametric group comparisons when the assumption of equal variances is not assumed. Would we not have to use a non-parametric test for our group comparison instead? Well, empirical studies have demonstrated that ANOVAs tend to produce robust results, even if the assumption of normality (e.g. Blanca Mena et al. (2017)) is not given, or there is some degree of heterogeneity of variance between groups (Tomarken and Serlin 1986). In other words, there can be some leniancy (or flexibility?) when it comes to the violation of parametric assumptions. If you want to reside on the save side, you should ensure you know your data and its properties. If in doubt, non-parametric tests are also available. If we want to follow up the Kruskall-Wallis test, i.e.¬†the non-parametric equivalent to the one-way ANOVA, we can make use of two post-hoc tests: Dunn Test: rstatix::dunn_test() (Dinno 2015) Pairwise comparison with Bonferroni (and other) correction: pairwise.wilcox.test(). Below are some examples of how you would use these functions in your project. However, be aware that some of the post-hoc tests are not or not well implemented yet in R. Here I show the most important ones which likely serve you in 90% of the cases. # POST_HOC TEST FOR PARAMETRIC DATA # Bonferroni pairwise.t.test(mcomp$satisfaction, mcomp$country, p.adjust.method = &quot;bonferroni&quot;) ## ## Pairwise comparisons using t tests with pooled SD ## ## data: mcomp$satisfaction and mcomp$country ## ## Iraq Japan ## Japan &lt;2e-16 - ## Korea &lt;2e-16 1 ## ## P value adjustment method: bonferroni # Tukey mcomp %&gt;% tukey_hsd(satisfaction ~ country) ## # A tibble: 3 √ó 9 ## term group1 group2 null.value estimate conf.low conf.high p.adj ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 country Iraq Japan 0 2.29 2.13 2.45 0.0000000141 ## 2 country Iraq Korea 0 2.26 2.10 2.43 0.0000000141 ## 3 country Japan Korea 0 -0.0299 -0.189 0.129 0.898 ## # ‚Ä¶ with 1 more variable: p.adj.signif &lt;chr&gt; # Games-Howell mcomp %&gt;% games_howell_test(satisfaction ~ country) ## # A tibble: 3 √ó 8 ## .y. group1 group2 estimate conf.low conf.high p.adj p.adj.signif ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 satisfaction Iraq Japan 2.29 2.11 2.47 0 **** ## 2 satisfaction Iraq Korea 2.26 2.11 2.42 5.92e-11 **** ## 3 satisfaction Japan Korea -0.0299 -0.178 0.118 8.84e- 1 ns # POST-HOC TEST FOR NON-PARAMETRIC DATA mcomp %&gt;% dunn_test(satisfaction ~ country) ## # A tibble: 3 √ó 9 ## .y. group1 group2 n1 n2 statistic p p.adj p.adj.signif ## * &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 satisfaction Iraq Japan 1200 1353 29.2 4.16e-187 1.25e-186 **** ## 2 satisfaction Iraq Korea 1200 1245 27.6 8.30e-168 1.66e-167 **** ## 3 satisfaction Japan Korea 1353 1245 -1.02 3.10e- 1 3.10e- 1 ns # or pairwise.wilcox.test(mcomp$satisfaction, mcomp$country, p.adjust.method = &quot;holm&quot;) ## ## Pairwise comparisons using Wilcoxon rank sum test with continuity correction ## ## data: mcomp$satisfaction and mcomp$country ## ## Iraq Japan ## Japan &lt; 2e-16 - ## Korea &lt; 2e-16 0.00093 ## ## P value adjustment method: holm As we can see, no matter which function we use, the interpretation of the results remain the same on this occasion. 11.3.2 Multiple paired groups Additional condition if you compare three or more groups with each other. Might not be good to call them groups actually, because it refers to different measures by the same person usually over an extended period of time. Is an extension of the linear model - so why not simply use a regression instead. Is it because regression primarily use quantitative data and not categorical type data? repeated measures ANOVA (find dataset) # anova_test() # # eta_squared() # omega_squared() Friedman Test (find dataset) # # NON=PARAMETRIC COMPARISON # friedman_test() # # # Effect size # kendalls_w() A useful overview of all the possible options of comparing groups and how to obtain their effect sizes can also be found here https://indrajeetpatil.github.io/statsExpressions/articles/stats_details.html 11.4 Comparing groups based on factors: Contingency tables Unpaired # wvs_nona %&gt;% infer::chisq_test(relationship_status ~ gender) # # cramers_v() Paired # mcnemar.test() # # # Effect size # cohens_g() 11.5 A cheatsheet to guide your own group comparisons To summarise what we have covered in this section, we can consider References "],["regression.html", "12 Regression: Creating models to predict future observations 12.1 Single linear regression 12.2 Multiple regression 12.3 Hierarchical regression", " 12 Regression: Creating models to predict future observations Regressions are an interesting area of data analysis since it enables us to make very specific predictions about the future incorporating different variables at the same time. As the name implies, regressions ‚Äòregress,‚Äô i.e.¬†they draw on past observations to make predictions about future observations. Thus, any analysis incorporating a regression makes the implicit assumption that the future can be best explained by the past. I once heard someone refer to regressions as driving a car by looking at the rearview mirror. As long as the road is straight, we will be able to successfully navigate the car. However, if there is a sudden turn, we might drive into the abyss. This makes it very clear when and how regressions are can be helpful. Regressions are also a machine learning method, which falls under models with supervised learning. If you find machine learning fascinating, you might find the book ‚ÄúHands-on Machine Learning with R‚Äù (Boehmke and Greenwell 2019) very insightful and interesting. In the following chapters we will cover three common types of regressions: Single linear regression Multiple regression Hierarchical regression These three types will allow you to perform any other type of linear regression you could think of. We can further distinguish two approaches to modelling via regressions: hypothesis testing: A regression model is defined ex-ante machine learning: A model is developed based on empirical data In the following chapters we will slightly blur the lines between both approaches. All our regressions will be performed using the covid dataset of the r4np package to investigate whether certain factors can predict COVID numbers in different countries. I felt, this book would not have been complete without covering this topic. After all, I wrote this book during the pandemic and it likely will mark a dark chapter in human history. 12.1 Single linear regression A single linear regression looks very similar to a correlation (see Chapter 10, but it is different in that it defines which variable affects another variable, i.e.¬†a single direction relationship. I used the terms dependent variable (DV) and independent variable (IV) previously when comparing groups (see Chapter 11, and we will use them here again. In group comparisons, the independent variable was usually a factor, but in regressions we can use data that is not a categorical variable, i.e.¬†integer, double, etc. While I understand that mathematical equations can be confusing, with regressions, they are fairly simple to understand. Also, when writing our models in R, we will continuously use a formula to specify our regression. A single linear regression consists of one independent variable and one dependent variable: \\[ DV = \\beta_{0} + IV * \\beta_{1} + error \\] Beta (\\(\\beta\\)) represents the coefficient of the independent variable, i.e.¬†how much a change in IV causes a change in DV. For example, a one unit change in the IV might mean that the DV changes by two units of IV: \\[ DV = \\beta_0 + 2 * IV + error \\] If we ignore \\(\\beta_0\\) and \\(error\\) for a moment, we find that that if \\(IV = 3\\), our \\(DV = 2*3 = 6\\). Therefore, if \\(IV = 5\\), we find that \\(DV = 10\\), and so on. According to this model, DV will always be twice as large as IV. You might be wondering what \\(\\beta_0\\) stands for. It indicates an offset for each value, also called the intercept. Thus, no matter which value we choose for IV, DV will always be \\(\\beta_0\\) different from IV. It is a constant in our model. This can be best explained by visualising a regression line. Pay particular attention to the to the expressions after function(x) # A: Two models with different beta(0) ggplot() + geom_function(fun = function(x) 2 * x, colour = &quot;red&quot;) + geom_function(fun = function(x) 1 + 2 * x, colour = &quot;blue&quot;) + see::theme_modern() # B: Two models with the same beta(0), but different beta(1) ggplot() + geom_function(fun = function(x) 2 * x, colour = &quot;red&quot;) + geom_function(fun = function(x) 3 * x, colour = &quot;blue&quot;) + see::theme_modern() Plot B also shows what happens if we change \\(\\beta_1\\), i.e.¬†the slope. The two models both have the same intercept (and therefore the same origin), but the blue line ascends quicker than the red one, because its \\(\\beta_1\\) is higher than the one for the red model. Lastly, the \\(error\\) component in the regression model refers to the deviation of data from this regression lines. Ideally, we want this value to be as small as possible. 12.1.1 Fitting a regression model by hand, i.e.¬†trial and error If this sounds all awfully theoretical, let‚Äôs try to fit a regression model by hand. First we need to consider what our model should be able to predict. Let‚Äôs say that the number of COVID-19 cases predicts the number of deaths due to COVID-19. Intuitively we would assume this should be a linear relationship, because the more cases there are, the more likely we find more deaths caused by it. # We only select most recent numbers, i.e. &quot;2021-08-26&quot; # and countries which have COVID cases covid %&gt;% filter(date_reported == &quot;2021-08-26&quot; &amp; cumulative_cases != 0) %&gt;% ggplot(aes(x = cumulative_cases, y = cumulative_deaths)) + geom_point() This data visualisation shows us not much. We can see that there are three countries, which appear to have considerably more cases than most other countries. Thus, all other countries are crammed together in the bottom left corner. To improve this visualisation without removing the outliers, we can rescale the x and y axis using the function scale_x_continuous() and scale_y_continuous(). covid %&gt;% filter(date_reported == &quot;2021-08-26&quot; &amp; cumulative_cases != 0) %&gt;% ggplot(aes(x = cumulative_cases, y = cumulative_deaths)) + geom_point() + scale_x_continuous(trans = &quot;log&quot;) + scale_y_continuous(trans = &quot;log&quot;) As we can see, the scatterplot is now easier to read and the dots are more spread out. This reveals that there is quite a strong relationship between cumulative_cases and cumulative_deaths. However, similar to before, we should avoid outliers when performing our analysis. For the sake of simplicity, in this section I will limit the number of countries included in our analysis, which also removes the requirement of using scale_x_continuous() and scale_y_continuous(). covid_sample &lt;- covid %&gt;% filter(date_reported == &quot;2021-08-26&quot; &amp; cumulative_cases &gt;= 2500 &amp; cumulative_cases &lt;= 150000 &amp; cumulative_deaths &lt;= 3000) plot &lt;- covid_sample %&gt;% ggplot(aes(x = cumulative_cases, y = cumulative_deaths)) + geom_point() plot Through trial and error we can try to fit a linear line on top by adjusting the beta values. This is effectively what we hope to achieve with a regression: the best \\(\\beta\\) values which best explain our data. Let‚Äôs start with the basic assumption of \\(y = x\\) without specific \\(\\beta\\)s, i.e.¬†they are zero. plot + geom_function(fun = function(x) x, colour = &quot;red&quot;) What we try to achieve is that the red line fits nicely inside the cloud of dots. Our very simple model provides a very poor fit to our data points, because all the dots are way below it. This makes sense, because \\(y = x\\) would imply that every COVID-19 case leads to a death, i.e.¬†everyone with COVID did not survive. From our own experience we know that this is luckily not true. Ideally we want the line to be less steep, because our first model does not make much sense. We can do this by adding a \\(\\beta_1\\) to our equation. Maybe only 2% of people who got COVID-19 might not have recovered, i.e.¬†\\(\\beta_1 = 0.02\\). plot + geom_function(fun = function(x) 0.02*x, colour = &quot;red&quot;) This time the line looks much more aligned with our observations. One could argue that it might have to move a little to the right as well, to cover the observations at the bottom a bit better. Therefore, we should add a \\(\\beta_0\\) to our equation, e.g.¬†-50.= to move it to the right and tweak the \\(\\beta_1\\) ever so slightly. plot + geom_function(fun = function(x) -50 + 0.015*x, colour = &quot;red&quot;) We finished creating our regression model. If we wanted to express it as a formula we would write \\(DV = -5 + 0.015 * IV\\). We could now use this model to predict how high COVID cases likely will be in other countries. Estimating a regression model in this way is not ideal and far from accurate. Instead, we would compute the \\(\\beta\\)s based on our observed data, i.e.¬†cumulative_cases and cumulative_deaths. We can use the function lm() to achieve this. I also rounded the all numeric values to two decimal places to make the output easier to read. We also use tidy() to retrieve a cleaner output from the computation. # classic r m0 &lt;- lm(cumulative_deaths ~ cumulative_cases, data = covid_sample) broom::tidy(m0) %&gt;% mutate(across(where(is.numeric), round, 2)) ## # A tibble: 2 √ó 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 (Intercept) 88.1 70.5 1.25 0.21 ## 2 cumulative_cases 0.01 0 10.7 0 We first might notice that the p.value indicates that the relationship between cumulative death and cumulative_cases is significant. Thus, we can conclude that countries with more COVID cases also suffer higher numbers of people who do not successfully recover from it. However, you might be wondering where our \\(\\beta\\) scores are. They are found where it says estimate. The standard error (std.error) denotes the error we specified in the previous equation. We find that in the first row we get the \\(\\beta_0\\), i.e.¬†the one for the intercept which is 88.10. This one is larger than what we estimated, i.e.¬†-50. However, \\(\\beta_1\\) is 0.01, which means we have done a very good job in guessing this estimate. Still, it becomes hopefully obvious that it is much easier to use the function lm() to estimate a model than ‚Äòeyeballing it.‚Äô We can now visualise the computed model (in blue) and our guessed model (in red) in one plot and see the differences. The plot shows that we have not been too far off. However, it was relatively easy to fit a model onto the observed data in this case. Often, it is much more difficult, especially when more than two variables are involved. plot + geom_function(fun = function(x) -50 + 0.015*x, colour = &quot;red&quot;) + geom_function(fun = function(x) 88.1 + 0.01*x, colour = &quot;blue&quot;) With our final model computed, we also need to check its quality in terms of predictive power based on how well it can actually explain our observed data. We have tested models before when we looked at confirmatory factor analyses for latent variables (see Chapter 7.7. This time we want to know how accurate our model is in explaining observed data and therefore how accurate it will be predicting future observations. The package performance offers a nice little shortcut to compute many different things at once: check_model(): Checks for linearity, homogeneity, collinearity and outliers model_performance(): Tests the quality of our model. For now, we are mainly interested in the performance of our model. So, we can compute it the following way: performance::model_performance(m0) ## # Indices of model performance ## ## AIC | BIC | R2 | R2 (adj.) | RMSE | Sigma ## ----------------------------------------------------------- ## 1472.626 | 1480.319 | 0.548 | 0.543 | 502.573 | 507.891 There are quite a number of performance indicators and here is how to read them: AIC stands for Akaike Information Criterion and the lower the score the better the model BIC stands for Bayesian Information Criterion and the lower the score the better the model R2 stands for R squared (\\(R^2\\)) and is also known as the coefficient of determination. It measures how much the independent variable can explain the variance in the dependent variable. In other words, the higher \\(R^2\\) the better is our model, because more of the variance can be explained by our model. \\(R^2\\) falls between 0-1, where 1 would imply that our model can explain 100% of the variance in our sample. \\(R^2\\) is also considered a goodness-of-fit measure. R2 (adj.) stands for adjusted R squared. The adjusted version of \\(R^2\\) becomes important if we have more than one preditor (i.e.¬†independent variable) in our regression. The adjustment of \\(R^2\\) accounts for the number of independent variables in our model. Thus, it is possible for us to compare different models with each other, even though they might have different numbers of predictors. It is important to note that \\(R^2\\) will always increase if we add more predictors. RMSE stands for Root Mean Square Error and is an indicate how small or large the prediction error of the model is. Conceptually, it aims to measure the average deviations of values from our model when we attempt predictions. The lower the score the better, i.e.¬†a score of 0 would imply that our model perfectly fits the data, which is likely never the case in the field of Social Sciences. The RMSE is particularly useful when trying to compare models. Sigma stands for the standard deviation of our residuals (the difference between predicted and empirically observed values) and is therefore a measure of prediction accuracy. Sigma is ‚Äòa measure of the average distance each observation falls from its prediction from the model‚Äô (Gelman, Hill, and Vehtari 2020, 168). Many of these indices will become more relevant when we compare models. However, \\(R^2\\) can also be meaningfully interpreted without a reference model. We know that the bigger \\(R^2\\) the better. In our case it is 0.548 which is very good considering that our model consist of only one predictor only. It is not easy to interpret whether an particular \\(R^2\\) value is good or bad. In our simple single linear regression, \\(R^2\\) is literally ‚Äòr squared,‚Äô which we already know from correlations and their effect sizes (see Table 10.2. Thus, if we take the square root of \\(R^2\\) we can retrieve the correlation coefficient, i.e.¬†\\(r = \\sqrt{R^2} = \\sqrt{0.548} = 0.740\\). According to Cohen (1988), this would count as a large effect size. However, for multiple regressions, the situation is slightly more complicated, but the interpretation of \\(R^2\\) and its adjusted version remain largely the same. Once you have a model and it is fairly accurate, you can start making predictions. This can be achieved by using our model object m0 in combination with the function predict(). However, first we should define a set of values for our independent variable, i.e.¬†cumulative_cases, which we store in a tibble using the tribble() function. df_predict &lt;- tribble( ~cumulative_cases, 100, 1000, 10000, 100000 ) predict(m0, newdata = df_predict) ## 1 2 3 4 ## 89.53289 102.45411 231.66629 1523.78810 As a result we find out how many likely deaths from COVID have to be expected based on our model for each value in our dataset. Single linear regressions are simple and a good way to introduce novice scholars to modeling social phenomena. However, hardly ever will find that a single variable can explain enough variance to be a useful model. Instead, we most likely can improve the majority of our single regression models by considering more variables in the form of multiple regressions. 12.2 Multiple regression Multiple regressions expand single linear regressions by allowing us to add more variables. Maybe surprisingly, it is fairly similar to compute these in R, because it requires the same function, i.e.¬†lm(). In the last section we wanted to know how many people will likely not recover from COVID. However, it might be even more interesting to understand how we can reduce the number of cumulative cases and prevent casualties from the outset. Since I live in the UK at the time of the pandemic, I am curious to know whether certain COVID measures helped to reduce the number of new COVID cases. Of course, feel free to pick a different country (maybe the one you live in?) to follow with my example. First, we create a dataset that only contains information from the United Kingdom, which means we use filter() and remove observations with missing data. As a first step, we might want to know how the UK performed over the course of time in terms of new cases. Let‚Äôs plot this first. covid %&gt;% ggplot(aes(x = date_reported, y = new_cases)) + geom_col() One issue you might encounter when visualising large values in a plot like this are the axis labels. In our case, the values are very high on the y axis and ggplot abbreviates them, i.e.¬†uses a scientific notation. We might not find this useful, especially when comparing it to the values in our dataset. Therefore, we should change it. The scales package is fantastic, because it can help us take care of it. Here is the same plot, but with better axis labels which everyone can easily understand by just adding labels = scales::comma. covid %&gt;% filter(date_reported == &quot;2021-08-26&quot; &amp; cumulative_cases &gt; 0) %&gt;% ggplot(aes(y = cumulative_cases)) + geom_boxplot() + scale_y_continuous(trans = &quot;log&quot;, labels = scales::comma) In short, it seems there is quite a range of countries with different numbers of COVID cases. However, we also notice that we have outliers which we need to deal with in a moment. If you have hypotheses you want to test, you would already know which variables to include in your regression. However, in our case, we do not really have a hypothesis based on our prior reading or other studies. Thus, we pick, for example three variables of interest that we suspect could help us with modelling COVID cases across countries. We can be fairly certain that the number of COVID cases should be lower in countries were more safety measures are in place (assuming they are effective, of course). The covid dataset includes such information over a very long period of time. Since we do not wish to work with time-series data in this section, we compute the average amount of measures taken expressed as the average index score for our variables of interest, e.g.¬†masks, movements, and gatherings. m1 &lt;- lm(cumulative_cases ~ who_region + number_vaccines_types_used, data = covid) performance::model_performance(m1) ## # Indices of model performance ## ## AIC | BIC | R2 | R2 (adj.) | RMSE | Sigma ## ----------------------------------------------------------------- ## 4.180e+06 | 4.180e+06 | 0.025 | 0.025 | 1.859e+06 | 1.859e+06 covid %&gt;% filter(country == &quot;United Kingdom&quot;) %&gt;% select(where(is.numeric)) %&gt;% correlation::correlation() %&gt;% filter(r &gt;= 0.4) ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## Warning in cor(x, y): the standard deviation is zero ## # Correlation Matrix (pearson-method) ## ## Parameter1 | Parameter2 | r | 95% CI | t | df | p ## ------------------------------------------------------------------------------------- ## new_cases | cumulative_cases | 0.46 | [0.39, 0.52] | 12.59 | 600 | &lt; .001*** ## new_cases | new_deaths | 0.45 | [0.39, 0.52] | 12.51 | 600 | &lt; .001*** ## new_cases | travel | 0.51 | [0.45, 0.57] | 14.56 | 592 | &lt; .001*** ## new_cases | schools | 0.52 | [0.45, 0.57] | 14.66 | 592 | &lt; .001*** ## new_cases | businesses | 0.51 | [0.44, 0.56] | 14.28 | 592 | &lt; .001*** ## new_cases | global_index | 0.65 | [0.61, 0.70] | 21.08 | 592 | &lt; .001*** ## cumulative_cases | cumulative_deaths | 0.96 | [0.96, 0.97] | 86.69 | 600 | &lt; .001*** ## cumulative_cases | global_index | 0.42 | [0.35, 0.49] | 11.30 | 592 | &lt; .001*** ## new_deaths | schools | 0.48 | [0.42, 0.54] | 13.44 | 592 | &lt; .001*** ## new_deaths | businesses | 0.48 | [0.41, 0.54] | 13.20 | 592 | &lt; .001*** ## new_deaths | movements | 0.54 | [0.48, 0.59] | 15.50 | 592 | &lt; .001*** ## new_deaths | global_index | 0.55 | [0.50, 0.61] | 16.17 | 592 | &lt; .001*** ## cumulative_deaths | global_index | 0.45 | [0.39, 0.52] | 12.42 | 592 | &lt; .001*** ## masks | businesses | 0.44 | [0.37, 0.50] | 11.99 | 592 | &lt; .001*** ## masks | global_index | 0.64 | [0.59, 0.68] | 20.06 | 592 | &lt; .001*** ## travel | global_index | 0.51 | [0.45, 0.57] | 14.50 | 592 | &lt; .001*** ## schools | businesses | 0.53 | [0.47, 0.59] | 15.23 | 592 | &lt; .001*** ## schools | movements | 0.52 | [0.46, 0.58] | 14.93 | 592 | &lt; .001*** ## schools | global_index | 0.72 | [0.68, 0.75] | 25.08 | 592 | &lt; .001*** ## businesses | movements | 0.42 | [0.35, 0.48] | 11.29 | 592 | &lt; .001*** ## businesses | global_index | 0.67 | [0.62, 0.71] | 21.98 | 592 | &lt; .001*** ## movements | global_index | 0.59 | [0.53, 0.64] | 17.57 | 592 | &lt; .001*** ## ## p-value adjustment method: Holm (1979) ## Observations: 594-602 covid %&gt;% ggplot(aes(x = gatherings, y = new_cases)) + geom_jitter() + scale_y_continuous(label = scales::comma) ## Warning: Removed 10806 rows containing missing values (geom_point). 12.3 Hierarchical regression References "],["mixed-methods-research-analysing-qualitative-in-r.html", "13 Mixed-methods research: Analysing qualitative in R", " 13 Mixed-methods research: Analysing qualitative in R "],["next-steps.html", "14 Where to go from here: The next steps in your R journey 14.1 GitHub: A Gateway to even more ingenious R packages 14.2 Books to read and expand your knowledge 14.3 Engage in regular online readings about R 14.4 Join the Twitter community and hone your skills", " 14 Where to go from here: The next steps in your R journey 14.1 GitHub: A Gateway to even more ingenious R packages 14.2 Books to read and expand your knowledge 14.3 Engage in regular online readings about R Tidyverse Blog R-blogger 14.4 Join the Twitter community and hone your skills #RStats TidyTuesday "],["appendix.html", "Appendix 14.5 Comparing two unpaired groups", " Appendix 14.5 Comparing two unpaired groups Table 14.1: Comparing two unpaired groups (effect size functions from package effectsize, except for wilcoxonR() from rcompanion Assumption Test Function Effect size Function Parametric T-Test Welch T-Test t.test(var.equal = TRUE) t.test(var.equal = FALSE) Cohen‚Äôs d cohens_d() Non-parametric Mann-Whitney U wilcox.test(paired = FALSE) Rank-biserial r or Wilcoxon R rank_biserial() or wilcoxonR() Table 14.2: Comparing two unpaired groups (effect size functions from package effectsize, except for wilcoxonPairedR() from rcompanion) Assumption Test Function for test Effect size Function for effect size Parametric T-Test t.test(paired = TRUE) Cohen‚Äôs d cohens_d() Non-parametric Wilcoxon Signed Rank Test wilcox.test(paired = TRUE) Rank biserial r or Wilcoxon r rank_biserial() or wilcoxonPairedR() Table 14.3: Comparing multiple unpaired groups (effect size functions from package effectsize) Assumption Test Function for test Effect size Function for effect size Parametric ANOVA aov() (assumes equal variances) oneway.test(var.equal = TRUE/FALSE) Epsilon squared eta_squared() Non-parametric Kruskall-Wallis test kruskal.test() Epsilon squared (rank) rank_epsilon_squared() "],["exercises-solutions.html", "15 Exercises: Solutions 15.1 Solutions for 5.6", " 15 Exercises: Solutions 15.1 Solutions for 5.6 Return to Chapter 5.6 #1 --------------- sqrt(25-16)+2*8-6 ## [1] 13 #2 --------------- &quot;Five&quot; == 5 ## [1] FALSE #3 --------------- books &lt;- list(&quot;Harry Potter and the Deathly Hallows&quot;, &quot;The Alchemist&quot;, &quot;The Davinci Code&quot;, &quot;R For Dummies&quot;) books ## [[1]] ## [1] &quot;Harry Potter and the Deathly Hallows&quot; ## ## [[2]] ## [1] &quot;The Alchemist&quot; ## ## [[3]] ## [1] &quot;The Davinci Code&quot; ## ## [[4]] ## [1] &quot;R For Dummies&quot; # 4 --------------- x_x &lt;- function(number1, number2){ # Creates a function that takes 2 arguments result1 &lt;- number1*number2 # Result1 multiplies the two arguments result2 &lt;- sqrt(number1) # Result2 computes the squareroot of the 1st argument result3 &lt;- number1-number2 # Result3 subtracts the 2nd argument from the 1st return(c(result1, result2, result3)) # Prints all three results into the console } x_x(2,3) ## [1] 6.000000 1.414214 -1.000000 # 5 --------------- # First, install the package. # Second, load the package with &#39;library()&#39; # or use &#39;::&#39; to load only a particular function once. # Third, call the function you are interested in. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
